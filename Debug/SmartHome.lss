
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000494a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000034a  00800060  0000494a  000049de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008003aa  008003aa  00004d28  2**0
                  ALLOC
  3 .stab         00005130  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ad2  00000000  00000000  00009e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000b92a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000baea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000bcfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000e310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000f7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000119ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__vector_1>
       8:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__vector_2>
       c:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__vector_13>
      38:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__vector_14>
      3c:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__vector_15>
      40:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 22 	call	0x456c	; 0x456c <main>
      8a:	0c 94 a3 24 	jmp	0x4946	; 0x4946 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6c 24 	jmp	0x48d8	; 0x48d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6c 24 	jmp	0x48d8	; 0x48d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 56       	subi	r30, 0x6E	; 110
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_voidInt>:





void ADC_voidInt(void){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	
	/* choose voltage ref */
	#if (ADC_REF_SELECTION_BIT==ADC_REF_BIT_AREF)
	CLR_BIT(ADMUX,ADMUX_REFS0);
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8c 93       	st	X, r24
	/* choose  adjust result */

	#if (ADC_ADLAR_RESULT==ADC_LEFT_ADJUST)
	SET_BIT(ADMUX,ADMUX_ADLAR);
	#elif (ADC_ADLAR_RESULT==ADC_RIGHT_ADJUST)
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,  ADCSRA_ADPS1);
		CLR_BIT(ADCSRA,  ADCSRA_ADPS0);
	}
	#elif ADC_PRESCALER == DIV_BY_128
	{
		SET_BIT(ADCSRA, ADCSRA_ADPS2);
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	84 60       	ori	r24, 0x04	; 4
     f28:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADCSRA_ADPS1);
     f2a:	a6 e2       	ldi	r26, 0x26	; 38
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e6 e2       	ldi	r30, 0x26	; 38
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADCSRA_ADPS0);
     f38:	a6 e2       	ldi	r26, 0x26	; 38
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e6 e2       	ldi	r30, 0x26	; 38
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	8c 93       	st	X, r24
	}
	#endif


	/* enable peripheral*/
	SET_BIT(ADCSRA , ADCSRA_ADEN);
     f46:	a6 e2       	ldi	r26, 0x26	; 38
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e2       	ldi	r30, 0x26	; 38
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24


	#if (ADC_CONVERSION==SINGLE_CONVERSION)
	/* disable interrupt */
	CLR_BIT(ADCSRA,ADCSRA_ADIE) ;
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     f62:	a6 e2       	ldi	r26, 0x26	; 38
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e2       	ldi	r30, 0x26	; 38
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	8c 93       	st	X, r24
	#else
	#error "wrong conversion mode "
	#endif


}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <ADC_u8StartConversionSynch>:


u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u16 *copy_puReading) {
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	28 97       	sbiw	r28, 0x08	; 8
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	8e 83       	std	Y+6, r24	; 0x06
     f8c:	78 87       	std	Y+8, r23	; 0x08
     f8e:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter = 0;
     f90:	1a 82       	std	Y+2, r1	; 0x02
     f92:	1b 82       	std	Y+3, r1	; 0x03
     f94:	1c 82       	std	Y+4, r1	; 0x04
     f96:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
     f98:	19 82       	std	Y+1, r1	; 0x01
	
	// Check if the ADC is not busy
	if (ADC_u8BusyState == IDLE) {
     f9a:	80 91 ae 03 	lds	r24, 0x03AE
     f9e:	88 23       	and	r24, r24
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <ADC_u8StartConversionSynch+0x2e>
     fa2:	5d c0       	rjmp	.+186    	; 0x105e <ADC_u8StartConversionSynch+0xe8>
		// Clear the previous channel selection
		// Set the new channel to be converted
				ADMUX &= ADC_MUX_MUSK;
     fa4:	a7 e2       	ldi	r26, 0x27	; 39
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e2       	ldi	r30, 0x27	; 39
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 7e       	andi	r24, 0xE0	; 224
     fb0:	8c 93       	st	X, r24
				ADMUX |= Copy_u8Channel;
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	90 81       	ld	r25, Z
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	89 2b       	or	r24, r25
     fc0:	8c 93       	st	X, r24

		// Start the conversion by setting ADSC bit
        SET_BIT(ADCSRA, ADCSRA_ADSC);
     fc2:	a6 e2       	ldi	r26, 0x26	; 38
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e6 e2       	ldi	r30, 0x26	; 38
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 64       	ori	r24, 0x40	; 64
     fce:	8c 93       	st	X, r24
     fd0:	0b c0       	rjmp	.+22     	; 0xfe8 <ADC_u8StartConversionSynch+0x72>

		// Wait until the conversion is complete (ADIF becomes 1) or a timeout occurs
		while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32Counter != ADC_u32TIMEOUT)) {
			Local_u32Counter++;
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	ac 81       	ldd	r26, Y+4	; 0x04
     fd8:	bd 81       	ldd	r27, Y+5	; 0x05
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	a1 1d       	adc	r26, r1
     fde:	b1 1d       	adc	r27, r1
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	9b 83       	std	Y+3, r25	; 0x03
     fe4:	ac 83       	std	Y+4, r26	; 0x04
     fe6:	bd 83       	std	Y+5, r27	; 0x05

		// Start the conversion by setting ADSC bit
        SET_BIT(ADCSRA, ADCSRA_ADSC);

		// Wait until the conversion is complete (ADIF becomes 1) or a timeout occurs
		while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32Counter != ADC_u32TIMEOUT)) {
     fe8:	e6 e2       	ldi	r30, 0x26	; 38
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 95       	swap	r24
     ff0:	8f 70       	andi	r24, 0x0F	; 15
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 f4       	brne	.+24     	; 0x1016 <ADC_u8StartConversionSynch+0xa0>
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	ac 81       	ldd	r26, Y+4	; 0x04
    1004:	bd 81       	ldd	r27, Y+5	; 0x05
    1006:	80 35       	cpi	r24, 0x50	; 80
    1008:	23 ec       	ldi	r18, 0xC3	; 195
    100a:	92 07       	cpc	r25, r18
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	a2 07       	cpc	r26, r18
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	b2 07       	cpc	r27, r18
    1014:	f1 f6       	brne	.-68     	; 0xfd2 <ADC_u8StartConversionSynch+0x5c>
			Local_u32Counter++;
		}

		// Check if the timeout occurred
		if (Local_u32Counter == ADC_u32TIMEOUT) {
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	ac 81       	ldd	r26, Y+4	; 0x04
    101c:	bd 81       	ldd	r27, Y+5	; 0x05
    101e:	80 35       	cpi	r24, 0x50	; 80
    1020:	23 ec       	ldi	r18, 0xC3	; 195
    1022:	92 07       	cpc	r25, r18
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	a2 07       	cpc	r26, r18
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	b2 07       	cpc	r27, r18
    102c:	19 f4       	brne	.+6      	; 0x1034 <ADC_u8StartConversionSynch+0xbe>
			// Timeout occurred, set error state to NOK
			Local_u8ErrorState = NOK;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <ADC_u8StartConversionSynch+0xd2>
			} else {
			// Conversion completed successfully, set ADC state to BUSY
			ADC_u8BusyState = BUSY;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 ae 03 	sts	0x03AE, r24
			// Clear ADIF by writing one to it
            SET_BIT(ADCSRA, ADCSRA_ADIF);
    103a:	a6 e2       	ldi	r26, 0x26	; 38
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e6 e2       	ldi	r30, 0x26	; 38
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 61       	ori	r24, 0x10	; 16
    1046:	8c 93       	st	X, r24
		// Read the result in 8-bit mode
		*copy_puReading = ADCH;
		ADC_u8BusyState = IDLE;
		#elif (ADC_RESLETION == ADC_10BITS)
		// Read the result in 10-bit mode
		*copy_puReading = ADC;
    1048:	e4 e2       	ldi	r30, 0x24	; 36
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	ef 81       	ldd	r30, Y+7	; 0x07
    1052:	f8 85       	ldd	r31, Y+8	; 0x08
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
		ADC_u8BusyState = IDLE;
    1058:	10 92 ae 03 	sts	0x03AE, r1
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <ADC_u8StartConversionSynch+0xec>
		#endif
		} else {
		// ADC is busy, set error state to BUSY_FUNC
		Local_u8ErrorState = BUSY_FUNC;
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
}
    1064:	28 96       	adiw	r28, 0x08	; 8
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <ADC_u8StartConversionAsynch>:

 
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_Pu16Reading, void (*copy_pvNotificationFunc)(void)) {
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <ADC_u8StartConversionAsynch+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <ADC_u8StartConversionAsynch+0x8>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <ADC_u8StartConversionAsynch+0xa>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	7c 83       	std	Y+4, r23	; 0x04
    1088:	6b 83       	std	Y+3, r22	; 0x03
    108a:	5e 83       	std	Y+6, r21	; 0x06
    108c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
    108e:	19 82       	std	Y+1, r1	; 0x01
	
	
	
	// Check if the ADC is not busy
	if (ADC_u8BusyState == IDLE) {
    1090:	80 91 ae 03 	lds	r24, 0x03AE
    1094:	88 23       	and	r24, r24
    1096:	a9 f5       	brne	.+106    	; 0x1102 <ADC_u8StartConversionAsynch+0x8c>
		// Check if either the provided result pointer or notification function is NULL
		if ((Copy_Pu16Reading == NULL) || (copy_pvNotificationFunc == NULL)) {
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	21 f0       	breq	.+8      	; 0x10a8 <ADC_u8StartConversionAsynch+0x32>
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	19 f4       	brne	.+6      	; 0x10ae <ADC_u8StartConversionAsynch+0x38>
			Local_u8ErrorState = NULL_POINTER;
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	2c c0       	rjmp	.+88     	; 0x1106 <ADC_u8StartConversionAsynch+0x90>
			} else {
			ADC_u8ISRSource = SingleChannelAsync	;
    10ae:	10 92 b5 03 	sts	0x03B5, r1
			// Set the ADC state to BUSY
			ADC_u8BusyState = BUSY;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 ae 03 	sts	0x03AE, r24
			
			// Store the provided result pointer and notification function as global variables
			ADC_pu16Reading = Copy_Pu16Reading;
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	90 93 ab 03 	sts	0x03AB, r25
    10c0:	80 93 aa 03 	sts	0x03AA, r24
			ADC_pvCallBackNotificationFunc = copy_pvNotificationFunc;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	90 93 ad 03 	sts	0x03AD, r25
    10cc:	80 93 ac 03 	sts	0x03AC, r24
			
			// Clear the previous channel selection from ADMUX and set the new channel
		    ADMUX = (ADMUX & 0xF0) | (Copy_u8Channel);
    10d0:	a7 e2       	ldi	r26, 0x27	; 39
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e7 e2       	ldi	r30, 0x27	; 39
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	98 2f       	mov	r25, r24
    10dc:	90 7f       	andi	r25, 0xF0	; 240
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	89 2b       	or	r24, r25
    10e2:	8c 93       	st	X, r24

			#if (ADC_CONVERSION == SINGLE_CONVERSION)
			// Start the conversion by setting ADSC bit
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    10e4:	a6 e2       	ldi	r26, 0x26	; 38
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e6 e2       	ldi	r30, 0x26	; 38
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 64       	ori	r24, 0x40	; 64
    10f0:	8c 93       	st	X, r24
			// Enable ADC interrupt
			SET_BIT(ADCSRA, ADCSRA_ADIE);
    10f2:	a6 e2       	ldi	r26, 0x26	; 38
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e6 e2       	ldi	r30, 0x26	; 38
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 60       	ori	r24, 0x08	; 8
    10fe:	8c 93       	st	X, r24
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <ADC_u8StartConversionAsynch+0x90>
			#endif
		}
		} else {
		// ADC is busy, set error state to BUSY_FUNC
		Local_u8ErrorState = BUSY_FUNC;
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	26 96       	adiw	r28, 0x06	; 6
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <ADC_u8StartChainAsynch>:

 
u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain ){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <ADC_u8StartChainAsynch+0x6>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9b 83       	std	Y+3, r25	; 0x03
    1128:	8a 83       	std	Y+2, r24	; 0x02
	
	u8 Local_u8ErrorState = OK ; 
    112a:	19 82       	std	Y+1, r1	; 0x01
	

    if(Copy_Chain == NULL){
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	9b 81       	ldd	r25, Y+3	; 0x03
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	11 f4       	brne	.+4      	; 0x1138 <ADC_u8StartChainAsynch+0x1e>
	 
	 	Local_u8ErrorState = NULL_POINTER ;
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	89 83       	std	Y+1, r24	; 0x01
}
 	
if(ADC_u8BusyState == IDLE) {
    1138:	80 91 ae 03 	lds	r24, 0x03AE
    113c:	88 23       	and	r24, r24
    113e:	09 f0       	breq	.+2      	; 0x1142 <ADC_u8StartChainAsynch+0x28>
    1140:	51 c0       	rjmp	.+162    	; 0x11e4 <ADC_u8StartChainAsynch+0xca>
	
	ADC_u8BusyState = BUSY ; 
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	80 93 ae 03 	sts	0x03AE, r24
	
	ADC_u8ISRSource = ChainChannelAsync ; 
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 b5 03 	sts	0x03B5, r24
	
    ADC_pu8ChainChannelArr= Copy_Chain->Channel ; 
    114e:	ea 81       	ldd	r30, Y+2	; 0x02
    1150:	fb 81       	ldd	r31, Y+3	; 0x03
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	90 93 b0 03 	sts	0x03B0, r25
    115a:	80 93 af 03 	sts	0x03AF, r24
	
	ADC_u8ChainSize = Copy_Chain->Size ; 
    115e:	ea 81       	ldd	r30, Y+2	; 0x02
    1160:	fb 81       	ldd	r31, Y+3	; 0x03
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	80 93 b4 03 	sts	0x03B4, r24
	
	ADC_pu16ChainResultArr = Copy_Chain->Result;
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	90 93 b2 03 	sts	0x03B2, r25
    1174:	80 93 b1 03 	sts	0x03B1, r24
	
	ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc;
    1178:	ea 81       	ldd	r30, Y+2	; 0x02
    117a:	fb 81       	ldd	r31, Y+3	; 0x03
    117c:	85 81       	ldd	r24, Z+5	; 0x05
    117e:	96 81       	ldd	r25, Z+6	; 0x06
    1180:	90 93 ad 03 	sts	0x03AD, r25
    1184:	80 93 ac 03 	sts	0x03AC, r24
	
	ADC_u8ChainConverstionIndex =0 ; 
    1188:	10 92 b3 03 	sts	0x03B3, r1
	
	
	ADMUX &= ADC_MUX_MUSK;
    118c:	a7 e2       	ldi	r26, 0x27	; 39
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e2       	ldi	r30, 0x27	; 39
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	80 7e       	andi	r24, 0xE0	; 224
    1198:	8c 93       	st	X, r24
	ADMUX |= ADC_pu16ChainResultArr[ADC_u8ChainConverstionIndex];
    119a:	a7 e2       	ldi	r26, 0x27	; 39
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e7 e2       	ldi	r30, 0x27	; 39
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	40 81       	ld	r20, Z
    11a4:	20 91 b1 03 	lds	r18, 0x03B1
    11a8:	30 91 b2 03 	lds	r19, 0x03B2
    11ac:	80 91 b3 03 	lds	r24, 0x03B3
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	f9 01       	movw	r30, r18
    11ba:	e8 0f       	add	r30, r24
    11bc:	f9 1f       	adc	r31, r25
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
	
	SET_BIT(ADCSRA,ADCSRA_ADSC) ; 
    11c6:	a6 e2       	ldi	r26, 0x26	; 38
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e6 e2       	ldi	r30, 0x26	; 38
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 64       	ori	r24, 0x40	; 64
    11d2:	8c 93       	st	X, r24
	 
	SET_BIT(ADCSRA,ADCSRA_ADIE) ;
    11d4:	a6 e2       	ldi	r26, 0x26	; 38
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e6 e2       	ldi	r30, 0x26	; 38
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 60       	ori	r24, 0x08	; 8
    11e0:	8c 93       	st	X, r24
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <ADC_u8StartChainAsynch+0xce>
}
	
else {
	
		 	Local_u8ErrorState = BUSY_FUNC ;
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	89 83       	std	Y+1, r24	; 0x01
	  }	
	
	return Local_u8ErrorState ; 
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <__vector_16>:



 void __vector_16(void)  __attribute__((signal));
 void __vector_16(void)
 {
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	 
if(ADC_u8ISRSource == SingleChannelAsync){
    1220:	80 91 b5 03 	lds	r24, 0x03B5
    1224:	88 23       	and	r24, r24
    1226:	01 f5       	brne	.+64     	; 0x1268 <__vector_16+0x72>
	 		// Read the result in 8-bit mode
	 		*ADC_pu16Reading = ADCH;
	 		ADC_u8BusyState = IDLE;
	 		#elif (ADC_RESLETION == ADC_10BITS)
	 		// Read the result in 10-bit mode
	 		*ADC_pu16Reading = ADC;
    1228:	a0 91 aa 03 	lds	r26, 0x03AA
    122c:	b0 91 ab 03 	lds	r27, 0x03AB
    1230:	e4 e2       	ldi	r30, 0x24	; 36
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	9c 93       	st	X, r25
    123c:	8e 93       	st	-X, r24
	 		ADC_u8BusyState = IDLE;
    123e:	10 92 ae 03 	sts	0x03AE, r1
	 		#endif
		 if (ADC_pvCallBackNotificationFunc != NULL) {
    1242:	80 91 ac 03 	lds	r24, 0x03AC
    1246:	90 91 ad 03 	lds	r25, 0x03AD
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	29 f0       	breq	.+10     	; 0x1258 <__vector_16+0x62>
			 ADC_pvCallBackNotificationFunc();
    124e:	e0 91 ac 03 	lds	r30, 0x03AC
    1252:	f0 91 ad 03 	lds	r31, 0x03AD
    1256:	09 95       	icall
		 }
		 
		 /* Disable ADC Conversation Interrupt */ 
		 CLR_BIT(ADCSRA,ADCSRA_ADIE); 
    1258:	a6 e2       	ldi	r26, 0x26	; 38
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e6 e2       	ldi	r30, 0x26	; 38
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	87 7f       	andi	r24, 0xF7	; 247
    1264:	8c 93       	st	X, r24
    1266:	57 c0       	rjmp	.+174    	; 0x1316 <__vector_16+0x120>

 }
 
else if (ADC_u8ISRSource == ChainChannelAsync) 
    1268:	80 91 b5 03 	lds	r24, 0x03B5
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	09 f0       	breq	.+2      	; 0x1272 <__vector_16+0x7c>
    1270:	52 c0       	rjmp	.+164    	; 0x1316 <__vector_16+0x120>
	 /* read the current conversation */ 
	 #if (ADC_RESLETION == ADC_8BITS)
	 ADC_pu16ChainResultArr[ADC_u8ChainConverstionIndex] = ADCH ; 
	 #elif (ADC_RESLETION == ADC_10BITS)
	 // Read the result in 10-bit mode
	 ADC_pu16ChainResultArr[ADC_u8ChainConverstionIndex] = ADC;
    1272:	20 91 b1 03 	lds	r18, 0x03B1
    1276:	30 91 b2 03 	lds	r19, 0x03B2
    127a:	80 91 b3 03 	lds	r24, 0x03B3
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	d9 01       	movw	r26, r18
    1288:	a8 0f       	add	r26, r24
    128a:	b9 1f       	adc	r27, r25
    128c:	e4 e2       	ldi	r30, 0x24	; 36
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	9c 93       	st	X, r25
    1298:	8e 93       	st	-X, r24
	 
	 #endif
	 /* increment index */ 
	 
	 ADC_u8ChainConverstionIndex++ ; 
    129a:	80 91 b3 03 	lds	r24, 0x03B3
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	80 93 b3 03 	sts	0x03B3, r24
	 
	 /*check finish or not */ 
	 
	 if(ADC_u8ChainConverstionIndex == ADC_u8ChainSize)
    12a4:	90 91 b3 03 	lds	r25, 0x03B3
    12a8:	80 91 b4 03 	lds	r24, 0x03B4
    12ac:	98 17       	cp	r25, r24
    12ae:	79 f4       	brne	.+30     	; 0x12ce <__vector_16+0xd8>
	 {
		 	ADC_u8BusyState = IDLE;
    12b0:	10 92 ae 03 	sts	0x03AE, r1
			
			/*Notification function */ 
			
			ADC_pvCallBackNotificationFunc() ;
    12b4:	e0 91 ac 03 	lds	r30, 0x03AC
    12b8:	f0 91 ad 03 	lds	r31, 0x03AD
    12bc:	09 95       	icall
		 
		 /* disable interrupt */ 
		  CLR_BIT(ADCSRA , ADCSRA_ADIE)	; 
    12be:	a6 e2       	ldi	r26, 0x26	; 38
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e6 e2       	ldi	r30, 0x26	; 38
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	8c 93       	st	X, r24
    12cc:	24 c0       	rjmp	.+72     	; 0x1316 <__vector_16+0x120>
		 /* not finished */ 
		 
		 /* set new channal */ 
		 
		 
		 ADMUX &= ADC_MUX_MUSK;
    12ce:	a7 e2       	ldi	r26, 0x27	; 39
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e2       	ldi	r30, 0x27	; 39
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 7e       	andi	r24, 0xE0	; 224
    12da:	8c 93       	st	X, r24
		 ADMUX |= ADC_pu16ChainResultArr[ADC_u8ChainConverstionIndex];
    12dc:	a7 e2       	ldi	r26, 0x27	; 39
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e2       	ldi	r30, 0x27	; 39
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	40 81       	ld	r20, Z
    12e6:	20 91 b1 03 	lds	r18, 0x03B1
    12ea:	30 91 b2 03 	lds	r19, 0x03B2
    12ee:	80 91 b3 03 	lds	r24, 0x03B3
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	f9 01       	movw	r30, r18
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	80 81       	ld	r24, Z
    1302:	91 81       	ldd	r25, Z+1	; 0x01
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
		 
		 /* start new conversation */ 
		 
		 	SET_BIT(ADCSRA,ADCSRA_ADSC) ;
    1308:	a6 e2       	ldi	r26, 0x26	; 38
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e6 e2       	ldi	r30, 0x26	; 38
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 64       	ori	r24, 0x40	; 64
    1314:	8c 93       	st	X, r24

	 }
}

 }
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <CLCD_voidSendCommand>:
#include "DIO_interface.h"
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_privite.h"

void CLCD_voidSendCommand(u8 Copy_u8Command){
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	6d 97       	sbiw	r28, 0x1d	; 29
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
	
}
#elif   CLCD_MODE==CLCD_FOUR_BIT_ModE
{
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW) ;
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW) ;
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN1 , GET_BIT(Copy_u8Command,4)) ;
    1366:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1368:	82 95       	swap	r24
    136a:	8f 70       	andi	r24, 0x0F	; 15
    136c:	98 2f       	mov	r25, r24
    136e:	91 70       	andi	r25, 0x01	; 1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	63 e0       	ldi	r22, 0x03	; 3
    1374:	49 2f       	mov	r20, r25
    1376:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN2 , GET_BIT(Copy_u8Command,5)) ;
    137a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    137c:	82 95       	swap	r24
    137e:	86 95       	lsr	r24
    1380:	87 70       	andi	r24, 0x07	; 7
    1382:	98 2f       	mov	r25, r24
    1384:	91 70       	andi	r25, 0x01	; 1
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	64 e0       	ldi	r22, 0x04	; 4
    138a:	49 2f       	mov	r20, r25
    138c:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN3 , GET_BIT(Copy_u8Command,6)) ;
    1390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1392:	82 95       	swap	r24
    1394:	86 95       	lsr	r24
    1396:	86 95       	lsr	r24
    1398:	83 70       	andi	r24, 0x03	; 3
    139a:	98 2f       	mov	r25, r24
    139c:	91 70       	andi	r25, 0x01	; 1
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	65 e0       	ldi	r22, 0x05	; 5
    13a2:	49 2f       	mov	r20, r25
    13a4:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN4 , GET_BIT(Copy_u8Command,7)) ;
    13a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13aa:	98 2f       	mov	r25, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	99 27       	eor	r25, r25
    13b0:	99 1f       	adc	r25, r25
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	66 e0       	ldi	r22, 0x06	; 6
    13b6:	49 2f       	mov	r20, r25
    13b8:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH) ;
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e4       	ldi	r26, 0x40	; 64
    13cc:	b0 e4       	ldi	r27, 0x40	; 64
    13ce:	89 8f       	std	Y+25, r24	; 0x19
    13d0:	9a 8f       	std	Y+26, r25	; 0x1a
    13d2:	ab 8f       	std	Y+27, r26	; 0x1b
    13d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	69 8d       	ldd	r22, Y+25	; 0x19
    13d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a ef       	ldi	r20, 0xFA	; 250
    13e4:	54 e4       	ldi	r21, 0x44	; 68
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8d 8b       	std	Y+21, r24	; 0x15
    13f0:	9e 8b       	std	Y+22, r25	; 0x16
    13f2:	af 8b       	std	Y+23, r26	; 0x17
    13f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f6:	6d 89       	ldd	r22, Y+21	; 0x15
    13f8:	7e 89       	ldd	r23, Y+22	; 0x16
    13fa:	8f 89       	ldd	r24, Y+23	; 0x17
    13fc:	98 8d       	ldd	r25, Y+24	; 0x18
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 8b       	std	Y+20, r25	; 0x14
    1414:	8b 8b       	std	Y+19, r24	; 0x13
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
    1418:	6d 89       	ldd	r22, Y+21	; 0x15
    141a:	7e 89       	ldd	r23, Y+22	; 0x16
    141c:	8f 89       	ldd	r24, Y+23	; 0x17
    141e:	98 8d       	ldd	r25, Y+24	; 0x18
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	69 8d       	ldd	r22, Y+25	; 0x19
    1432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9c 8b       	std	Y+20, r25	; 0x14
    1456:	8b 8b       	std	Y+19, r24	; 0x13
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <CLCD_voidSendCommand+0x13c>
    145a:	88 ec       	ldi	r24, 0xC8	; 200
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9a 8b       	std	Y+18, r25	; 0x12
    1460:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1462:	89 89       	ldd	r24, Y+17	; 0x11
    1464:	9a 89       	ldd	r25, Y+18	; 0x12
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <CLCD_voidSendCommand+0x12a>
    146a:	9a 8b       	std	Y+18, r25	; 0x12
    146c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8b 89       	ldd	r24, Y+19	; 0x13
    1470:	9c 89       	ldd	r25, Y+20	; 0x14
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9c 8b       	std	Y+20, r25	; 0x14
    1476:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8b 89       	ldd	r24, Y+19	; 0x13
    147a:	9c 89       	ldd	r25, Y+20	; 0x14
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <CLCD_voidSendCommand+0x11e>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6d 89       	ldd	r22, Y+21	; 0x15
    1484:	7e 89       	ldd	r23, Y+22	; 0x16
    1486:	8f 89       	ldd	r24, Y+23	; 0x17
    1488:	98 8d       	ldd	r25, Y+24	; 0x18
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	98 8b       	std	Y+16, r25	; 0x10
    149c:	8f 87       	std	Y+15, r24	; 0x0f
    149e:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a0:	98 89       	ldd	r25, Y+16	; 0x10
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <CLCD_voidSendCommand+0x166>
    14a6:	98 8b       	std	Y+16, r25	; 0x10
    14a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	62 e0       	ldi	r22, 0x02	; 2
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	
	
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN1 , GET_BIT(Copy_u8Command,0)) ;
    14b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b6:	98 2f       	mov	r25, r24
    14b8:	91 70       	andi	r25, 0x01	; 1
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	49 2f       	mov	r20, r25
    14c0:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN2 , GET_BIT(Copy_u8Command,1)) ;
    14c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c6:	86 95       	lsr	r24
    14c8:	98 2f       	mov	r25, r24
    14ca:	91 70       	andi	r25, 0x01	; 1
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	64 e0       	ldi	r22, 0x04	; 4
    14d0:	49 2f       	mov	r20, r25
    14d2:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN3 , GET_BIT(Copy_u8Command,2)) ;
    14d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	98 2f       	mov	r25, r24
    14de:	91 70       	andi	r25, 0x01	; 1
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	65 e0       	ldi	r22, 0x05	; 5
    14e4:	49 2f       	mov	r20, r25
    14e6:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN4 , GET_BIT(Copy_u8Command,3)) ;
    14ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ec:	86 95       	lsr	r24
    14ee:	86 95       	lsr	r24
    14f0:	86 95       	lsr	r24
    14f2:	98 2f       	mov	r25, r24
    14f4:	91 70       	andi	r25, 0x01	; 1
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	66 e0       	ldi	r22, 0x06	; 6
    14fa:	49 2f       	mov	r20, r25
    14fc:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH) ;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	62 e0       	ldi	r22, 0x02	; 2
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e4       	ldi	r26, 0x40	; 64
    1510:	b0 e4       	ldi	r27, 0x40	; 64
    1512:	8b 87       	std	Y+11, r24	; 0x0b
    1514:	9c 87       	std	Y+12, r25	; 0x0c
    1516:	ad 87       	std	Y+13, r26	; 0x0d
    1518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a ef       	ldi	r20, 0xFA	; 250
    1528:	54 e4       	ldi	r21, 0x44	; 68
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8f 83       	std	Y+7, r24	; 0x07
    1534:	98 87       	std	Y+8, r25	; 0x08
    1536:	a9 87       	std	Y+9, r26	; 0x09
    1538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	2c f4       	brge	.+10     	; 0x155c <CLCD_voidSendCommand+0x220>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	3f c0       	rjmp	.+126    	; 0x15da <CLCD_voidSendCommand+0x29e>
	else if (__tmp > 65535)
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	4c f5       	brge	.+82     	; 0x15c6 <CLCD_voidSendCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1574:	6b 85       	ldd	r22, Y+11	; 0x0b
    1576:	7c 85       	ldd	r23, Y+12	; 0x0c
    1578:	8d 85       	ldd	r24, Y+13	; 0x0d
    157a:	9e 85       	ldd	r25, Y+14	; 0x0e
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <CLCD_voidSendCommand+0x280>
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <CLCD_voidSendCommand+0x26e>
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	69 f7       	brne	.-38     	; 0x159e <CLCD_voidSendCommand+0x262>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <CLCD_voidSendCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <CLCD_voidSendCommand+0x2aa>
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
	
}
#endif

}
    15f8:	6d 96       	adiw	r28, 0x1d	; 29
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <CLCD_voidSendData>:




void CLCD_voidSendData(u8 Copy_u8Data){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	6d 97       	sbiw	r28, 0x1d	; 29
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
		
	}
	#elif   CLCD_MODE==CLCD_FOUR_BIT_ModE
	{
		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH) ;
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW) ;
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		
		
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN1 , GET_BIT(Copy_u8Data,4)) ;
    1634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1636:	82 95       	swap	r24
    1638:	8f 70       	andi	r24, 0x0F	; 15
    163a:	98 2f       	mov	r25, r24
    163c:	91 70       	andi	r25, 0x01	; 1
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	63 e0       	ldi	r22, 0x03	; 3
    1642:	49 2f       	mov	r20, r25
    1644:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN2 , GET_BIT(Copy_u8Data,5)) ;
    1648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164a:	82 95       	swap	r24
    164c:	86 95       	lsr	r24
    164e:	87 70       	andi	r24, 0x07	; 7
    1650:	98 2f       	mov	r25, r24
    1652:	91 70       	andi	r25, 0x01	; 1
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	64 e0       	ldi	r22, 0x04	; 4
    1658:	49 2f       	mov	r20, r25
    165a:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN3 , GET_BIT(Copy_u8Data,6)) ;
    165e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1660:	82 95       	swap	r24
    1662:	86 95       	lsr	r24
    1664:	86 95       	lsr	r24
    1666:	83 70       	andi	r24, 0x03	; 3
    1668:	98 2f       	mov	r25, r24
    166a:	91 70       	andi	r25, 0x01	; 1
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	65 e0       	ldi	r22, 0x05	; 5
    1670:	49 2f       	mov	r20, r25
    1672:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN4 , GET_BIT(Copy_u8Data,7)) ;
    1676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1678:	98 2f       	mov	r25, r24
    167a:	99 1f       	adc	r25, r25
    167c:	99 27       	eor	r25, r25
    167e:	99 1f       	adc	r25, r25
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	66 e0       	ldi	r22, 0x06	; 6
    1684:	49 2f       	mov	r20, r25
    1686:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH) ;
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 e4       	ldi	r26, 0x40	; 64
    169a:	b0 e4       	ldi	r27, 0x40	; 64
    169c:	89 8f       	std	Y+25, r24	; 0x19
    169e:	9a 8f       	std	Y+26, r25	; 0x1a
    16a0:	ab 8f       	std	Y+27, r26	; 0x1b
    16a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	69 8d       	ldd	r22, Y+25	; 0x19
    16a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8d 8b       	std	Y+21, r24	; 0x15
    16be:	9e 8b       	std	Y+22, r25	; 0x16
    16c0:	af 8b       	std	Y+23, r26	; 0x17
    16c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <CLCD_voidSendData+0xdc>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9c 8b       	std	Y+20, r25	; 0x14
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <CLCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    16e6:	6d 89       	ldd	r22, Y+21	; 0x15
    16e8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ea:	8f 89       	ldd	r24, Y+23	; 0x17
    16ec:	98 8d       	ldd	r25, Y+24	; 0x18
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <CLCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9c 8b       	std	Y+20, r25	; 0x14
    1724:	8b 8b       	std	Y+19, r24	; 0x13
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <CLCD_voidSendData+0x13c>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9a 8b       	std	Y+18, r25	; 0x12
    172e:	89 8b       	std	Y+17, r24	; 0x11
    1730:	89 89       	ldd	r24, Y+17	; 0x11
    1732:	9a 89       	ldd	r25, Y+18	; 0x12
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <CLCD_voidSendData+0x12a>
    1738:	9a 8b       	std	Y+18, r25	; 0x12
    173a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8b 89       	ldd	r24, Y+19	; 0x13
    173e:	9c 89       	ldd	r25, Y+20	; 0x14
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <CLCD_voidSendData+0x11e>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <CLCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6d 89       	ldd	r22, Y+21	; 0x15
    1752:	7e 89       	ldd	r23, Y+22	; 0x16
    1754:	8f 89       	ldd	r24, Y+23	; 0x17
    1756:	98 8d       	ldd	r25, Y+24	; 0x18
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	8b 89       	ldd	r24, Y+19	; 0x13
    1766:	9c 89       	ldd	r25, Y+20	; 0x14
    1768:	98 8b       	std	Y+16, r25	; 0x10
    176a:	8f 87       	std	Y+15, r24	; 0x0f
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	98 89       	ldd	r25, Y+16	; 0x10
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <CLCD_voidSendData+0x166>
    1774:	98 8b       	std	Y+16, r25	; 0x10
    1776:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3);
		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	62 e0       	ldi	r22, 0x02	; 2
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		
		
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN1 , GET_BIT(Copy_u8Data,0)) ;
    1782:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1784:	98 2f       	mov	r25, r24
    1786:	91 70       	andi	r25, 0x01	; 1
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	63 e0       	ldi	r22, 0x03	; 3
    178c:	49 2f       	mov	r20, r25
    178e:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN2 , GET_BIT(Copy_u8Data,1)) ;
    1792:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1794:	86 95       	lsr	r24
    1796:	98 2f       	mov	r25, r24
    1798:	91 70       	andi	r25, 0x01	; 1
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	64 e0       	ldi	r22, 0x04	; 4
    179e:	49 2f       	mov	r20, r25
    17a0:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN3 , GET_BIT(Copy_u8Data,2)) ;
    17a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a6:	86 95       	lsr	r24
    17a8:	86 95       	lsr	r24
    17aa:	98 2f       	mov	r25, r24
    17ac:	91 70       	andi	r25, 0x01	; 1
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	65 e0       	ldi	r22, 0x05	; 5
    17b2:	49 2f       	mov	r20, r25
    17b4:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN4 , GET_BIT(Copy_u8Data,3)) ;
    17b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ba:	86 95       	lsr	r24
    17bc:	86 95       	lsr	r24
    17be:	86 95       	lsr	r24
    17c0:	98 2f       	mov	r25, r24
    17c2:	91 70       	andi	r25, 0x01	; 1
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	66 e0       	ldi	r22, 0x06	; 6
    17c8:	49 2f       	mov	r20, r25
    17ca:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH) ;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e4       	ldi	r26, 0x40	; 64
    17de:	b0 e4       	ldi	r27, 0x40	; 64
    17e0:	8b 87       	std	Y+11, r24	; 0x0b
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	ad 87       	std	Y+13, r26	; 0x0d
    17e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8f 83       	std	Y+7, r24	; 0x07
    1802:	98 87       	std	Y+8, r25	; 0x08
    1804:	a9 87       	std	Y+9, r26	; 0x09
    1806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1808:	6f 81       	ldd	r22, Y+7	; 0x07
    180a:	78 85       	ldd	r23, Y+8	; 0x08
    180c:	89 85       	ldd	r24, Y+9	; 0x09
    180e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <CLCD_voidSendData+0x220>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <CLCD_voidSendData+0x29e>
	else if (__tmp > 65535)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <CLCD_voidSendData+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	0f c0       	rjmp	.+30     	; 0x188a <CLCD_voidSendData+0x280>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <CLCD_voidSendData+0x26e>
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <CLCD_voidSendData+0x262>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <CLCD_voidSendData+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <CLCD_voidSendData+0x2aa>
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
		DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		
	}
#endif

}
    18c6:	6d 96       	adiw	r28, 0x1d	; 29
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <CLCD_voidInit>:



void CLCD_voidInit(void){
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	6c 97       	sbiw	r28, 0x1c	; 28
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e2       	ldi	r26, 0x20	; 32
    18f2:	b2 e4       	ldi	r27, 0x42	; 66
    18f4:	89 8f       	std	Y+25, r24	; 0x19
    18f6:	9a 8f       	std	Y+26, r25	; 0x1a
    18f8:	ab 8f       	std	Y+27, r26	; 0x1b
    18fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	69 8d       	ldd	r22, Y+25	; 0x19
    18fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1900:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1902:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a ef       	ldi	r20, 0xFA	; 250
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8d 8b       	std	Y+21, r24	; 0x15
    1916:	9e 8b       	std	Y+22, r25	; 0x16
    1918:	af 8b       	std	Y+23, r26	; 0x17
    191a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <CLCD_voidInit+0x66>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9c 8b       	std	Y+20, r25	; 0x14
    193a:	8b 8b       	std	Y+19, r24	; 0x13
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    193e:	6d 89       	ldd	r22, Y+21	; 0x15
    1940:	7e 89       	ldd	r23, Y+22	; 0x16
    1942:	8f 89       	ldd	r24, Y+23	; 0x17
    1944:	98 8d       	ldd	r25, Y+24	; 0x18
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	69 8d       	ldd	r22, Y+25	; 0x19
    1958:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
    197e:	0f c0       	rjmp	.+30     	; 0x199e <CLCD_voidInit+0xc6>
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9a 8b       	std	Y+18, r25	; 0x12
    1986:	89 8b       	std	Y+17, r24	; 0x11
    1988:	89 89       	ldd	r24, Y+17	; 0x11
    198a:	9a 89       	ldd	r25, Y+18	; 0x12
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <CLCD_voidInit+0xb4>
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8b 89       	ldd	r24, Y+19	; 0x13
    1996:	9c 89       	ldd	r25, Y+20	; 0x14
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	69 f7       	brne	.-38     	; 0x1980 <CLCD_voidInit+0xa8>
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	6d 89       	ldd	r22, Y+21	; 0x15
    19aa:	7e 89       	ldd	r23, Y+22	; 0x16
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9c 8b       	std	Y+20, r25	; 0x14
    19ba:	8b 8b       	std	Y+19, r24	; 0x13
    19bc:	8b 89       	ldd	r24, Y+19	; 0x13
    19be:	9c 89       	ldd	r25, Y+20	; 0x14
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	8f 87       	std	Y+15, r24	; 0x0f
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	98 89       	ldd	r25, Y+16	; 0x10
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <CLCD_voidInit+0xf0>
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
#elif CLCD_MODE==CLCD_FOUR_BIT_ModE 
{
	
_delay_ms(40);

DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN1 ,0 ) ;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	63 e0       	ldi	r22, 0x03	; 3
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN2 ,1 ) ;
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	64 e0       	ldi	r22, 0x04	; 4
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN3 , 0) ;
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_DATA_PORT , CLCD_DATA_PIN4 , 0) ;
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	66 e0       	ldi	r22, 0x06	; 6
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH) ;
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	62 e0       	ldi	r22, 0x02	; 2
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e4       	ldi	r26, 0x40	; 64
    1a08:	b0 e4       	ldi	r27, 0x40	; 64
    1a0a:	8b 87       	std	Y+11, r24	; 0x0b
    1a0c:	9c 87       	std	Y+12, r25	; 0x0c
    1a0e:	ad 87       	std	Y+13, r26	; 0x0d
    1a10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a ef       	ldi	r20, 0xFA	; 250
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	8f 83       	std	Y+7, r24	; 0x07
    1a2c:	98 87       	std	Y+8, r25	; 0x08
    1a2e:	a9 87       	std	Y+9, r26	; 0x09
    1a30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <CLCD_voidInit+0x17c>
		__ticks = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	3f c0       	rjmp	.+126    	; 0x1ad2 <CLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	4c f5       	brge	.+82     	; 0x1abe <CLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <CLCD_voidInit+0x1dc>
    1a96:	88 ec       	ldi	r24, 0xC8	; 200
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <CLCD_voidInit+0x1ca>
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <CLCD_voidInit+0x1be>
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <CLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <CLCD_voidInit+0x206>
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW) ;
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>

CLCD_voidSendCommand(0x28); /*two line font 5*8   function set */
    1af0:	88 e2       	ldi	r24, 0x28	; 40
    1af2:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
CLCD_voidSendCommand(0x0c);	/* Display On / off control  Display enable Cursor and Blink Cursor are disable */
    1af6:	8c e0       	ldi	r24, 0x0C	; 12
    1af8:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
CLCD_voidSendCommand(0x01);    /* Display Clear */
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>

}
	
#endif
	
}
    1b02:	6c 96       	adiw	r28, 0x1c	; 28
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <CLCD_voidSendString>:



void CLCD_voidSendString( const char *Copy_pcString)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	61 97       	sbiw	r28, 0x11	; 17
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	99 8b       	std	Y+17, r25	; 0x11
    1b2a:	88 8b       	std	Y+16, r24	; 0x10
u8 Local_u8Counter =0 ; 
    1b2c:	1f 86       	std	Y+15, r1	; 0x0f
    1b2e:	80 c0       	rjmp	.+256    	; 0x1c30 <CLCD_voidSendString+0x11c>

while (Copy_pcString[Local_u8Counter]!= '\0' ) {
	
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]) ; 
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	88 89       	ldd	r24, Y+16	; 0x10
    1b38:	99 89       	ldd	r25, Y+17	; 0x11
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
	Local_u8Counter++ ; 
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	8f 87       	std	Y+15, r24	; 0x0f
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	8b 87       	std	Y+11, r24	; 0x0b
    1b56:	9c 87       	std	Y+12, r25	; 0x0c
    1b58:	ad 87       	std	Y+13, r26	; 0x0d
    1b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8f 83       	std	Y+7, r24	; 0x07
    1b76:	98 87       	std	Y+8, r25	; 0x08
    1b78:	a9 87       	std	Y+9, r26	; 0x09
    1b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <CLCD_voidSendString+0x8a>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <CLCD_voidSendString+0x108>
	else if (__tmp > 65535)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <CLCD_voidSendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <CLCD_voidSendString+0xea>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <CLCD_voidSendString+0xd8>
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <CLCD_voidSendString+0xcc>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <CLCD_voidSendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <CLCD_voidSendString+0x114>
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString( const char *Copy_pcString)
{
u8 Local_u8Counter =0 ; 

while (Copy_pcString[Local_u8Counter]!= '\0' ) {
    1c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	88 89       	ldd	r24, Y+16	; 0x10
    1c38:	99 89       	ldd	r25, Y+17	; 0x11
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <CLCD_voidSendString+0x134>
    1c46:	74 cf       	rjmp	.-280    	; 0x1b30 <CLCD_voidSendString+0x1c>
    _delay_ms(1);

}
	
	 
}
    1c48:	61 96       	adiw	r28, 0x11	; 17
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <CLCD_voidGotoXY>:




void CLCD_voidGotoXY(u8 Copy_u8XPos , u8 Copy_u8YPos){
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <CLCD_voidGotoXY+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	8a 83       	std	Y+2, r24	; 0x02
    1c68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress =0 ;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
	/* frist line */ 
	if(Copy_u8XPos == 0){
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	88 23       	and	r24, r24
    1c70:	19 f4       	brne	.+6      	; 0x1c78 <CLCD_voidGotoXY+0x1e>
	Local_u8Adress = Copy_u8YPos ; 
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	0d c0       	rjmp	.+26     	; 0x1c92 <CLCD_voidGotoXY+0x38>
	}
	/*second line */ 

	else if (Copy_u8XPos == 1) {
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <CLCD_voidGotoXY+0x2c>
			Local_u8Adress = Copy_u8YPos+40 ;
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	88 5d       	subi	r24, 0xD8	; 216
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <CLCD_voidGotoXY+0x38>

	}
	else if (Copy_u8XPos == 2) {
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <CLCD_voidGotoXY+0x38>
			Local_u8Adress = Copy_u8YPos+80 ;
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	80 5b       	subi	r24, 0xB0	; 176
    1c90:	89 83       	std	Y+1, r24	; 0x01

	}
	
	CLCD_voidSendCommand(Local_u8Adress + 128 ) ; 
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	80 58       	subi	r24, 0x80	; 128
    1c96:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <CLCD_voidWriteSpecialCharacter>:


void CLCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern , u8 PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos ) {
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	27 97       	sbiw	r28, 0x07	; 7
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    1cbe:	6d 83       	std	Y+5, r22	; 0x05
    1cc0:	4e 83       	std	Y+6, r20	; 0x06
    1cc2:	2f 83       	std	Y+7, r18	; 0x07
	
	u8 Local_u8CGRAMAdress=0  , Local_u8Iterator; 
    1cc4:	1a 82       	std	Y+2, r1	; 0x02
	
	Local_u8CGRAMAdress = PatternNumber * 8 ; 
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
	
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64 ) ; 
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	80 5c       	subi	r24, 0xC0	; 192
    1cde:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
	/* write pattern in CGRAM */ 
	for (Local_u8Iterator =0 ; Local_u8Iterator < 8 ; Local_u8Iterator++ ){
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <CLCD_voidWriteSpecialCharacter+0x5c>
		
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]) ; 
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	e2 0f       	add	r30, r18
    1cf4:	f3 1f       	adc	r31, r19
    1cf6:	80 81       	ld	r24, Z
    1cf8:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
	
	Local_u8CGRAMAdress = PatternNumber * 8 ; 
	
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64 ) ; 
	/* write pattern in CGRAM */ 
	for (Local_u8Iterator =0 ; Local_u8Iterator < 8 ; Local_u8Iterator++ ){
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	88 30       	cpi	r24, 0x08	; 8
    1d06:	78 f3       	brcs	.-34     	; 0x1ce6 <CLCD_voidWriteSpecialCharacter+0x40>
		
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]) ; 
		
	}
	/* send to DDRAM */ 
	CLCD_voidGotoXY(Copy_u8XPos , Copy_u8YPos) ; 
    1d08:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>
	
	CLCD_voidSendData(PatternNumber) ; 
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
	
}
    1d16:	27 96       	adiw	r28, 0x07	; 7
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <CLCD_voidWriteNumber>:




void CLCD_voidWriteNumber(s32 Copy_s32Number){
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	2d 97       	sbiw	r28, 0x0d	; 13
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	6a 87       	std	Y+10, r22	; 0x0a
    1d3e:	7b 87       	std	Y+11, r23	; 0x0b
    1d40:	8c 87       	std	Y+12, r24	; 0x0c
    1d42:	9d 87       	std	Y+13, r25	; 0x0d
		Copy_s32Number = -2147483648;
	}


	// Handle negative numbers
	if (Copy_s32Number < 0) {
    1d44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d48:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d4a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d4c:	bb 23       	and	r27, r27
    1d4e:	9c f4       	brge	.+38     	; 0x1d76 <CLCD_voidWriteNumber+0x4e>
		CLCD_voidSendData('-');
    1d50:	8d e2       	ldi	r24, 0x2D	; 45
    1d52:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
		Copy_s32Number = -Copy_s32Number;
    1d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d5a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d5c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d5e:	b0 95       	com	r27
    1d60:	a0 95       	com	r26
    1d62:	90 95       	com	r25
    1d64:	81 95       	neg	r24
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	af 4f       	sbci	r26, 0xFF	; 255
    1d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6c:	8a 87       	std	Y+10, r24	; 0x0a
    1d6e:	9b 87       	std	Y+11, r25	; 0x0b
    1d70:	ac 87       	std	Y+12, r26	; 0x0c
    1d72:	bd 87       	std	Y+13, r27	; 0x0d
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <CLCD_voidWriteNumber+0x54>
		} else {
		CLCD_voidSendData(' ');
    1d76:	80 e2       	ldi	r24, 0x20	; 32
    1d78:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
	}

	// Flag to indicate if the first non-zero digit has been found
	u8 nonZeroFound = 0;
    1d7c:	19 86       	std	Y+9, r1	; 0x09

	// Loop through each digit's place value
	for (s32 digitPlace = 1000000000; digitPlace > 0; digitPlace /= 10) {
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	9a ec       	ldi	r25, 0xCA	; 202
    1d82:	aa e9       	ldi	r26, 0x9A	; 154
    1d84:	bb e3       	ldi	r27, 0x3B	; 59
    1d86:	8d 83       	std	Y+5, r24	; 0x05
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	af 83       	std	Y+7, r26	; 0x07
    1d8c:	b8 87       	std	Y+8, r27	; 0x08
    1d8e:	4c c0       	rjmp	.+152    	; 0x1e28 <CLCD_voidWriteNumber+0x100>
		s32 digit = (Copy_s32Number / digitPlace) % 10;
    1d90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d94:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d96:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d98:	2d 81       	ldd	r18, Y+5	; 0x05
    1d9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d9c:	4f 81       	ldd	r20, Y+7	; 0x07
    1d9e:	58 85       	ldd	r21, Y+8	; 0x08
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__divmodsi4>
    1da8:	da 01       	movw	r26, r20
    1daa:	c9 01       	movw	r24, r18
    1dac:	2a e0       	ldi	r18, 0x0A	; 10
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__divmodsi4>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	ab 83       	std	Y+3, r26	; 0x03
    1dc6:	bc 83       	std	Y+4, r27	; 0x04

		if (digit != 0 || nonZeroFound) {
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	ab 81       	ldd	r26, Y+3	; 0x03
    1dce:	bc 81       	ldd	r27, Y+4	; 0x04
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	a1 05       	cpc	r26, r1
    1dd4:	b1 05       	cpc	r27, r1
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <CLCD_voidWriteNumber+0xb6>
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	88 23       	and	r24, r24
    1ddc:	39 f0       	breq	.+14     	; 0x1dec <CLCD_voidWriteNumber+0xc4>
			CLCD_voidSendData('0' + digit);
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	80 5d       	subi	r24, 0xD0	; 208
    1de2:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
			nonZeroFound = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	89 87       	std	Y+9, r24	; 0x09
    1dea:	0c c0       	rjmp	.+24     	; 0x1e04 <CLCD_voidWriteNumber+0xdc>
			} else if (digitPlace == 1) {
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	af 81       	ldd	r26, Y+7	; 0x07
    1df2:	b8 85       	ldd	r27, Y+8	; 0x08
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	a1 05       	cpc	r26, r1
    1dfa:	b1 05       	cpc	r27, r1
    1dfc:	19 f4       	brne	.+6      	; 0x1e04 <CLCD_voidWriteNumber+0xdc>
			// Display at least the least significant digit if it's zero
			CLCD_voidSendData('0');
    1dfe:	80 e3       	ldi	r24, 0x30	; 48
    1e00:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>

	// Flag to indicate if the first non-zero digit has been found
	u8 nonZeroFound = 0;

	// Loop through each digit's place value
	for (s32 digitPlace = 1000000000; digitPlace > 0; digitPlace /= 10) {
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	af 81       	ldd	r26, Y+7	; 0x07
    1e0a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e0c:	2a e0       	ldi	r18, 0x0A	; 10
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__divmodsi4>
    1e1c:	da 01       	movw	r26, r20
    1e1e:	c9 01       	movw	r24, r18
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	af 83       	std	Y+7, r26	; 0x07
    1e26:	b8 87       	std	Y+8, r27	; 0x08
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	af 81       	ldd	r26, Y+7	; 0x07
    1e2e:	b8 85       	ldd	r27, Y+8	; 0x08
    1e30:	18 16       	cp	r1, r24
    1e32:	19 06       	cpc	r1, r25
    1e34:	1a 06       	cpc	r1, r26
    1e36:	1b 06       	cpc	r1, r27
    1e38:	0c f4       	brge	.+2      	; 0x1e3c <CLCD_voidWriteNumber+0x114>
    1e3a:	aa cf       	rjmp	.-172    	; 0x1d90 <CLCD_voidWriteNumber+0x68>
			} else if (digitPlace == 1) {
			// Display at least the least significant digit if it's zero
			CLCD_voidSendData('0');
		}
	}
}
    1e3c:	2d 96       	adiw	r28, 0x0d	; 13
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <CLCD_VidDisplayClear>:


void CLCD_VidDisplayClear(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2e 97       	sbiw	r28, 0x0e	; 14
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x01);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e4       	ldi	r26, 0x40	; 64
    1e6e:	b0 e4       	ldi	r27, 0x40	; 64
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <CLCD_VidDisplayClear+0x6c>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <CLCD_VidDisplayClear+0xea>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <CLCD_VidDisplayClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <CLCD_VidDisplayClear+0xcc>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <CLCD_VidDisplayClear+0xba>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <CLCD_VidDisplayClear+0xae>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <CLCD_VidDisplayClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <CLCD_VidDisplayClear+0xf6>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);
}	
    1f4c:	2e 96       	adiw	r28, 0x0e	; 14
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <CLCD_voidWriteFloat>:





void CLCD_voidWriteFloat(float Copy_f32Number, u8 decimalPlaces) {
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	62 97       	sbiw	r28, 0x12	; 18
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	6e 87       	std	Y+14, r22	; 0x0e
    1f74:	7f 87       	std	Y+15, r23	; 0x0f
    1f76:	88 8b       	std	Y+16, r24	; 0x10
    1f78:	99 8b       	std	Y+17, r25	; 0x11
    1f7a:	4a 8b       	std	Y+18, r20	; 0x12
    // Handle negative numbers
    if (Copy_f32Number < 0) {
    1f7c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f7e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f80:	88 89       	ldd	r24, Y+16	; 0x10
    1f82:	99 89       	ldd	r25, Y+17	; 0x11
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	6c f4       	brge	.+26     	; 0x1fae <CLCD_voidWriteFloat+0x50>
        CLCD_voidSendData('-');
    1f94:	8d e2       	ldi	r24, 0x2D	; 45
    1f96:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
        Copy_f32Number = -Copy_f32Number;
    1f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f9e:	a8 89       	ldd	r26, Y+16	; 0x10
    1fa0:	b9 89       	ldd	r27, Y+17	; 0x11
    1fa2:	b0 58       	subi	r27, 0x80	; 128
    1fa4:	8e 87       	std	Y+14, r24	; 0x0e
    1fa6:	9f 87       	std	Y+15, r25	; 0x0f
    1fa8:	a8 8b       	std	Y+16, r26	; 0x10
    1faa:	b9 8b       	std	Y+17, r27	; 0x11
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <CLCD_voidWriteFloat+0x56>
    } else {
        CLCD_voidSendData(' ');
    1fae:	80 e2       	ldi	r24, 0x20	; 32
    1fb0:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
    }

    // Display the integer part
    s32 integerPart = (s32)Copy_f32Number;
    1fb4:	6e 85       	ldd	r22, Y+14	; 0x0e
    1fb6:	7f 85       	ldd	r23, Y+15	; 0x0f
    1fb8:	88 89       	ldd	r24, Y+16	; 0x10
    1fba:	99 89       	ldd	r25, Y+17	; 0x11
    1fbc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8a 87       	std	Y+10, r24	; 0x0a
    1fc6:	9b 87       	std	Y+11, r25	; 0x0b
    1fc8:	ac 87       	std	Y+12, r26	; 0x0c
    1fca:	bd 87       	std	Y+13, r27	; 0x0d
    CLCD_voidWriteNumber(integerPart);
    1fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fce:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fd0:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fd2:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <CLCD_voidWriteNumber>

    // Display the decimal point
    CLCD_voidSendData('.');
    1fdc:	8e e2       	ldi	r24, 0x2E	; 46
    1fde:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>

    // Extract the fractional part
    float fractionalPart = Copy_f32Number - (float)integerPart;
    1fe2:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fe4:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fe6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fe8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1fee:	9b 01       	movw	r18, r22
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ff4:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ff6:	88 89       	ldd	r24, Y+16	; 0x10
    1ff8:	99 89       	ldd	r25, Y+17	; 0x11
    1ffa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8e 83       	std	Y+6, r24	; 0x06
    2004:	9f 83       	std	Y+7, r25	; 0x07
    2006:	a8 87       	std	Y+8, r26	; 0x08
    2008:	b9 87       	std	Y+9, r27	; 0x09

    // Display the decimal places
    for (u8 i = 0; i < decimalPlaces; i++) {
    200a:	1d 82       	std	Y+5, r1	; 0x05
    200c:	37 c0       	rjmp	.+110    	; 0x207c <CLCD_voidWriteFloat+0x11e>
        fractionalPart *= 10.0;
    200e:	6e 81       	ldd	r22, Y+6	; 0x06
    2010:	7f 81       	ldd	r23, Y+7	; 0x07
    2012:	88 85       	ldd	r24, Y+8	; 0x08
    2014:	99 85       	ldd	r25, Y+9	; 0x09
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8e 83       	std	Y+6, r24	; 0x06
    2028:	9f 83       	std	Y+7, r25	; 0x07
    202a:	a8 87       	std	Y+8, r26	; 0x08
    202c:	b9 87       	std	Y+9, r27	; 0x09
        s32 digit = (s32)fractionalPart;
    202e:	6e 81       	ldd	r22, Y+6	; 0x06
    2030:	7f 81       	ldd	r23, Y+7	; 0x07
    2032:	88 85       	ldd	r24, Y+8	; 0x08
    2034:	99 85       	ldd	r25, Y+9	; 0x09
    2036:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	ab 83       	std	Y+3, r26	; 0x03
    2044:	bc 83       	std	Y+4, r27	; 0x04
        CLCD_voidSendData('0' + digit);
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	80 5d       	subi	r24, 0xD0	; 208
    204a:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
        fractionalPart -= (float)digit;
    204e:	69 81       	ldd	r22, Y+1	; 0x01
    2050:	7a 81       	ldd	r23, Y+2	; 0x02
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    205a:	9b 01       	movw	r18, r22
    205c:	ac 01       	movw	r20, r24
    205e:	6e 81       	ldd	r22, Y+6	; 0x06
    2060:	7f 81       	ldd	r23, Y+7	; 0x07
    2062:	88 85       	ldd	r24, Y+8	; 0x08
    2064:	99 85       	ldd	r25, Y+9	; 0x09
    2066:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8e 83       	std	Y+6, r24	; 0x06
    2070:	9f 83       	std	Y+7, r25	; 0x07
    2072:	a8 87       	std	Y+8, r26	; 0x08
    2074:	b9 87       	std	Y+9, r27	; 0x09

    // Extract the fractional part
    float fractionalPart = Copy_f32Number - (float)integerPart;

    // Display the decimal places
    for (u8 i = 0; i < decimalPlaces; i++) {
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	9d 81       	ldd	r25, Y+5	; 0x05
    207e:	8a 89       	ldd	r24, Y+18	; 0x12
    2080:	98 17       	cp	r25, r24
    2082:	28 f2       	brcs	.-118    	; 0x200e <CLCD_voidWriteFloat+0xb0>
        fractionalPart *= 10.0;
        s32 digit = (s32)fractionalPart;
        CLCD_voidSendData('0' + digit);
        fractionalPart -= (float)digit;
    }
}
    2084:	62 96       	adiw	r28, 0x12	; 18
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <DCMOTOR_u8RotateCW>:
#include "DCMOTOR_privite.h"



u8 DCMOTOR_u8RotateCW(u8* Copy_pDCMOTOR)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <DCMOTOR_u8RotateCW+0x6>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	9b 83       	std	Y+3, r25	; 0x03
    20a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    20a6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pDCMOTOR != NULL)
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <DCMOTOR_u8RotateCW+0x32>
	{
		Local_u8ErrorState = OK;
    20b0:	19 82       	std	Y+1, r1	; 0x01

		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_HIGH);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN2, DIO_u8PIN_LOW);
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	62 e0       	ldi	r22, 0x02	; 2
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DCMOTOR_u8RotateCW+0x36>
	}

	else
	{
		Local_u8ErrorState = NULL_POINTER;
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <DCMOTOR_u8RotateCCW>:



u8 DCMOTOR_u8RotateCCW(u8* Copy_pDCMOTOR)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <DCMOTOR_u8RotateCCW+0x6>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9b 83       	std	Y+3, r25	; 0x03
    20e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    20ea:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pDCMOTOR != NULL)
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	61 f0       	breq	.+24     	; 0x210c <DCMOTOR_u8RotateCCW+0x32>
	{
		Local_u8ErrorState = OK;
    20f4:	19 82       	std	Y+1, r1	; 0x01

		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_LOW);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN2, DIO_u8PIN_HIGH);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <DCMOTOR_u8RotateCCW+0x36>
	}

	else
	{
		Local_u8ErrorState =  NULL_POINTER;
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2110:	89 81       	ldd	r24, Y+1	; 0x01

}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <DCMOTOR_u8Stop>:



u8 DCMOTOR_u8Stop(u8* Copy_pDCMOTOR)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <DCMOTOR_u8Stop+0x6>
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    212e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pDCMOTOR != NULL)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	61 f0       	breq	.+24     	; 0x2150 <DCMOTOR_u8Stop+0x32>
	{
		Local_u8ErrorState = OK;
    2138:	19 82       	std	Y+1, r1	; 0x01

		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_LOW);
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN2, DIO_u8PIN_LOW);
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DCMOTOR_u8Stop+0x36>
	}

	else
	{
		Local_u8ErrorState = NULL_POINTER;
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2154:	89 81       	ldd	r24, Y+1	; 0x01

}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <DIO_u8SetPinValue>:
#include "DIO_privite.h"
#include "DIO_config.h"


u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Value)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	28 97       	sbiw	r28, 0x08	; 8
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	6b 83       	std	Y+3, r22	; 0x03
    217a:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState = 0 ;
    217c:	19 82       	std	Y+1, r1	; 0x01
 if (copy_u8Pin <= DIO_u8PIN7 ) {
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	88 30       	cpi	r24, 0x08	; 8
    2182:	08 f0       	brcs	.+2      	; 0x2186 <DIO_u8SetPinValue+0x24>
    2184:	f3 c0       	rjmp	.+486    	; 0x236c <DIO_u8SetPinValue+0x20a>

 if(copy_u8Value == DIO_u8PIN_LOW ) {
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	88 23       	and	r24, r24
    218a:	09 f0       	breq	.+2      	; 0x218e <DIO_u8SetPinValue+0x2c>
    218c:	77 c0       	rjmp	.+238    	; 0x227c <DIO_u8SetPinValue+0x11a>

switch( copy_u8Port ) {
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	38 87       	std	Y+8, r19	; 0x08
    2196:	2f 83       	std	Y+7, r18	; 0x07
    2198:	8f 81       	ldd	r24, Y+7	; 0x07
    219a:	98 85       	ldd	r25, Y+8	; 0x08
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	91 05       	cpc	r25, r1
    21a0:	59 f1       	breq	.+86     	; 0x21f8 <DIO_u8SetPinValue+0x96>
    21a2:	2f 81       	ldd	r18, Y+7	; 0x07
    21a4:	38 85       	ldd	r19, Y+8	; 0x08
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <DIO_u8SetPinValue+0x54>
    21ac:	8f 81       	ldd	r24, Y+7	; 0x07
    21ae:	98 85       	ldd	r25, Y+8	; 0x08
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f0       	breq	.+26     	; 0x21ce <DIO_u8SetPinValue+0x6c>
    21b4:	60 c0       	rjmp	.+192    	; 0x2276 <DIO_u8SetPinValue+0x114>
    21b6:	2f 81       	ldd	r18, Y+7	; 0x07
    21b8:	38 85       	ldd	r19, Y+8	; 0x08
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	89 f1       	breq	.+98     	; 0x2222 <DIO_u8SetPinValue+0xc0>
    21c0:	8f 81       	ldd	r24, Y+7	; 0x07
    21c2:	98 85       	ldd	r25, Y+8	; 0x08
    21c4:	83 30       	cpi	r24, 0x03	; 3
    21c6:	91 05       	cpc	r25, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <DIO_u8SetPinValue+0x6a>
    21ca:	40 c0       	rjmp	.+128    	; 0x224c <DIO_u8SetPinValue+0xea>
    21cc:	54 c0       	rjmp	.+168    	; 0x2276 <DIO_u8SetPinValue+0x114>
	case  DIO_u8PORTA :  CLR_BIT(PORTA , copy_u8Pin ) ; break ;
    21ce:	ab e3       	ldi	r26, 0x3B	; 59
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	eb e3       	ldi	r30, 0x3B	; 59
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <DIO_u8SetPinValue+0x8a>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <DIO_u8SetPinValue+0x86>
    21f0:	80 95       	com	r24
    21f2:	84 23       	and	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	ba c0       	rjmp	.+372    	; 0x236c <DIO_u8SetPinValue+0x20a>
	case  DIO_u8PORTB :  CLR_BIT(PORTB , copy_u8Pin ) ; break ;
    21f8:	a8 e3       	ldi	r26, 0x38	; 56
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e8 e3       	ldi	r30, 0x38	; 56
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <DIO_u8SetPinValue+0xb4>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <DIO_u8SetPinValue+0xb0>
    221a:	80 95       	com	r24
    221c:	84 23       	and	r24, r20
    221e:	8c 93       	st	X, r24
    2220:	a5 c0       	rjmp	.+330    	; 0x236c <DIO_u8SetPinValue+0x20a>
	case  DIO_u8PORTC :  CLR_BIT(PORTC , copy_u8Pin ) ; break ;
    2222:	a5 e3       	ldi	r26, 0x35	; 53
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e5 e3       	ldi	r30, 0x35	; 53
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_u8SetPinValue+0xde>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_u8SetPinValue+0xda>
    2244:	80 95       	com	r24
    2246:	84 23       	and	r24, r20
    2248:	8c 93       	st	X, r24
    224a:	90 c0       	rjmp	.+288    	; 0x236c <DIO_u8SetPinValue+0x20a>
	case  DIO_u8PORTD :  CLR_BIT(PORTD , copy_u8Pin ) ; break ;
    224c:	a2 e3       	ldi	r26, 0x32	; 50
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e2 e3       	ldi	r30, 0x32	; 50
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_u8SetPinValue+0x108>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_u8SetPinValue+0x104>
    226e:	80 95       	com	r24
    2270:	84 23       	and	r24, r20
    2272:	8c 93       	st	X, r24
    2274:	7b c0       	rjmp	.+246    	; 0x236c <DIO_u8SetPinValue+0x20a>
default : Local_u8ErrorState = 1 ; break ;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	78 c0       	rjmp	.+240    	; 0x236c <DIO_u8SetPinValue+0x20a>
}

 }
 else  if( copy_u8Value == DIO_u8PIN_HIGH ) {
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	09 f0       	breq	.+2      	; 0x2284 <DIO_u8SetPinValue+0x122>
    2282:	72 c0       	rjmp	.+228    	; 0x2368 <DIO_u8SetPinValue+0x206>

switch( copy_u8Port ) {
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	3e 83       	std	Y+6, r19	; 0x06
    228c:	2d 83       	std	Y+5, r18	; 0x05
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	91 05       	cpc	r25, r1
    2296:	49 f1       	breq	.+82     	; 0x22ea <DIO_u8SetPinValue+0x188>
    2298:	2d 81       	ldd	r18, Y+5	; 0x05
    229a:	3e 81       	ldd	r19, Y+6	; 0x06
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	2c f4       	brge	.+10     	; 0x22ac <DIO_u8SetPinValue+0x14a>
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	61 f0       	breq	.+24     	; 0x22c2 <DIO_u8SetPinValue+0x160>
    22aa:	5b c0       	rjmp	.+182    	; 0x2362 <DIO_u8SetPinValue+0x200>
    22ac:	2d 81       	ldd	r18, Y+5	; 0x05
    22ae:	3e 81       	ldd	r19, Y+6	; 0x06
    22b0:	22 30       	cpi	r18, 0x02	; 2
    22b2:	31 05       	cpc	r19, r1
    22b4:	71 f1       	breq	.+92     	; 0x2312 <DIO_u8SetPinValue+0x1b0>
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	83 30       	cpi	r24, 0x03	; 3
    22bc:	91 05       	cpc	r25, r1
    22be:	e9 f1       	breq	.+122    	; 0x233a <DIO_u8SetPinValue+0x1d8>
    22c0:	50 c0       	rjmp	.+160    	; 0x2362 <DIO_u8SetPinValue+0x200>
	case  DIO_u8PORTA :  SET_BIT(PORTA , copy_u8Pin ) ; break ;
    22c2:	ab e3       	ldi	r26, 0x3B	; 59
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	eb e3       	ldi	r30, 0x3B	; 59
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	48 2f       	mov	r20, r24
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 2e       	mov	r0, r18
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <DIO_u8SetPinValue+0x17e>
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	0a 94       	dec	r0
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <DIO_u8SetPinValue+0x17a>
    22e4:	84 2b       	or	r24, r20
    22e6:	8c 93       	st	X, r24
    22e8:	41 c0       	rjmp	.+130    	; 0x236c <DIO_u8SetPinValue+0x20a>
	case  DIO_u8PORTB  : SET_BIT(PORTB , copy_u8Pin ) ; break ;
    22ea:	a8 e3       	ldi	r26, 0x38	; 56
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e8 e3       	ldi	r30, 0x38	; 56
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	48 2f       	mov	r20, r24
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <DIO_u8SetPinValue+0x1a6>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <DIO_u8SetPinValue+0x1a2>
    230c:	84 2b       	or	r24, r20
    230e:	8c 93       	st	X, r24
    2310:	2d c0       	rjmp	.+90     	; 0x236c <DIO_u8SetPinValue+0x20a>
	case  DIO_u8PORTC  : SET_BIT(PORTC , copy_u8Pin ) ; break ;
    2312:	a5 e3       	ldi	r26, 0x35	; 53
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e5 e3       	ldi	r30, 0x35	; 53
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <DIO_u8SetPinValue+0x1ce>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <DIO_u8SetPinValue+0x1ca>
    2334:	84 2b       	or	r24, r20
    2336:	8c 93       	st	X, r24
    2338:	19 c0       	rjmp	.+50     	; 0x236c <DIO_u8SetPinValue+0x20a>
	case  DIO_u8PORTD  : SET_BIT(PORTD , copy_u8Pin ) ; break ;
    233a:	a2 e3       	ldi	r26, 0x32	; 50
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e2 e3       	ldi	r30, 0x32	; 50
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	48 2f       	mov	r20, r24
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <DIO_u8SetPinValue+0x1f6>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <DIO_u8SetPinValue+0x1f2>
    235c:	84 2b       	or	r24, r20
    235e:	8c 93       	st	X, r24
    2360:	05 c0       	rjmp	.+10     	; 0x236c <DIO_u8SetPinValue+0x20a>
default : Local_u8ErrorState = 1 ; break ;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	02 c0       	rjmp	.+4      	; 0x236c <DIO_u8SetPinValue+0x20a>
}

 }
 else {
	 Local_u8ErrorState = 1 ;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	89 83       	std	Y+1, r24	; 0x01
 }
 }

return Local_u8ErrorState ;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
}
    236e:	28 96       	adiw	r28, 0x08	; 8
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 copy_u8Port, u8 copy_u8Value)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <DIO_u8SetPortValue+0x6>
    2386:	00 d0       	rcall	.+0      	; 0x2388 <DIO_u8SetPortValue+0x8>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	8a 83       	std	Y+2, r24	; 0x02
    2390:	6b 83       	std	Y+3, r22	; 0x03
u8 Local_u8ErrorState = 0 ;
    2392:	19 82       	std	Y+1, r1	; 0x01

switch( copy_u8Port ) {
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3d 83       	std	Y+5, r19	; 0x05
    239c:	2c 83       	std	Y+4, r18	; 0x04
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	91 05       	cpc	r25, r1
    23a6:	d1 f0       	breq	.+52     	; 0x23dc <DIO_u8SetPortValue+0x5c>
    23a8:	2c 81       	ldd	r18, Y+4	; 0x04
    23aa:	3d 81       	ldd	r19, Y+5	; 0x05
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	2c f4       	brge	.+10     	; 0x23bc <DIO_u8SetPortValue+0x3c>
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	9d 81       	ldd	r25, Y+5	; 0x05
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <DIO_u8SetPortValue+0x52>
    23ba:	1f c0       	rjmp	.+62     	; 0x23fa <DIO_u8SetPortValue+0x7a>
    23bc:	2c 81       	ldd	r18, Y+4	; 0x04
    23be:	3d 81       	ldd	r19, Y+5	; 0x05
    23c0:	22 30       	cpi	r18, 0x02	; 2
    23c2:	31 05       	cpc	r19, r1
    23c4:	81 f0       	breq	.+32     	; 0x23e6 <DIO_u8SetPortValue+0x66>
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	91 05       	cpc	r25, r1
    23ce:	81 f0       	breq	.+32     	; 0x23f0 <DIO_u8SetPortValue+0x70>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <DIO_u8SetPortValue+0x7a>
		case  DIO_u8PORTA  : PORTA = copy_u8Value  ; break ;
    23d2:	eb e3       	ldi	r30, 0x3B	; 59
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	80 83       	st	Z, r24
    23da:	11 c0       	rjmp	.+34     	; 0x23fe <DIO_u8SetPortValue+0x7e>
		case  DIO_u8PORTB  : PORTB = copy_u8Value  ; break ;
    23dc:	e8 e3       	ldi	r30, 0x38	; 56
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	80 83       	st	Z, r24
    23e4:	0c c0       	rjmp	.+24     	; 0x23fe <DIO_u8SetPortValue+0x7e>
		case  DIO_u8PORTC  : PORTC = copy_u8Value; break ;
    23e6:	e5 e3       	ldi	r30, 0x35	; 53
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	80 83       	st	Z, r24
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <DIO_u8SetPortValue+0x7e>
		case  DIO_u8PORTD  : PORTD = copy_u8Value ; break ;
    23f0:	e2 e3       	ldi	r30, 0x32	; 50
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	80 83       	st	Z, r24
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = 1 ; break ;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8ErrorState ;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <DIO_u8GetPinValue>:




u8 DIO_u8GetPinValue(u8 copy_u8Port, u8 copy_u8Pin, u8 *copy_pu8Value)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	27 97       	sbiw	r28, 0x07	; 7
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	6b 83       	std	Y+3, r22	; 0x03
    2428:	5d 83       	std	Y+5, r21	; 0x05
    242a:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState = 0 ;
    242c:	19 82       	std	Y+1, r1	; 0x01

 if ( (copy_u8Pin <= DIO_u8PIN7 ) && ( copy_pu8Value != NULL  ) )  {
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	88 30       	cpi	r24, 0x08	; 8
    2432:	08 f0       	brcs	.+2      	; 0x2436 <DIO_u8GetPinValue+0x26>
    2434:	79 c0       	rjmp	.+242    	; 0x2528 <DIO_u8GetPinValue+0x118>
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	9d 81       	ldd	r25, Y+5	; 0x05
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	09 f4       	brne	.+2      	; 0x2440 <DIO_u8GetPinValue+0x30>
    243e:	74 c0       	rjmp	.+232    	; 0x2528 <DIO_u8GetPinValue+0x118>
switch( copy_u8Port ) {
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	3f 83       	std	Y+7, r19	; 0x07
    2448:	2e 83       	std	Y+6, r18	; 0x06
    244a:	4e 81       	ldd	r20, Y+6	; 0x06
    244c:	5f 81       	ldd	r21, Y+7	; 0x07
    244e:	41 30       	cpi	r20, 0x01	; 1
    2450:	51 05       	cpc	r21, r1
    2452:	59 f1       	breq	.+86     	; 0x24aa <DIO_u8GetPinValue+0x9a>
    2454:	8e 81       	ldd	r24, Y+6	; 0x06
    2456:	9f 81       	ldd	r25, Y+7	; 0x07
    2458:	82 30       	cpi	r24, 0x02	; 2
    245a:	91 05       	cpc	r25, r1
    245c:	34 f4       	brge	.+12     	; 0x246a <DIO_u8GetPinValue+0x5a>
    245e:	2e 81       	ldd	r18, Y+6	; 0x06
    2460:	3f 81       	ldd	r19, Y+7	; 0x07
    2462:	21 15       	cp	r18, r1
    2464:	31 05       	cpc	r19, r1
    2466:	69 f0       	breq	.+26     	; 0x2482 <DIO_u8GetPinValue+0x72>
    2468:	5c c0       	rjmp	.+184    	; 0x2522 <DIO_u8GetPinValue+0x112>
    246a:	4e 81       	ldd	r20, Y+6	; 0x06
    246c:	5f 81       	ldd	r21, Y+7	; 0x07
    246e:	42 30       	cpi	r20, 0x02	; 2
    2470:	51 05       	cpc	r21, r1
    2472:	79 f1       	breq	.+94     	; 0x24d2 <DIO_u8GetPinValue+0xc2>
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	91 05       	cpc	r25, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <DIO_u8GetPinValue+0x70>
    247e:	3d c0       	rjmp	.+122    	; 0x24fa <DIO_u8GetPinValue+0xea>
    2480:	50 c0       	rjmp	.+160    	; 0x2522 <DIO_u8GetPinValue+0x112>
	case  DIO_u8PORTA  : *copy_pu8Value =   GET_BIT(PINA , copy_u8Pin ) ; break ;
    2482:	e9 e3       	ldi	r30, 0x39	; 57
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a9 01       	movw	r20, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <DIO_u8GetPinValue+0x8a>
    2496:	55 95       	asr	r21
    2498:	47 95       	ror	r20
    249a:	8a 95       	dec	r24
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <DIO_u8GetPinValue+0x86>
    249e:	ca 01       	movw	r24, r20
    24a0:	81 70       	andi	r24, 0x01	; 1
    24a2:	ec 81       	ldd	r30, Y+4	; 0x04
    24a4:	fd 81       	ldd	r31, Y+5	; 0x05
    24a6:	80 83       	st	Z, r24
    24a8:	41 c0       	rjmp	.+130    	; 0x252c <DIO_u8GetPinValue+0x11c>
	case  DIO_u8PORTB  : *copy_pu8Value =   GET_BIT(PINB , copy_u8Pin ) ; break ;
    24aa:	e6 e3       	ldi	r30, 0x36	; 54
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a9 01       	movw	r20, r18
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <DIO_u8GetPinValue+0xb2>
    24be:	55 95       	asr	r21
    24c0:	47 95       	ror	r20
    24c2:	8a 95       	dec	r24
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <DIO_u8GetPinValue+0xae>
    24c6:	ca 01       	movw	r24, r20
    24c8:	81 70       	andi	r24, 0x01	; 1
    24ca:	ec 81       	ldd	r30, Y+4	; 0x04
    24cc:	fd 81       	ldd	r31, Y+5	; 0x05
    24ce:	80 83       	st	Z, r24
    24d0:	2d c0       	rjmp	.+90     	; 0x252c <DIO_u8GetPinValue+0x11c>
	case  DIO_u8PORTC  : *copy_pu8Value =   GET_BIT(PINC , copy_u8Pin ) ; break ;
    24d2:	e3 e3       	ldi	r30, 0x33	; 51
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a9 01       	movw	r20, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <DIO_u8GetPinValue+0xda>
    24e6:	55 95       	asr	r21
    24e8:	47 95       	ror	r20
    24ea:	8a 95       	dec	r24
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <DIO_u8GetPinValue+0xd6>
    24ee:	ca 01       	movw	r24, r20
    24f0:	81 70       	andi	r24, 0x01	; 1
    24f2:	ec 81       	ldd	r30, Y+4	; 0x04
    24f4:	fd 81       	ldd	r31, Y+5	; 0x05
    24f6:	80 83       	st	Z, r24
    24f8:	19 c0       	rjmp	.+50     	; 0x252c <DIO_u8GetPinValue+0x11c>
	case  DIO_u8PORTD  : *copy_pu8Value =   GET_BIT(PIND , copy_u8Pin ) ; break ;
    24fa:	e0 e3       	ldi	r30, 0x30	; 48
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a9 01       	movw	r20, r18
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <DIO_u8GetPinValue+0x102>
    250e:	55 95       	asr	r21
    2510:	47 95       	ror	r20
    2512:	8a 95       	dec	r24
    2514:	e2 f7       	brpl	.-8      	; 0x250e <DIO_u8GetPinValue+0xfe>
    2516:	ca 01       	movw	r24, r20
    2518:	81 70       	andi	r24, 0x01	; 1
    251a:	ec 81       	ldd	r30, Y+4	; 0x04
    251c:	fd 81       	ldd	r31, Y+5	; 0x05
    251e:	80 83       	st	Z, r24
    2520:	05 c0       	rjmp	.+10     	; 0x252c <DIO_u8GetPinValue+0x11c>

    default : Local_u8ErrorState = 1 ; break ;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	02 c0       	rjmp	.+4      	; 0x252c <DIO_u8GetPinValue+0x11c>


 }
else {

		 Local_u8ErrorState = 1 ;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	89 83       	std	Y+1, r24	; 0x01


}

return Local_u8ErrorState ;
    252c:	89 81       	ldd	r24, Y+1	; 0x01

}
    252e:	27 96       	adiw	r28, 0x07	; 7
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <EXTI_voidInt0Init>:
void (*EXTI_pvInt1Func)(void) = NULL ;
/* Global pointer to function to hold INT2 ISR address */
void (*EXTI_pvInt2Func)(void) = NULL ;


void EXTI_voidInt0Init(void){
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR , MCUCR_ISC00);
	
			
	#elif INT0_SENSE ==RISING_EDGE
			
	SET_BIT(MCUCR , MCUCR_ISC01);
    2548:	a5 e5       	ldi	r26, 0x55	; 85
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e5 e5       	ldi	r30, 0x55	; 85
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	82 60       	ori	r24, 0x02	; 2
    2554:	8c 93       	st	X, r24
	SET_BIT(MCUCR , MCUCR_ISC00);
    2556:	a5 e5       	ldi	r26, 0x55	; 85
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e5 e5       	ldi	r30, 0x55	; 85
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	81 60       	ori	r24, 0x01	; 1
    2562:	8c 93       	st	X, r24
		#error  "wrong INT0_SENSE CONFIG OPTION "
		
#endif

	#if INT0_INITIAL_SENSE ==ENABLED
		SET_BIT(GICR,GICR_INT0);
    2564:	ab e5       	ldi	r26, 0x5B	; 91
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	eb e5       	ldi	r30, 0x5B	; 91
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	80 64       	ori	r24, 0x40	; 64
    2570:	8c 93       	st	X, r24
#else
#error  "wrong INT0_INITIAL_SENSE CONFIG OPTION "

#endif
	
}
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <EXTI_voidInt1Init>:



void EXTI_voidInt1Init(void){
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(MCUCR , MCUCR_ISC11);
SET_BIT(MCUCR , MCUCR_ISC10);


#elif INT1_SENSE ==FALLING_EDGE
SET_BIT(MCUCR , MCUCR_ISC11);
    2580:	a5 e5       	ldi	r26, 0x55	; 85
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e5 e5       	ldi	r30, 0x55	; 85
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	88 60       	ori	r24, 0x08	; 8
    258c:	8c 93       	st	X, r24
CLR_BIT(MCUCR , MCUCR_ISC10);
    258e:	a5 e5       	ldi	r26, 0x55	; 85
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e5 e5       	ldi	r30, 0x55	; 85
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	8b 7f       	andi	r24, 0xFB	; 251
    259a:	8c 93       	st	X, r24

#endif


#if INT1_INITIAL_SENSE ==ENABLED
	SET_BIT(GICR,GICR_INT1);
    259c:	ab e5       	ldi	r26, 0x5B	; 91
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	eb e5       	ldi	r30, 0x5B	; 91
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 68       	ori	r24, 0x80	; 128
    25a8:	8c 93       	st	X, r24
#else
#error  "wrong INT1_INITIAL_SENSE CONFIG OPTION "

#endif

}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <EXTI_voidInt2Init>:





void EXTI_voidInt2Init(void){
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62

	    SET_BIT(MCUCSR ,MCUCSR_INT2 );


#elif INT2_SENSE ==FALLING_EDGE
	    CLR_BIT(MCUCSR ,MCUCSR_INT2 );
    25b8:	a4 e5       	ldi	r26, 0x54	; 84
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e4 e5       	ldi	r30, 0x54	; 84
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8f 7b       	andi	r24, 0xBF	; 191
    25c4:	8c 93       	st	X, r24

#endif


#if INT2_INITIAL_SENSE ==ENABLED
SET_BIT(GICR,GICR_INT2);
    25c6:	ab e5       	ldi	r26, 0x5B	; 91
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	eb e5       	ldi	r30, 0x5B	; 91
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	80 62       	ori	r24, 0x20	; 32
    25d2:	8c 93       	st	X, r24
#error  "wrong INT2_INITIAL_SENSE CONFIG OPTION "

#endif


}
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <EXTI_u8Int0SetSenseControl>:

u8 EXTI_u8Int0SetSenseControl(u8 copy_u8Sense) {
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <EXTI_u8Int0SetSenseControl+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <EXTI_u8Int0SetSenseControl+0x8>
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	8a 83       	std	Y+2, r24	; 0x02
	
	u8 Local_u8ErrorState = OK ;        
    25e8:	19 82       	std	Y+1, r1	; 0x01

	switch (copy_u8Sense){
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	3c 83       	std	Y+4, r19	; 0x04
    25f2:	2b 83       	std	Y+3, r18	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	91 05       	cpc	r25, r1
    25fc:	a1 f1       	breq	.+104    	; 0x2666 <EXTI_u8Int0SetSenseControl+0x8c>
    25fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2600:	3c 81       	ldd	r19, Y+4	; 0x04
    2602:	23 30       	cpi	r18, 0x03	; 3
    2604:	31 05       	cpc	r19, r1
    2606:	34 f4       	brge	.+12     	; 0x2614 <EXTI_u8Int0SetSenseControl+0x3a>
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	91 05       	cpc	r25, r1
    2610:	61 f0       	breq	.+24     	; 0x262a <EXTI_u8Int0SetSenseControl+0x50>
    2612:	47 c0       	rjmp	.+142    	; 0x26a2 <EXTI_u8Int0SetSenseControl+0xc8>
    2614:	2b 81       	ldd	r18, Y+3	; 0x03
    2616:	3c 81       	ldd	r19, Y+4	; 0x04
    2618:	23 30       	cpi	r18, 0x03	; 3
    261a:	31 05       	cpc	r19, r1
    261c:	a9 f0       	breq	.+42     	; 0x2648 <EXTI_u8Int0SetSenseControl+0x6e>
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	84 30       	cpi	r24, 0x04	; 4
    2624:	91 05       	cpc	r25, r1
    2626:	71 f1       	breq	.+92     	; 0x2684 <EXTI_u8Int0SetSenseControl+0xaa>
    2628:	3c c0       	rjmp	.+120    	; 0x26a2 <EXTI_u8Int0SetSenseControl+0xc8>
		case LOW_LEVEL  : CLR_BIT(MCUCR , MCUCR_ISC01);CLR_BIT(MCUCR , MCUCR_ISC00);break ;
    262a:	a5 e5       	ldi	r26, 0x55	; 85
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e5 e5       	ldi	r30, 0x55	; 85
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	8d 7f       	andi	r24, 0xFD	; 253
    2636:	8c 93       	st	X, r24
    2638:	a5 e5       	ldi	r26, 0x55	; 85
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e5 e5       	ldi	r30, 0x55	; 85
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8e 7f       	andi	r24, 0xFE	; 254
    2644:	8c 93       	st	X, r24
    2646:	2f c0       	rjmp	.+94     	; 0x26a6 <EXTI_u8Int0SetSenseControl+0xcc>
		case FALLING_EDGE  :SET_BIT(MCUCR , MCUCR_ISC01);CLR_BIT(MCUCR , MCUCR_ISC00);break ;
    2648:	a5 e5       	ldi	r26, 0x55	; 85
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e5       	ldi	r30, 0x55	; 85
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24
    2656:	a5 e5       	ldi	r26, 0x55	; 85
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e5 e5       	ldi	r30, 0x55	; 85
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8e 7f       	andi	r24, 0xFE	; 254
    2662:	8c 93       	st	X, r24
    2664:	20 c0       	rjmp	.+64     	; 0x26a6 <EXTI_u8Int0SetSenseControl+0xcc>
		case ON_CHANGE  :CLR_BIT(MCUCR , MCUCR_ISC01);SET_BIT(MCUCR , MCUCR_ISC00);break ;
    2666:	a5 e5       	ldi	r26, 0x55	; 85
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e5 e5       	ldi	r30, 0x55	; 85
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8d 7f       	andi	r24, 0xFD	; 253
    2672:	8c 93       	st	X, r24
    2674:	a5 e5       	ldi	r26, 0x55	; 85
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e5 e5       	ldi	r30, 0x55	; 85
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	81 60       	ori	r24, 0x01	; 1
    2680:	8c 93       	st	X, r24
    2682:	11 c0       	rjmp	.+34     	; 0x26a6 <EXTI_u8Int0SetSenseControl+0xcc>
		case RISING_EDGE  :SET_BIT(MCUCR , MCUCR_ISC01);SET_BIT(MCUCR , MCUCR_ISC00);break ;
    2684:	a5 e5       	ldi	r26, 0x55	; 85
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e5 e5       	ldi	r30, 0x55	; 85
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	82 60       	ori	r24, 0x02	; 2
    2690:	8c 93       	st	X, r24
    2692:	a5 e5       	ldi	r26, 0x55	; 85
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e5 e5       	ldi	r30, 0x55	; 85
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	81 60       	ori	r24, 0x01	; 1
    269e:	8c 93       	st	X, r24
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <EXTI_u8Int0SetSenseControl+0xcc>
		default: Local_u8ErrorState =NOK ;break;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <EXTI_u8Int1SetSenseControl>:

u8 EXTI_u8Int1SetSenseControl(u8 copy_u8Sense) {
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <EXTI_u8Int1SetSenseControl+0x6>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <EXTI_u8Int1SetSenseControl+0x8>
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	8a 83       	std	Y+2, r24	; 0x02
	
u8 Local_u8ErrorState = OK ; 	
    26c4:	19 82       	std	Y+1, r1	; 0x01
	
	switch (copy_u8Sense){
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3c 83       	std	Y+4, r19	; 0x04
    26ce:	2b 83       	std	Y+3, r18	; 0x03
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	91 05       	cpc	r25, r1
    26d8:	a1 f1       	breq	.+104    	; 0x2742 <EXTI_u8Int1SetSenseControl+0x8c>
    26da:	2b 81       	ldd	r18, Y+3	; 0x03
    26dc:	3c 81       	ldd	r19, Y+4	; 0x04
    26de:	23 30       	cpi	r18, 0x03	; 3
    26e0:	31 05       	cpc	r19, r1
    26e2:	34 f4       	brge	.+12     	; 0x26f0 <EXTI_u8Int1SetSenseControl+0x3a>
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	91 05       	cpc	r25, r1
    26ec:	61 f0       	breq	.+24     	; 0x2706 <EXTI_u8Int1SetSenseControl+0x50>
    26ee:	47 c0       	rjmp	.+142    	; 0x277e <EXTI_u8Int1SetSenseControl+0xc8>
    26f0:	2b 81       	ldd	r18, Y+3	; 0x03
    26f2:	3c 81       	ldd	r19, Y+4	; 0x04
    26f4:	23 30       	cpi	r18, 0x03	; 3
    26f6:	31 05       	cpc	r19, r1
    26f8:	a9 f0       	breq	.+42     	; 0x2724 <EXTI_u8Int1SetSenseControl+0x6e>
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	84 30       	cpi	r24, 0x04	; 4
    2700:	91 05       	cpc	r25, r1
    2702:	71 f1       	breq	.+92     	; 0x2760 <EXTI_u8Int1SetSenseControl+0xaa>
    2704:	3c c0       	rjmp	.+120    	; 0x277e <EXTI_u8Int1SetSenseControl+0xc8>
	case LOW_LEVEL  : CLR_BIT(MCUCR , MCUCR_ISC11);CLR_BIT(MCUCR , MCUCR_ISC10);break ; 
    2706:	a5 e5       	ldi	r26, 0x55	; 85
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e5 e5       	ldi	r30, 0x55	; 85
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	87 7f       	andi	r24, 0xF7	; 247
    2712:	8c 93       	st	X, r24
    2714:	a5 e5       	ldi	r26, 0x55	; 85
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e5 e5       	ldi	r30, 0x55	; 85
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8b 7f       	andi	r24, 0xFB	; 251
    2720:	8c 93       	st	X, r24
    2722:	2f c0       	rjmp	.+94     	; 0x2782 <EXTI_u8Int1SetSenseControl+0xcc>
	case FALLING_EDGE  :SET_BIT(MCUCR , MCUCR_ISC11);CLR_BIT(MCUCR , MCUCR_ISC10);break ;
    2724:	a5 e5       	ldi	r26, 0x55	; 85
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e5 e5       	ldi	r30, 0x55	; 85
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	88 60       	ori	r24, 0x08	; 8
    2730:	8c 93       	st	X, r24
    2732:	a5 e5       	ldi	r26, 0x55	; 85
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e5 e5       	ldi	r30, 0x55	; 85
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8b 7f       	andi	r24, 0xFB	; 251
    273e:	8c 93       	st	X, r24
    2740:	20 c0       	rjmp	.+64     	; 0x2782 <EXTI_u8Int1SetSenseControl+0xcc>
	case ON_CHANGE  :CLR_BIT(MCUCR , MCUCR_ISC11);SET_BIT(MCUCR , MCUCR_ISC10);break ;
    2742:	a5 e5       	ldi	r26, 0x55	; 85
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e5 e5       	ldi	r30, 0x55	; 85
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	87 7f       	andi	r24, 0xF7	; 247
    274e:	8c 93       	st	X, r24
    2750:	a5 e5       	ldi	r26, 0x55	; 85
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e5 e5       	ldi	r30, 0x55	; 85
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	84 60       	ori	r24, 0x04	; 4
    275c:	8c 93       	st	X, r24
    275e:	11 c0       	rjmp	.+34     	; 0x2782 <EXTI_u8Int1SetSenseControl+0xcc>
	case RISING_EDGE  :SET_BIT(MCUCR , MCUCR_ISC11);SET_BIT(MCUCR , MCUCR_ISC10);break ;
    2760:	a5 e5       	ldi	r26, 0x55	; 85
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e5 e5       	ldi	r30, 0x55	; 85
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	88 60       	ori	r24, 0x08	; 8
    276c:	8c 93       	st	X, r24
    276e:	a5 e5       	ldi	r26, 0x55	; 85
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e5 e5       	ldi	r30, 0x55	; 85
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	84 60       	ori	r24, 0x04	; 4
    277a:	8c 93       	st	X, r24
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <EXTI_u8Int1SetSenseControl+0xcc>
	default: Local_u8ErrorState =NOK ;break;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ; 
    2782:	89 81       	ldd	r24, Y+1	; 0x01
}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <EXTI_u8Int2SetSenseControl>:


u8 EXTI_u8Int2SetSenseControl(u8 copy_u8Sense) {
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	00 d0       	rcall	.+0      	; 0x2798 <EXTI_u8Int2SetSenseControl+0x6>
    2798:	00 d0       	rcall	.+0      	; 0x279a <EXTI_u8Int2SetSenseControl+0x8>
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	8a 83       	std	Y+2, r24	; 0x02
	
	u8 Local_u8ErrorState = OK ;
    27a0:	19 82       	std	Y+1, r1	; 0x01

	switch (copy_u8Sense){
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	3c 83       	std	Y+4, r19	; 0x04
    27aa:	2b 83       	std	Y+3, r18	; 0x03
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	83 30       	cpi	r24, 0x03	; 3
    27b2:	91 05       	cpc	r25, r1
    27b4:	31 f0       	breq	.+12     	; 0x27c2 <EXTI_u8Int2SetSenseControl+0x30>
    27b6:	2b 81       	ldd	r18, Y+3	; 0x03
    27b8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ba:	24 30       	cpi	r18, 0x04	; 4
    27bc:	31 05       	cpc	r19, r1
    27be:	49 f0       	breq	.+18     	; 0x27d2 <EXTI_u8Int2SetSenseControl+0x40>
    27c0:	10 c0       	rjmp	.+32     	; 0x27e2 <EXTI_u8Int2SetSenseControl+0x50>
		case FALLING_EDGE  : CLR_BIT(MCUCSR ,MCUCSR_INT2 );break ;
    27c2:	a4 e5       	ldi	r26, 0x54	; 84
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e4 e5       	ldi	r30, 0x54	; 84
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8f 7b       	andi	r24, 0xBF	; 191
    27ce:	8c 93       	st	X, r24
    27d0:	0a c0       	rjmp	.+20     	; 0x27e6 <EXTI_u8Int2SetSenseControl+0x54>
		case RISING_EDGE  :	 SET_BIT(MCUCSR ,MCUCSR_INT2 );break ;
    27d2:	a4 e5       	ldi	r26, 0x54	; 84
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e4 e5       	ldi	r30, 0x54	; 84
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 64       	ori	r24, 0x40	; 64
    27de:	8c 93       	st	X, r24
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <EXTI_u8Int2SetSenseControl+0x54>
		default: Local_u8ErrorState =NOK ;break;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <EXIT_u8IntEnable>:



u8 EXIT_u8IntEnable(u8 copy_u8Int){
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <EXIT_u8IntEnable+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <EXIT_u8IntEnable+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8ErrorState = OK ;
    2804:	19 82       	std	Y+1, r1	; 0x01

		switch (copy_u8Int){
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	3c 83       	std	Y+4, r19	; 0x04
    280e:	2b 83       	std	Y+3, r18	; 0x03
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	82 30       	cpi	r24, 0x02	; 2
    2816:	91 05       	cpc	r25, r1
    2818:	91 f0       	breq	.+36     	; 0x283e <EXIT_u8IntEnable+0x48>
    281a:	2b 81       	ldd	r18, Y+3	; 0x03
    281c:	3c 81       	ldd	r19, Y+4	; 0x04
    281e:	23 30       	cpi	r18, 0x03	; 3
    2820:	31 05       	cpc	r19, r1
    2822:	a9 f0       	breq	.+42     	; 0x284e <EXIT_u8IntEnable+0x58>
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	91 05       	cpc	r25, r1
    282c:	c1 f4       	brne	.+48     	; 0x285e <EXIT_u8IntEnable+0x68>
			case INT0 :SET_BIT(GICR,GICR_INT0);break;
    282e:	ab e5       	ldi	r26, 0x5B	; 91
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	eb e5       	ldi	r30, 0x5B	; 91
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 64       	ori	r24, 0x40	; 64
    283a:	8c 93       	st	X, r24
    283c:	12 c0       	rjmp	.+36     	; 0x2862 <EXIT_u8IntEnable+0x6c>
			case INT1 :SET_BIT(GICR,GICR_INT1);break;
    283e:	ab e5       	ldi	r26, 0x5B	; 91
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	eb e5       	ldi	r30, 0x5B	; 91
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	80 68       	ori	r24, 0x80	; 128
    284a:	8c 93       	st	X, r24
    284c:	0a c0       	rjmp	.+20     	; 0x2862 <EXIT_u8IntEnable+0x6c>
			case INT2 :SET_BIT(GICR,GICR_INT2);break;
    284e:	ab e5       	ldi	r26, 0x5B	; 91
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	eb e5       	ldi	r30, 0x5B	; 91
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	8c 93       	st	X, r24
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <EXIT_u8IntEnable+0x6c>
		    default: Local_u8ErrorState =NOK ;break;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	89 83       	std	Y+1, r24	; 0x01
	
		}
			return Local_u8ErrorState ;
    2862:	89 81       	ldd	r24, Y+1	; 0x01

}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <EXIT_u8IntDisable>:
u8 EXIT_u8IntDisable(u8 copy_u8Int){
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	00 d0       	rcall	.+0      	; 0x2878 <EXIT_u8IntDisable+0x6>
    2878:	00 d0       	rcall	.+0      	; 0x287a <EXIT_u8IntDisable+0x8>
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	8a 83       	std	Y+2, r24	; 0x02
	
			u8 Local_u8ErrorState = OK ;
    2880:	19 82       	std	Y+1, r1	; 0x01

			switch (copy_u8Int){
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	3c 83       	std	Y+4, r19	; 0x04
    288a:	2b 83       	std	Y+3, r18	; 0x03
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	91 05       	cpc	r25, r1
    2894:	91 f0       	breq	.+36     	; 0x28ba <EXIT_u8IntDisable+0x48>
    2896:	2b 81       	ldd	r18, Y+3	; 0x03
    2898:	3c 81       	ldd	r19, Y+4	; 0x04
    289a:	23 30       	cpi	r18, 0x03	; 3
    289c:	31 05       	cpc	r19, r1
    289e:	a9 f0       	breq	.+42     	; 0x28ca <EXIT_u8IntDisable+0x58>
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	81 30       	cpi	r24, 0x01	; 1
    28a6:	91 05       	cpc	r25, r1
    28a8:	c1 f4       	brne	.+48     	; 0x28da <EXIT_u8IntDisable+0x68>
				case INT0 :CLR_BIT(GICR,GICR_INT0);break;
    28aa:	ab e5       	ldi	r26, 0x5B	; 91
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e5       	ldi	r30, 0x5B	; 91
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 7b       	andi	r24, 0xBF	; 191
    28b6:	8c 93       	st	X, r24
    28b8:	12 c0       	rjmp	.+36     	; 0x28de <EXIT_u8IntDisable+0x6c>
				case INT1 :CLR_BIT(GICR,GICR_INT1);break;
    28ba:	ab e5       	ldi	r26, 0x5B	; 91
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	eb e5       	ldi	r30, 0x5B	; 91
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	8f 77       	andi	r24, 0x7F	; 127
    28c6:	8c 93       	st	X, r24
    28c8:	0a c0       	rjmp	.+20     	; 0x28de <EXIT_u8IntDisable+0x6c>
				case INT2 :CLR_BIT(GICR,GICR_INT2);break;
    28ca:	ab e5       	ldi	r26, 0x5B	; 91
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	eb e5       	ldi	r30, 0x5B	; 91
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 7d       	andi	r24, 0xDF	; 223
    28d6:	8c 93       	st	X, r24
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <EXIT_u8IntDisable+0x6c>
				default: Local_u8ErrorState =NOK ;break;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	89 83       	std	Y+1, r24	; 0x01
				
			}
			return Local_u8ErrorState ;
    28de:	89 81       	ldd	r24, Y+1	; 0x01
}
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <EXTI_u8Int0SetCallBack>:




u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func) (void)){
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <EXTI_u8Int0SetCallBack+0x6>
    28f4:	0f 92       	push	r0
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9b 83       	std	Y+3, r25	; 0x03
    28fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    28fe:	19 82       	std	Y+1, r1	; 0x01
if(Copy_pvInt0Func != NULL){
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	39 f0       	breq	.+14     	; 0x2916 <EXTI_u8Int0SetCallBack+0x28>
	EXTI_pvInt0Func = Copy_pvInt0Func ; 
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	9b 81       	ldd	r25, Y+3	; 0x03
    290c:	90 93 b7 03 	sts	0x03B7, r25
    2910:	80 93 b6 03 	sts	0x03B6, r24
    2914:	02 c0       	rjmp	.+4      	; 0x291a <EXTI_u8Int0SetCallBack+0x2c>
}
else {
	Local_u8ErrorState = NULL_POINTER ; 
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	89 83       	std	Y+1, r24	; 0x01
	}
			return Local_u8ErrorState ;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
}
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    2928:	1f 92       	push	r1
    292a:	0f 92       	push	r0
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	0f 92       	push	r0
    2930:	11 24       	eor	r1, r1
    2932:	2f 93       	push	r18
    2934:	3f 93       	push	r19
    2936:	4f 93       	push	r20
    2938:	5f 93       	push	r21
    293a:	6f 93       	push	r22
    293c:	7f 93       	push	r23
    293e:	8f 93       	push	r24
    2940:	9f 93       	push	r25
    2942:	af 93       	push	r26
    2944:	bf 93       	push	r27
    2946:	ef 93       	push	r30
    2948:	ff 93       	push	r31
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func != NULL) {
    2952:	80 91 b6 03 	lds	r24, 0x03B6
    2956:	90 91 b7 03 	lds	r25, 0x03B7
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	29 f0       	breq	.+10     	; 0x2968 <__vector_1+0x40>
	EXTI_pvInt0Func() ; 
    295e:	e0 91 b6 03 	lds	r30, 0x03B6
    2962:	f0 91 b7 03 	lds	r31, 0x03B7
    2966:	09 95       	icall
}
 else {
	 
 }
}
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	ff 91       	pop	r31
    296e:	ef 91       	pop	r30
    2970:	bf 91       	pop	r27
    2972:	af 91       	pop	r26
    2974:	9f 91       	pop	r25
    2976:	8f 91       	pop	r24
    2978:	7f 91       	pop	r23
    297a:	6f 91       	pop	r22
    297c:	5f 91       	pop	r21
    297e:	4f 91       	pop	r20
    2980:	3f 91       	pop	r19
    2982:	2f 91       	pop	r18
    2984:	0f 90       	pop	r0
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	0f 90       	pop	r0
    298a:	1f 90       	pop	r1
    298c:	18 95       	reti

0000298e <EXTI_u8Int1SetCallBack>:



u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func) (void)){
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	00 d0       	rcall	.+0      	; 0x2994 <EXTI_u8Int1SetCallBack+0x6>
    2994:	0f 92       	push	r0
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    299e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func != NULL){
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	39 f0       	breq	.+14     	; 0x29b6 <EXTI_u8Int1SetCallBack+0x28>
		EXTI_pvInt1Func = Copy_pvInt1Func ;
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	90 93 b9 03 	sts	0x03B9, r25
    29b0:	80 93 b8 03 	sts	0x03B8, r24
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <EXTI_u8Int1SetCallBack+0x2c>
	}
	else {
		Local_u8ErrorState = NULL_POINTER ;
    29b6:	82 e0       	ldi	r24, 0x02	; 2
    29b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    29c8:	1f 92       	push	r1
    29ca:	0f 92       	push	r0
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	0f 92       	push	r0
    29d0:	11 24       	eor	r1, r1
    29d2:	2f 93       	push	r18
    29d4:	3f 93       	push	r19
    29d6:	4f 93       	push	r20
    29d8:	5f 93       	push	r21
    29da:	6f 93       	push	r22
    29dc:	7f 93       	push	r23
    29de:	8f 93       	push	r24
    29e0:	9f 93       	push	r25
    29e2:	af 93       	push	r26
    29e4:	bf 93       	push	r27
    29e6:	ef 93       	push	r30
    29e8:	ff 93       	push	r31
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func != NULL) {
    29f2:	80 91 b8 03 	lds	r24, 0x03B8
    29f6:	90 91 b9 03 	lds	r25, 0x03B9
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	29 f0       	breq	.+10     	; 0x2a08 <__vector_2+0x40>
		EXTI_pvInt1Func() ;
    29fe:	e0 91 b8 03 	lds	r30, 0x03B8
    2a02:	f0 91 b9 03 	lds	r31, 0x03B9
    2a06:	09 95       	icall
	}
	else {
		
	}
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	ff 91       	pop	r31
    2a0e:	ef 91       	pop	r30
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	7f 91       	pop	r23
    2a1a:	6f 91       	pop	r22
    2a1c:	5f 91       	pop	r21
    2a1e:	4f 91       	pop	r20
    2a20:	3f 91       	pop	r19
    2a22:	2f 91       	pop	r18
    2a24:	0f 90       	pop	r0
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	0f 90       	pop	r0
    2a2a:	1f 90       	pop	r1
    2a2c:	18 95       	reti

00002a2e <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func) (void)){
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <EXTI_u8Int2SetCallBack+0x6>
    2a34:	0f 92       	push	r0
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	9b 83       	std	Y+3, r25	; 0x03
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    2a3e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func != NULL){
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	39 f0       	breq	.+14     	; 0x2a56 <EXTI_u8Int2SetCallBack+0x28>
		EXTI_pvInt2Func = Copy_pvInt2Func ;
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	90 93 bb 03 	sts	0x03BB, r25
    2a50:	80 93 ba 03 	sts	0x03BA, r24
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <EXTI_u8Int2SetCallBack+0x2c>
	}
	else {
		Local_u8ErrorState = NULL_POINTER ;
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    2a68:	1f 92       	push	r1
    2a6a:	0f 92       	push	r0
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	0f 92       	push	r0
    2a70:	11 24       	eor	r1, r1
    2a72:	2f 93       	push	r18
    2a74:	3f 93       	push	r19
    2a76:	4f 93       	push	r20
    2a78:	5f 93       	push	r21
    2a7a:	6f 93       	push	r22
    2a7c:	7f 93       	push	r23
    2a7e:	8f 93       	push	r24
    2a80:	9f 93       	push	r25
    2a82:	af 93       	push	r26
    2a84:	bf 93       	push	r27
    2a86:	ef 93       	push	r30
    2a88:	ff 93       	push	r31
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func != NULL) {
    2a92:	80 91 ba 03 	lds	r24, 0x03BA
    2a96:	90 91 bb 03 	lds	r25, 0x03BB
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	29 f0       	breq	.+10     	; 0x2aa8 <__vector_3+0x40>
		EXTI_pvInt2Func() ;
    2a9e:	e0 91 ba 03 	lds	r30, 0x03BA
    2aa2:	f0 91 bb 03 	lds	r31, 0x03BB
    2aa6:	09 95       	icall
	}
	else {
		
	}
}
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	ff 91       	pop	r31
    2aae:	ef 91       	pop	r30
    2ab0:	bf 91       	pop	r27
    2ab2:	af 91       	pop	r26
    2ab4:	9f 91       	pop	r25
    2ab6:	8f 91       	pop	r24
    2ab8:	7f 91       	pop	r23
    2aba:	6f 91       	pop	r22
    2abc:	5f 91       	pop	r21
    2abe:	4f 91       	pop	r20
    2ac0:	3f 91       	pop	r19
    2ac2:	2f 91       	pop	r18
    2ac4:	0f 90       	pop	r0
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	0f 90       	pop	r0
    2aca:	1f 90       	pop	r1
    2acc:	18 95       	reti

00002ace <GIE_voidEnable>:
#include "BIT_math.h"
#include "GIE_register.h"
#include "GIE_interface.h"


void GIE_voidEnable(void){
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
	
	
	SET_BIT(SREG,SREG_I); 
    2ad6:	af e5       	ldi	r26, 0x5F	; 95
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ef e5       	ldi	r30, 0x5F	; 95
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	80 68       	ori	r24, 0x80	; 128
    2ae2:	8c 93       	st	X, r24
	
}
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <GIE_voidDisable>:


void GIE_voidDisable(void){
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,SREG_I); 
    2af2:	af e5       	ldi	r26, 0x5F	; 95
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ef e5       	ldi	r30, 0x5F	; 95
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	8f 77       	andi	r24, 0x7F	; 127
    2afe:	8c 93       	st	X, r24
	
}
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <KEYPAD_u8GetPressKEY>:
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_privite.h"


u8 KEYPAD_u8GetPressKEY(void){
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <KEYPAD_u8GetPressKEY+0x6>
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <KEYPAD_u8GetPressKEY+0x8>
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
	
	u8 Local_u8PressKey= KEYPAD_NO_PRESSED_KEY  ,Local_u8ColumeIndex , Local_u8RowIndex  , Local_u8PinState ; 
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
    2b16:	8b 83       	std	Y+3, r24	; 0x03
static 	u8 Local_u8KAYPADArr[4][4]=KPD_ARR_VAL ;  
static 	u8 Local_u8KEYPADColumeArr [COLUME_NUM] = {KEYPAD_COLUME0_PIN,KEYPAD_COLUME1_PIN,KEYPAD_COLUME2_PIN,KEYPAD_COLUME3_PIN} ;
static 	u8 Local_u8KEYPADRowArr [ROW_NUM] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
		
		
	for (Local_u8ColumeIndex =0 ; Local_u8ColumeIndex<COLUME_NUM;Local_u8ColumeIndex++)	{
    2b18:	1a 82       	std	Y+2, r1	; 0x02
    2b1a:	5e c0       	rjmp	.+188    	; 0x2bd8 <KEYPAD_u8GetPressKEY+0xd2>
		
		/* Active Current column */ 
		DIO_u8SetPinValue(KEY_PORT,Local_u8KEYPADColumeArr[Local_u8ColumeIndex] , DIO_u8PIN_LOW) ;
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	fc 01       	movw	r30, r24
    2b24:	ea 56       	subi	r30, 0x6A	; 106
    2b26:	fc 4f       	sbci	r31, 0xFC	; 252
    2b28:	90 81       	ld	r25, Z
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	69 2f       	mov	r22, r25
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		
		for(Local_u8RowIndex =0; Local_u8RowIndex < ROW_NUM ; Local_u8RowIndex++ )
    2b34:	19 82       	std	Y+1, r1	; 0x01
    2b36:	3d c0       	rjmp	.+122    	; 0x2bb2 <KEYPAD_u8GetPressKEY+0xac>
		{
			/* Read current row */ 
			DIO_u8GetPinValue(KEY_PORT,Local_u8KEYPADRowArr[Local_u8RowIndex] ,&Local_u8PinState) ;
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	88 2f       	mov	r24, r24
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	fc 01       	movw	r30, r24
    2b40:	ee 56       	subi	r30, 0x6E	; 110
    2b42:	fc 4f       	sbci	r31, 0xFC	; 252
    2b44:	90 81       	ld	r25, Z
    2b46:	9e 01       	movw	r18, r28
    2b48:	2c 5f       	subi	r18, 0xFC	; 252
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	69 2f       	mov	r22, r25
    2b50:	a9 01       	movw	r20, r18
    2b52:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_u8GetPinValue>
			
			/* check switch */
			if (DIO_u8PIN_LOW == Local_u8PinState ) {
    2b56:	8c 81       	ldd	r24, Y+4	; 0x04
    2b58:	88 23       	and	r24, r24
    2b5a:	41 f5       	brne	.+80     	; 0x2bac <KEYPAD_u8GetPressKEY+0xa6>
				
				Local_u8PressKey = Local_u8KAYPADArr[Local_u8RowIndex][Local_u8ColumeIndex] ;
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	48 2f       	mov	r20, r24
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	ca 01       	movw	r24, r20
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	82 0f       	add	r24, r18
    2b74:	93 1f       	adc	r25, r19
    2b76:	fc 01       	movw	r30, r24
    2b78:	e6 56       	subi	r30, 0x66	; 102
    2b7a:	fc 4f       	sbci	r31, 0xFC	; 252
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <KEYPAD_u8GetPressKEY+0x9a>
				 
				 while (DIO_u8PIN_LOW == Local_u8PinState ){
					 
					DIO_u8GetPinValue(KEY_PORT,Local_u8KEYPADRowArr[Local_u8RowIndex] ,&Local_u8PinState) ;
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	fc 01       	movw	r30, r24
    2b8a:	ee 56       	subi	r30, 0x6E	; 110
    2b8c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b8e:	90 81       	ld	r25, Z
    2b90:	9e 01       	movw	r18, r28
    2b92:	2c 5f       	subi	r18, 0xFC	; 252
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	69 2f       	mov	r22, r25
    2b9a:	a9 01       	movw	r20, r18
    2b9c:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_u8GetPinValue>
			/* check switch */
			if (DIO_u8PIN_LOW == Local_u8PinState ) {
				
				Local_u8PressKey = Local_u8KAYPADArr[Local_u8RowIndex][Local_u8ColumeIndex] ;
				 
				 while (DIO_u8PIN_LOW == Local_u8PinState ){
    2ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba2:	88 23       	and	r24, r24
    2ba4:	71 f3       	breq	.-36     	; 0x2b82 <KEYPAD_u8GetPressKEY+0x7c>
					DIO_u8GetPinValue(KEY_PORT,Local_u8KEYPADRowArr[Local_u8RowIndex] ,&Local_u8PinState) ;

					 
				 }
				
								 return Local_u8PressKey ;
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	1c c0       	rjmp	.+56     	; 0x2be4 <KEYPAD_u8GetPressKEY+0xde>
	for (Local_u8ColumeIndex =0 ; Local_u8ColumeIndex<COLUME_NUM;Local_u8ColumeIndex++)	{
		
		/* Active Current column */ 
		DIO_u8SetPinValue(KEY_PORT,Local_u8KEYPADColumeArr[Local_u8ColumeIndex] , DIO_u8PIN_LOW) ;
		
		for(Local_u8RowIndex =0; Local_u8RowIndex < ROW_NUM ; Local_u8RowIndex++ )
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	8f 5f       	subi	r24, 0xFF	; 255
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	84 30       	cpi	r24, 0x04	; 4
    2bb6:	08 f4       	brcc	.+2      	; 0x2bba <KEYPAD_u8GetPressKEY+0xb4>
    2bb8:	bf cf       	rjmp	.-130    	; 0x2b38 <KEYPAD_u8GetPressKEY+0x32>
			}
			
		}
		/*deactive */ 
		
				DIO_u8SetPinValue(KEY_PORT,Local_u8KEYPADColumeArr[Local_u8ColumeIndex] , DIO_u8PIN_HIGH) ;
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	ea 56       	subi	r30, 0x6A	; 106
    2bc4:	fc 4f       	sbci	r31, 0xFC	; 252
    2bc6:	90 81       	ld	r25, Z
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	69 2f       	mov	r22, r25
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
static 	u8 Local_u8KAYPADArr[4][4]=KPD_ARR_VAL ;  
static 	u8 Local_u8KEYPADColumeArr [COLUME_NUM] = {KEYPAD_COLUME0_PIN,KEYPAD_COLUME1_PIN,KEYPAD_COLUME2_PIN,KEYPAD_COLUME3_PIN} ;
static 	u8 Local_u8KEYPADRowArr [ROW_NUM] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
		
		
	for (Local_u8ColumeIndex =0 ; Local_u8ColumeIndex<COLUME_NUM;Local_u8ColumeIndex++)	{
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	8a 83       	std	Y+2, r24	; 0x02
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	84 30       	cpi	r24, 0x04	; 4
    2bdc:	08 f4       	brcc	.+2      	; 0x2be0 <KEYPAD_u8GetPressKEY+0xda>
    2bde:	9e cf       	rjmp	.-196    	; 0x2b1c <KEYPAD_u8GetPressKEY+0x16>
	}
	
	
	
	
	return Local_u8PressKey ;
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
	
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <LDR_u16GetAnalogVolt>:
#include "STD_type.h"
#include "LDR.h"


u16 LDR_u16GetAnalogVolt(u8 ADC_u8GetChannelReading)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	0f 92       	push	r0
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	89 83       	std	Y+1, r24	; 0x01


    #if ADC_u8RESOLUTION == EIGHT_BITS

         return (u16)(((u32)ADC_u8GetChannelReading * 5000UL) / 256UL);
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	a0 e0       	ldi	r26, 0x00	; 0
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	28 e8       	ldi	r18, 0x88	; 136
    2c0e:	33 e1       	ldi	r19, 0x13	; 19
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 10 24 	call	0x4820	; 0x4820 <__mulsi3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	89 2f       	mov	r24, r25
    2c22:	9a 2f       	mov	r25, r26
    2c24:	ab 2f       	mov	r26, r27
    2c26:	bb 27       	eor	r27, r27
        #error Wrong ADC_u8RESOLUTION confegration option 

    #endif


}
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <LDR_u8GetAnalogVolt>:
#include "LDR_config.h"
#include "LDR_interface.h"


u8 LDR_u8GetAnalogVolt(u8 Copy_u8DigitalReading)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <LDR_u8GetAnalogVolt+0x6>
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8AnalogVolt;


	Local_u8AnalogVolt = (u8) Copy_u8DigitalReading;
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8AnalogVolt;
    2c40:	89 81       	ldd	r24, Y+1	; 0x01


}
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <LM35_u8GetTempreature>:

#include "STD_type.h"
#include "LM35_interface.h"

u16 LM35_u8GetTempreature(u16 Copy_u8DigitalReading)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <LM35_u8GetTempreature+0x6>
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <LM35_u8GetTempreature+0x8>
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03

	u16 temp_celsius ;
    temp_celsius = ((u32)Copy_u8DigitalReading * 5000ul) / (1024.0 * 10.0);
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	cc 01       	movw	r24, r24
    2c62:	a0 e0       	ldi	r26, 0x00	; 0
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	28 e8       	ldi	r18, 0x88	; 136
    2c68:	33 e1       	ldi	r19, 0x13	; 19
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 10 24 	call	0x4820	; 0x4820 <__mulsi3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e2       	ldi	r20, 0x20	; 32
    2c90:	56 e4       	ldi	r21, 0x46	; 70
    2c92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	bc 01       	movw	r22, r24
    2c9c:	cd 01       	movw	r24, r26
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    return temp_celsius;
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02

}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <Map>:
#include "STD_type.h"
#include "BIT_math.h"
#include "MAP.h"

s32 Map(s32 InputMin,s32 InputMax,s32 OutputMin,s32 OutputMax,s32 InputValue)
{
    2cbc:	af 92       	push	r10
    2cbe:	bf 92       	push	r11
    2cc0:	cf 92       	push	r12
    2cc2:	df 92       	push	r13
    2cc4:	ef 92       	push	r14
    2cc6:	ff 92       	push	r15
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	60 97       	sbiw	r28, 0x10	; 16
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	69 83       	std	Y+1, r22	; 0x01
    2ce2:	7a 83       	std	Y+2, r23	; 0x02
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	2d 83       	std	Y+5, r18	; 0x05
    2cea:	3e 83       	std	Y+6, r19	; 0x06
    2cec:	4f 83       	std	Y+7, r20	; 0x07
    2cee:	58 87       	std	Y+8, r21	; 0x08
    2cf0:	e9 86       	std	Y+9, r14	; 0x09
    2cf2:	fa 86       	std	Y+10, r15	; 0x0a
    2cf4:	0b 87       	std	Y+11, r16	; 0x0b
    2cf6:	1c 87       	std	Y+12, r17	; 0x0c
    2cf8:	ad 86       	std	Y+13, r10	; 0x0d
    2cfa:	be 86       	std	Y+14, r11	; 0x0e
    2cfc:	cf 86       	std	Y+15, r12	; 0x0f
    2cfe:	d8 8a       	std	Y+16, r13	; 0x10

    return (((OutputMax - OutputMin) * (InputValue - InputMin)) / (InputMax - InputMin)) + OutputMin ;
    2d00:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d02:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d04:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d06:	58 89       	ldd	r21, Y+16	; 0x10
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d0e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d10:	79 01       	movw	r14, r18
    2d12:	8a 01       	movw	r16, r20
    2d14:	e8 1a       	sub	r14, r24
    2d16:	f9 0a       	sbc	r15, r25
    2d18:	0a 0b       	sbc	r16, r26
    2d1a:	1b 0b       	sbc	r17, r27
    2d1c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d1e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d20:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d22:	58 a1       	ldd	r21, Y+32	; 0x20
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	ab 81       	ldd	r26, Y+3	; 0x03
    2d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    2d2c:	28 1b       	sub	r18, r24
    2d2e:	39 0b       	sbc	r19, r25
    2d30:	4a 0b       	sbc	r20, r26
    2d32:	5b 0b       	sbc	r21, r27
    2d34:	c8 01       	movw	r24, r16
    2d36:	b7 01       	movw	r22, r14
    2d38:	0e 94 10 24 	call	0x4820	; 0x4820 <__mulsi3>
    2d3c:	7b 01       	movw	r14, r22
    2d3e:	8c 01       	movw	r16, r24
    2d40:	2d 81       	ldd	r18, Y+5	; 0x05
    2d42:	3e 81       	ldd	r19, Y+6	; 0x06
    2d44:	4f 81       	ldd	r20, Y+7	; 0x07
    2d46:	58 85       	ldd	r21, Y+8	; 0x08
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d50:	28 1b       	sub	r18, r24
    2d52:	39 0b       	sbc	r19, r25
    2d54:	4a 0b       	sbc	r20, r26
    2d56:	5b 0b       	sbc	r21, r27
    2d58:	c8 01       	movw	r24, r16
    2d5a:	b7 01       	movw	r22, r14
    2d5c:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__divmodsi4>
    2d60:	da 01       	movw	r26, r20
    2d62:	c9 01       	movw	r24, r18
    2d64:	9c 01       	movw	r18, r24
    2d66:	ad 01       	movw	r20, r26
    2d68:	89 85       	ldd	r24, Y+9	; 0x09
    2d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d70:	82 0f       	add	r24, r18
    2d72:	93 1f       	adc	r25, r19
    2d74:	a4 1f       	adc	r26, r20
    2d76:	b5 1f       	adc	r27, r21
}
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	60 96       	adiw	r28, 0x10	; 16
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
    2d98:	bf 90       	pop	r11
    2d9a:	af 90       	pop	r10
    2d9c:	08 95       	ret

00002d9e <PORT_voidInit>:
#include "PORT_privite.h"
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_voidInit(void){
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
	
	DDRA =PORTA_DIR ; 
    2da6:	ea e3       	ldi	r30, 0x3A	; 58
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	8e e7       	ldi	r24, 0x7E	; 126
    2dac:	80 83       	st	Z, r24
	DDRB =PORTB_DIR ;
    2dae:	e7 e3       	ldi	r30, 0x37	; 55
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	8b e0       	ldi	r24, 0x0B	; 11
    2db4:	80 83       	st	Z, r24
	DDRC =PORTC_DIR ;
    2db6:	e4 e3       	ldi	r30, 0x34	; 52
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	8f ef       	ldi	r24, 0xFF	; 255
    2dbc:	80 83       	st	Z, r24
	DDRD =PORTD_DIR ;
    2dbe:	e1 e3       	ldi	r30, 0x31	; 49
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	8e e3       	ldi	r24, 0x3E	; 62
    2dc4:	80 83       	st	Z, r24
	
	PORTA = PORTA_INT ;
    2dc6:	eb e3       	ldi	r30, 0x3B	; 59
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	10 82       	st	Z, r1
	PORTB = PORTB_INT ;
    2dcc:	e8 e3       	ldi	r30, 0x38	; 56
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 ef       	ldi	r24, 0xF0	; 240
    2dd2:	80 83       	st	Z, r24
	PORTC = PORTC_INT ;
    2dd4:	e5 e3       	ldi	r30, 0x35	; 53
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	10 82       	st	Z, r1
	PORTD = PORTD_INT ;
    2dda:	e2 e3       	ldi	r30, 0x32	; 50
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 e7       	ldi	r24, 0x70	; 112
    2de0:	80 83       	st	Z, r24

}
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <TIMER1_voidInit>:
static void (* TIMERS_pvCallBackFuncArr [8])(void) = {NULL} ;



void TIMER1_voidInit(void)
{
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    /* Conigure fast pwm mode */

    SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2df0:	af e4       	ldi	r26, 0x4F	; 79
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ef e4       	ldi	r30, 0x4F	; 79
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 68       	ori	r24, 0x80	; 128
    2dfc:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2dfe:	af e4       	ldi	r26, 0x4F	; 79
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	ef e4       	ldi	r30, 0x4F	; 79
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	8f 7b       	andi	r24, 0xBF	; 191
    2e0a:	8c 93       	st	X, r24


    /* configure waveform generation mode */

    CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2e0c:	af e4       	ldi	r26, 0x4F	; 79
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	ef e4       	ldi	r30, 0x4F	; 79
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	8e 7f       	andi	r24, 0xFE	; 254
    2e18:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,TCCR1A_WGM11);
    2e1a:	af e4       	ldi	r26, 0x4F	; 79
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	ef e4       	ldi	r30, 0x4F	; 79
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	82 60       	ori	r24, 0x02	; 2
    2e26:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,TCCR1B_WGM12);
    2e28:	ae e4       	ldi	r26, 0x4E	; 78
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	ee e4       	ldi	r30, 0x4E	; 78
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	88 60       	ori	r24, 0x08	; 8
    2e34:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,TCCR1B_WGM13);
    2e36:	ae e4       	ldi	r26, 0x4E	; 78
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	ee e4       	ldi	r30, 0x4E	; 78
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	80 61       	ori	r24, 0x10	; 16
    2e42:	8c 93       	st	X, r24

    /* configure prescaler */

    TCCR1B &= PRESCALER_MASK ;
    2e44:	ae e4       	ldi	r26, 0x4E	; 78
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	ee e4       	ldi	r30, 0x4E	; 78
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	88 7f       	andi	r24, 0xF8	; 248
    2e50:	8c 93       	st	X, r24
    TCCR1B |= DIVBY_8;
    2e52:	ae e4       	ldi	r26, 0x4E	; 78
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ee e4       	ldi	r30, 0x4E	; 78
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	82 60       	ori	r24, 0x02	; 2
    2e5e:	8c 93       	st	X, r24

    /* SET top value */

    ICR1 = TIMER1_TOP_VALUE ;
    2e60:	e6 e4       	ldi	r30, 0x46	; 70
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 e4       	ldi	r24, 0x40	; 64
    2e66:	9c e9       	ldi	r25, 0x9C	; 156
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24





}
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <TIMER1_voidSetCompValue>:


void TIMER1_voidSetCompValue(u16 Copy_u16Value)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <TIMER1_voidSetCompValue+0x6>
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	9a 83       	std	Y+2, r25	; 0x02
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
    2e80:	ea e4       	ldi	r30, 0x4A	; 74
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	9a 81       	ldd	r25, Y+2	; 0x02
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
}
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <TIMER1_voidSetTimerVal>:


void TIMER1_voidSetTimerVal(u16 Copy_u16Value)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <TIMER1_voidSetTimerVal+0x6>
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    2ea4:	ec e4       	ldi	r30, 0x4C	; 76
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	80 83       	st	Z, r24
}
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <TIMER1_u16GetTimerVal>:

u16 TIMER1_u16GetTimerVal(void)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    2ec2:	ec e4       	ldi	r30, 0x4C	; 76
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
}
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <ICU_voidInit>:

void ICU_voidInit(void)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62



    /* Timer1 Normal mode */

    CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2ed8:	af e4       	ldi	r26, 0x4F	; 79
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	ef e4       	ldi	r30, 0x4F	; 79
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8e 7f       	andi	r24, 0xFE	; 254
    2ee4:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2ee6:	af e4       	ldi	r26, 0x4F	; 79
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	ef e4       	ldi	r30, 0x4F	; 79
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8d 7f       	andi	r24, 0xFD	; 253
    2ef2:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2ef4:	ae e4       	ldi	r26, 0x4E	; 78
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	ee e4       	ldi	r30, 0x4E	; 78
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	87 7f       	andi	r24, 0xF7	; 247
    2f00:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2f02:	ae e4       	ldi	r26, 0x4E	; 78
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	ee e4       	ldi	r30, 0x4E	; 78
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	8f 7e       	andi	r24, 0xEF	; 239
    2f0e:	8c 93       	st	X, r24
   


    /* configure prescaler */

    TCCR1B &= PRESCALER_MASK ;
    2f10:	ae e4       	ldi	r26, 0x4E	; 78
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ee e4       	ldi	r30, 0x4E	; 78
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 7f       	andi	r24, 0xF8	; 248
    2f1c:	8c 93       	st	X, r24
    TCCR1B |= TIMER_CLOCK;
    2f1e:	ae e4       	ldi	r26, 0x4E	; 78
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	ee e4       	ldi	r30, 0x4E	; 78
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	82 60       	ori	r24, 0x02	; 2
    2f2a:	8c 93       	st	X, r24
 

#if ICU_u8_TRIGGER_SRC == RISSING_EDGE


    SET_BIT(TCCR1B,TCCR1B_ICES1);
    2f2c:	ae e4       	ldi	r26, 0x4E	; 78
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	ee e4       	ldi	r30, 0x4E	; 78
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	80 64       	ori	r24, 0x40	; 64
    2f38:	8c 93       	st	X, r24
    /* Enable Timer 1 OVF INT*/
   // SET_BIT(TIMSK,TIMSK_TOIE1);


#if ICU_u8_INT_INIT_STATE == ENABLE
    SET_BIT(TIMSK,TIMSK_TICIE1);
    2f3a:	a9 e5       	ldi	r26, 0x59	; 89
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e9 e5       	ldi	r30, 0x59	; 89
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	80 62       	ori	r24, 0x20	; 32
    2f46:	8c 93       	st	X, r24
#else 
#error wrong ICU_u8_INT_INIT_STATE CFG
#endif


}
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <ICU_voidSetTriggerSrc>:


u8 ICU_voidSetTriggerSrc(u8 Copy_u8TriggerSrc)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <ICU_voidSetTriggerSrc+0x6>
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8ErrorState = OK ;
    2f5a:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8TriggerSrc == FALLING_EDGE )
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	81 30       	cpi	r24, 0x01	; 1
    2f60:	41 f4       	brne	.+16     	; 0x2f72 <ICU_voidSetTriggerSrc+0x24>
    {
        CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2f62:	ae e4       	ldi	r26, 0x4E	; 78
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	ee e4       	ldi	r30, 0x4E	; 78
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8f 7b       	andi	r24, 0xBF	; 191
    2f6e:	8c 93       	st	X, r24
    2f70:	0d c0       	rjmp	.+26     	; 0x2f8c <ICU_voidSetTriggerSrc+0x3e>
    }
    else if (Copy_u8TriggerSrc == RISSING_EDGE)
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	82 30       	cpi	r24, 0x02	; 2
    2f76:	41 f4       	brne	.+16     	; 0x2f88 <ICU_voidSetTriggerSrc+0x3a>
    {
        SET_BIT(TCCR1B,TCCR1B_ICES1);
    2f78:	ae e4       	ldi	r26, 0x4E	; 78
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	ee e4       	ldi	r30, 0x4E	; 78
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	80 64       	ori	r24, 0x40	; 64
    2f84:	8c 93       	st	X, r24
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <ICU_voidSetTriggerSrc+0x3e>
    }
    else
    {
        Local_u8ErrorState = NOK;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_u8ErrorState ;
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <ICU_u32GetVal>:

u32 ICU_u32GetVal(void)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    return (ICR1);
    2fa0:	e6 e4       	ldi	r30, 0x46	; 70
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	cc 01       	movw	r24, r24
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
}
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <ICU_voidIntEnable>:



void ICU_voidIntEnable(void)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62

    SET_BIT(TIMSK,TIMSK_TICIE1);
    2fc0:	a9 e5       	ldi	r26, 0x59	; 89
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e9 e5       	ldi	r30, 0x59	; 89
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	80 62       	ori	r24, 0x20	; 32
    2fcc:	8c 93       	st	X, r24

}
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <ICU_voidIntDisable>:
void ICU_voidIntDisable(void)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62

    CLR_BIT(TIMSK,TIMSK_TICIE1);
    2fdc:	a9 e5       	ldi	r26, 0x59	; 89
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e9 e5       	ldi	r30, 0x59	; 89
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	8f 7d       	andi	r24, 0xDF	; 223
    2fe8:	8c 93       	st	X, r24
}
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <TIMERS_u8SetCallBack>:


u8 TIMERS_u8SetCallBack( TIMERS_Int_Src_t Copy_u8TimerIntSource ,  void (* Copy_pvCallBackFunction )(void) )
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <TIMERS_u8SetCallBack+0x6>
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <TIMERS_u8SetCallBack+0x8>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
    2ffe:	7c 83       	std	Y+4, r23	; 0x04
    3000:	6b 83       	std	Y+3, r22	; 0x03

    u8 LOCAL_u8ErrorState = OK ;
    3002:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pvCallBackFunction != NULL)
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f0       	breq	.+26     	; 0x3026 <TIMERS_u8SetCallBack+0x36>
    {
       TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource]= Copy_pvCallBackFunction ;
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	88 2f       	mov	r24, r24
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	fc 01       	movw	r30, r24
    3018:	e4 54       	subi	r30, 0x44	; 68
    301a:	fc 4f       	sbci	r31, 0xFC	; 252
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
    3024:	02 c0       	rjmp	.+4      	; 0x302a <TIMERS_u8SetCallBack+0x3a>
    }
    else
    {
        LOCAL_u8ErrorState = NOK ;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	89 83       	std	Y+1, r24	; 0x01





    return LOCAL_u8ErrorState ;
    302a:	89 81       	ldd	r24, Y+1	; 0x01

}
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	08 95       	ret

0000303a <TIMER0_voidInit>:


void TIMER0_voidInit(void)
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62

    /* Waveform generation mode : Fast PWM */

    SET_BIT(TCCR0,TCCR0_WGM00);
    3042:	a3 e5       	ldi	r26, 0x53	; 83
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e3 e5       	ldi	r30, 0x53	; 83
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	80 64       	ori	r24, 0x40	; 64
    304e:	8c 93       	st	X, r24
    SET_BIT(TCCR0,TCCR0_WGM01);
    3050:	a3 e5       	ldi	r26, 0x53	; 83
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	e3 e5       	ldi	r30, 0x53	; 83
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	88 60       	ori	r24, 0x08	; 8
    305c:	8c 93       	st	X, r24


    /* Compare match output mode */

    CLR_BIT(TCCR0,TCCR0_COM00);
    305e:	a3 e5       	ldi	r26, 0x53	; 83
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e3 e5       	ldi	r30, 0x53	; 83
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	8f 7e       	andi	r24, 0xEF	; 239
    306a:	8c 93       	st	X, r24
    SET_BIT(TCCR0,TCCR0_COM01);
    306c:	a3 e5       	ldi	r26, 0x53	; 83
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e3 e5       	ldi	r30, 0x53	; 83
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	80 62       	ori	r24, 0x20	; 32
    3078:	8c 93       	st	X, r24


    /* Set prescaler */

    TCCR0 &= PRESCALER_MASK;
    307a:	a3 e5       	ldi	r26, 0x53	; 83
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e3 e5       	ldi	r30, 0x53	; 83
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	88 7f       	andi	r24, 0xF8	; 248
    3086:	8c 93       	st	X, r24
    TCCR0 |= TIMER_CLOCK;
    3088:	a3 e5       	ldi	r26, 0x53	; 83
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e3 e5       	ldi	r30, 0x53	; 83
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	82 60       	ori	r24, 0x02	; 2
    3094:	8c 93       	st	X, r24
    // SET_BIT(TIMSK,TIMSK_OCIE0);




}
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <TIMER0_voidPWMDisable>:
void TIMER0_voidPWMDisable(void)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62

    CLR_BIT(TCCR0,TCCR0_COM00);
    30a4:	a3 e5       	ldi	r26, 0x53	; 83
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e3 e5       	ldi	r30, 0x53	; 83
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	8f 7e       	andi	r24, 0xEF	; 239
    30b0:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,TCCR0_COM01);
    30b2:	a3 e5       	ldi	r26, 0x53	; 83
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e3 e5       	ldi	r30, 0x53	; 83
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	8f 7d       	andi	r24, 0xDF	; 223
    30be:	8c 93       	st	X, r24
}
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <TIMER0_voidSetCompValue>:


void TIMER0_voidSetCompValue(u8 Copy_u8Value)
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	0f 92       	push	r0
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_u8Value ;
    30d2:	ec e5       	ldi	r30, 0x5C	; 92
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	80 83       	st	Z, r24
}
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <USART_VidInit>:
 * @brief A function to initialize USART.
 * @param void
 * @return void
 */
void USART_VidInit()
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
#if (USART_MODE == USART_NORMAL_MODE)

    UBRRL =  UBRR_Value;
    30ea:	e9 e2       	ldi	r30, 0x29	; 41
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	83 e3       	ldi	r24, 0x33	; 51
    30f0:	80 83       	st	Z, r24
    UBRRH = (UBRR_Value >> 8);
    30f2:	e0 e4       	ldi	r30, 0x40	; 64
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	10 82       	st	Z, r1
        SET_BIT(UCSRC, UCSRC_UPM0);
    }

    else if (USART_PARITY == USART_NO_PARITY)
    {
        SET_BIT(UCSRC, UCSRC_URSEL);
    30f8:	a0 e4       	ldi	r26, 0x40	; 64
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e0 e4       	ldi	r30, 0x40	; 64
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	80 68       	ori	r24, 0x80	; 128
    3104:	8c 93       	st	X, r24
        CLR_BIT(UCSRC, UCSRC_UPM1);
    3106:	a0 e4       	ldi	r26, 0x40	; 64
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e0 e4       	ldi	r30, 0x40	; 64
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	8f 7d       	andi	r24, 0xDF	; 223
    3112:	8c 93       	st	X, r24
        CLR_BIT(UCSRC, UCSRC_UPM0);
    3114:	a0 e4       	ldi	r26, 0x40	; 64
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e0 e4       	ldi	r30, 0x40	; 64
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	8f 7e       	andi	r24, 0xEF	; 239
    3120:	8c 93       	st	X, r24
        SET_BIT(UCSRC, UCSRC_USBS);
    }

    else if (USART_NO_OF_STP_BITS == USART_ONE_BIT)
    {
        SET_BIT(UCSRC, UCSRC_URSEL);
    3122:	a0 e4       	ldi	r26, 0x40	; 64
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e0 e4       	ldi	r30, 0x40	; 64
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	80 68       	ori	r24, 0x80	; 128
    312e:	8c 93       	st	X, r24
        CLR_BIT(UCSRC, UCSRC_USBS);
    3130:	a0 e4       	ldi	r26, 0x40	; 64
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e0 e4       	ldi	r30, 0x40	; 64
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	87 7f       	andi	r24, 0xF7	; 247
    313c:	8c 93       	st	X, r24
        SET_BIT(UCSRC, UCSRC_UCSZ1);
        CLR_BIT(UCSRB, UCSRB_UCSZ2);
        break;

    case USART_EIGHT_BITS:
        SET_BIT(UCSRC, UCSRC_URSEL);
    313e:	a0 e4       	ldi	r26, 0x40	; 64
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e0 e4       	ldi	r30, 0x40	; 64
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	80 68       	ori	r24, 0x80	; 128
    314a:	8c 93       	st	X, r24
        SET_BIT(UCSRC, UCSRC_UCSZ0);
    314c:	a0 e4       	ldi	r26, 0x40	; 64
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	e0 e4       	ldi	r30, 0x40	; 64
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	82 60       	ori	r24, 0x02	; 2
    3158:	8c 93       	st	X, r24
        SET_BIT(UCSRC, UCSRC_UCSZ1);
    315a:	a0 e4       	ldi	r26, 0x40	; 64
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e0 e4       	ldi	r30, 0x40	; 64
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	84 60       	ori	r24, 0x04	; 4
    3166:	8c 93       	st	X, r24
        CLR_BIT(UCSRB, UCSRB_UCSZ2);
    3168:	aa e2       	ldi	r26, 0x2A	; 42
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	ea e2       	ldi	r30, 0x2A	; 42
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8b 7f       	andi	r24, 0xFB	; 251
    3174:	8c 93       	st	X, r24
        SET_BIT(UCSRB, UCSRB_UCSZ2);
        break;
    }
    if (USART_TX_STATE == USART_ENABLE)
    {
        SET_BIT(UCSRB, UCSRB_TXEN);
    3176:	aa e2       	ldi	r26, 0x2A	; 42
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ea e2       	ldi	r30, 0x2A	; 42
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	88 60       	ori	r24, 0x08	; 8
    3182:	8c 93       	st	X, r24
    }

    /* Checking the receiver state */
    if (USART_RX_STATE == USART_ENABLE)
    {
        SET_BIT(UCSRB, UCSRB_RXEN);
    3184:	aa e2       	ldi	r26, 0x2A	; 42
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	ea e2       	ldi	r30, 0x2A	; 42
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	80 61       	ori	r24, 0x10	; 16
    3190:	8c 93       	st	X, r24
    {
        SET_BIT(UCSRB, UCSRB_RXEN);
    }

#endif
}
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <USART_u8SendByte>:
 * @brief A function to send a byte using USART.
 * @param Copy_u8Data The data to be sent.
 * @return u8 The status of the function.
 */
  u8 USART_u8SendByte(u8 Copy_u8Data)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <USART_u8SendByte+0x6>
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <USART_u8SendByte+0x8>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	8c 83       	std	Y+4, r24	; 0x04
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = OK;
    31a6:	1b 82       	std	Y+3, r1	; 0x03

    /* Local variable to hold the Timeout */
    u16 Local_u16TimeOut = 0;
    31a8:	1a 82       	std	Y+2, r1	; 0x02
    31aa:	19 82       	std	Y+1, r1	; 0x01

    /* Put data into buffer, sends the data */
    UDR = Copy_u8Data;
    31ac:	ec e2       	ldi	r30, 0x2C	; 44
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	8c 81       	ldd	r24, Y+4	; 0x04
    31b2:	80 83       	st	Z, r24
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <USART_u8SendByte+0x28>

    /* Wait for empty transmit buffer */
    while ((GET_BIT(UCSRA, UCSRA_UDRE) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
    {
        Local_u16TimeOut++;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	01 96       	adiw	r24, 0x01	; 1
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01

    /* Put data into buffer, sends the data */
    UDR = Copy_u8Data;

    /* Wait for empty transmit buffer */
    while ((GET_BIT(UCSRA, UCSRA_UDRE) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
    31c0:	eb e2       	ldi	r30, 0x2B	; 43
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	82 95       	swap	r24
    31c8:	86 95       	lsr	r24
    31ca:	87 70       	andi	r24, 0x07	; 7
    31cc:	88 2f       	mov	r24, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	81 70       	andi	r24, 0x01	; 1
    31d2:	90 70       	andi	r25, 0x00	; 0
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	31 f4       	brne	.+12     	; 0x31e4 <USART_u8SendByte+0x4c>
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	9a 81       	ldd	r25, Y+2	; 0x02
    31dc:	2c e9       	ldi	r18, 0x9C	; 156
    31de:	80 34       	cpi	r24, 0x40	; 64
    31e0:	92 07       	cpc	r25, r18
    31e2:	48 f3       	brcs	.-46     	; 0x31b6 <USART_u8SendByte+0x1e>
    {
        Local_u16TimeOut++;
    }
    if (Local_u16TimeOut == USART_TIMEOUT)
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	2c e9       	ldi	r18, 0x9C	; 156
    31ea:	80 34       	cpi	r24, 0x40	; 64
    31ec:	92 07       	cpc	r25, r18
    31ee:	11 f4       	brne	.+4      	; 0x31f4 <USART_u8SendByte+0x5c>
    {
        Local_u8ErrorState = NOK;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	8b 83       	std	Y+3, r24	; 0x03
    }

    /* Return the error state */
    return Local_u8ErrorState;
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <USART_VidSendStringSynch>:
 * @brief A function to send a string using USART in synchronous mode.
 * @param Copy_u8String The string to be sent.
 * @return u8 The status of the function.
 */
u8 USART_VidSendStringSynch(u8 *Copy_u8String)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	00 d0       	rcall	.+0      	; 0x320a <USART_VidSendStringSynch+0x6>
    320a:	00 d0       	rcall	.+0      	; 0x320c <USART_VidSendStringSynch+0x8>
    320c:	0f 92       	push	r0
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	9d 83       	std	Y+5, r25	; 0x05
    3214:	8c 83       	std	Y+4, r24	; 0x04
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = OK;
    3216:	1b 82       	std	Y+3, r1	; 0x03

    /* Local variable to hold the Timeout */
    u16 Local_u16TimeOut = 0;
    3218:	1a 82       	std	Y+2, r1	; 0x02
    321a:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8String != NULL)
    321c:	8c 81       	ldd	r24, Y+4	; 0x04
    321e:	9d 81       	ldd	r25, Y+5	; 0x05
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	99 f1       	breq	.+102    	; 0x328a <USART_VidSendStringSynch+0x86>
    3224:	2c c0       	rjmp	.+88     	; 0x327e <USART_VidSendStringSynch+0x7a>
    {
        /* Loop until null character is reached */
        while (*Copy_u8String != '\0')
        {
            /* Put data into buffer, sends the data */
            UDR = *Copy_u8String;
    3226:	ec e2       	ldi	r30, 0x2C	; 44
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	ac 81       	ldd	r26, Y+4	; 0x04
    322c:	bd 81       	ldd	r27, Y+5	; 0x05
    322e:	8c 91       	ld	r24, X
    3230:	80 83       	st	Z, r24
    3232:	05 c0       	rjmp	.+10     	; 0x323e <USART_VidSendStringSynch+0x3a>

            /* Wait for empty transmit buffer */
            while ((GET_BIT(UCSRA, UCSRA_UDRE) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
            {
                Local_u16TimeOut++;
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	9a 83       	std	Y+2, r25	; 0x02
    323c:	89 83       	std	Y+1, r24	; 0x01
        {
            /* Put data into buffer, sends the data */
            UDR = *Copy_u8String;

            /* Wait for empty transmit buffer */
            while ((GET_BIT(UCSRA, UCSRA_UDRE) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
    323e:	eb e2       	ldi	r30, 0x2B	; 43
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	82 95       	swap	r24
    3246:	86 95       	lsr	r24
    3248:	87 70       	andi	r24, 0x07	; 7
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	81 70       	andi	r24, 0x01	; 1
    3250:	90 70       	andi	r25, 0x00	; 0
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	31 f4       	brne	.+12     	; 0x3262 <USART_VidSendStringSynch+0x5e>
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	9a 81       	ldd	r25, Y+2	; 0x02
    325a:	2c e9       	ldi	r18, 0x9C	; 156
    325c:	80 34       	cpi	r24, 0x40	; 64
    325e:	92 07       	cpc	r25, r18
    3260:	48 f3       	brcs	.-46     	; 0x3234 <USART_VidSendStringSynch+0x30>
            {
                Local_u16TimeOut++;
            }
            if (Local_u16TimeOut == USART_TIMEOUT)
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	9a 81       	ldd	r25, Y+2	; 0x02
    3266:	2c e9       	ldi	r18, 0x9C	; 156
    3268:	80 34       	cpi	r24, 0x40	; 64
    326a:	92 07       	cpc	r25, r18
    326c:	19 f4       	brne	.+6      	; 0x3274 <USART_VidSendStringSynch+0x70>
            {
                Local_u8ErrorState = NOK;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	8b 83       	std	Y+3, r24	; 0x03
    3272:	0d c0       	rjmp	.+26     	; 0x328e <USART_VidSendStringSynch+0x8a>
                break;
            }

            /* Increment the string pointer */
            Copy_u8String++;
    3274:	8c 81       	ldd	r24, Y+4	; 0x04
    3276:	9d 81       	ldd	r25, Y+5	; 0x05
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	9d 83       	std	Y+5, r25	; 0x05
    327c:	8c 83       	std	Y+4, r24	; 0x04
    u16 Local_u16TimeOut = 0;

    if (Copy_u8String != NULL)
    {
        /* Loop until null character is reached */
        while (*Copy_u8String != '\0')
    327e:	ec 81       	ldd	r30, Y+4	; 0x04
    3280:	fd 81       	ldd	r31, Y+5	; 0x05
    3282:	80 81       	ld	r24, Z
    3284:	88 23       	and	r24, r24
    3286:	79 f6       	brne	.-98     	; 0x3226 <USART_VidSendStringSynch+0x22>
    3288:	02 c0       	rjmp	.+4      	; 0x328e <USART_VidSendStringSynch+0x8a>
        // Send newline character after sending the string
    }

    else
    {
        Local_u8ErrorState = NOK;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	8b 83       	std	Y+3, r24	; 0x03
    }

    /* Return the error state */
    return Local_u8ErrorState;
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <USART_VidSendStringAsynch>:
 * @param Copy_u8String The string to be sent.
 * @param Callback The function to be called when the transmission is done.
 * @return u8 The status of the function.
 */
u8 USART_VidSendStringAsynch(u8 *Copy_u8String, void (*Callback)(void))
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <USART_VidSendStringAsynch+0x6>
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <USART_VidSendStringAsynch+0x8>
    32a8:	0f 92       	push	r0
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	9b 83       	std	Y+3, r25	; 0x03
    32b0:	8a 83       	std	Y+2, r24	; 0x02
    32b2:	7d 83       	std	Y+5, r23	; 0x05
    32b4:	6c 83       	std	Y+4, r22	; 0x04
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = OK;
    32b6:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8String != NULL && Callback != NULL)
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	9b 81       	ldd	r25, Y+3	; 0x03
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	d1 f0       	breq	.+52     	; 0x32f4 <USART_VidSendStringAsynch+0x54>
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	b1 f0       	breq	.+44     	; 0x32f4 <USART_VidSendStringAsynch+0x54>
    {
        /* Resetting the index */
        USART_u8Index = 0;
    32c8:	10 92 d4 03 	sts	0x03D4, r1

        /* Save the string pointer */
        USART_Pu8TransmittedString = Copy_u8String;
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	9b 81       	ldd	r25, Y+3	; 0x03
    32d0:	90 93 d1 03 	sts	0x03D1, r25
    32d4:	80 93 d0 03 	sts	0x03D0, r24

        /* Save the callback function */
        PtrASychCallback = Callback;
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	9d 81       	ldd	r25, Y+5	; 0x05
    32dc:	90 93 cf 03 	sts	0x03CF, r25
    32e0:	80 93 ce 03 	sts	0x03CE, r24

        /* Enable the data register empty interrupt */
        SET_BIT(UCSRB, UCSRB_UDRIE);
    32e4:	aa e2       	ldi	r26, 0x2A	; 42
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	ea e2       	ldi	r30, 0x2A	; 42
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	80 62       	ori	r24, 0x20	; 32
    32f0:	8c 93       	st	X, r24
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <USART_VidSendStringAsynch+0x58>
    }

    else
    {
        Local_u8ErrorState = NOK;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	89 83       	std	Y+1, r24	; 0x01
    }

    /* Return the error state */
    return Local_u8ErrorState;
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <USART_u8ReceiveByte>:
 * @brief A function to receive a byte using USART.
 * @param Copy_u8Byte The byte to be received.
 * @return u8 The status of the function.
 */
u8 USART_u8ReceiveByte(u8 *Copy_u8Byte)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	00 d0       	rcall	.+0      	; 0x3310 <USART_u8ReceiveByte+0x6>
    3310:	00 d0       	rcall	.+0      	; 0x3312 <USART_u8ReceiveByte+0x8>
    3312:	0f 92       	push	r0
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	9d 83       	std	Y+5, r25	; 0x05
    331a:	8c 83       	std	Y+4, r24	; 0x04
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = OK;
    331c:	1b 82       	std	Y+3, r1	; 0x03

    /* Local variable to hold the Timeout */
    u16 Local_u16TimeOut = 0;
    331e:	1a 82       	std	Y+2, r1	; 0x02
    3320:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8Byte != NULL)
    3322:	8c 81       	ldd	r24, Y+4	; 0x04
    3324:	9d 81       	ldd	r25, Y+5	; 0x05
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	09 f1       	breq	.+66     	; 0x336c <USART_u8ReceiveByte+0x62>
    332a:	05 c0       	rjmp	.+10     	; 0x3336 <USART_u8ReceiveByte+0x2c>
    {
        /* Wait for data to be received */
        while ((GET_BIT(UCSRA, UCSRA_RXC) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
        {
            Local_u16TimeOut++;
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	9a 81       	ldd	r25, Y+2	; 0x02
    3330:	01 96       	adiw	r24, 0x01	; 1
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    u16 Local_u16TimeOut = 0;

    if (Copy_u8Byte != NULL)
    {
        /* Wait for data to be received */
        while ((GET_BIT(UCSRA, UCSRA_RXC) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
    3336:	eb e2       	ldi	r30, 0x2B	; 43
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	80 81       	ld	r24, Z
    333c:	88 23       	and	r24, r24
    333e:	34 f0       	brlt	.+12     	; 0x334c <USART_u8ReceiveByte+0x42>
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	9a 81       	ldd	r25, Y+2	; 0x02
    3344:	2c e9       	ldi	r18, 0x9C	; 156
    3346:	80 34       	cpi	r24, 0x40	; 64
    3348:	92 07       	cpc	r25, r18
    334a:	80 f3       	brcs	.-32     	; 0x332c <USART_u8ReceiveByte+0x22>
        {
            Local_u16TimeOut++;
        }
        if (Local_u16TimeOut == USART_TIMEOUT)
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	2c e9       	ldi	r18, 0x9C	; 156
    3352:	80 34       	cpi	r24, 0x40	; 64
    3354:	92 07       	cpc	r25, r18
    3356:	19 f4       	brne	.+6      	; 0x335e <USART_u8ReceiveByte+0x54>
        {
            Local_u8ErrorState = NOK;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	8b 83       	std	Y+3, r24	; 0x03
    335c:	09 c0       	rjmp	.+18     	; 0x3370 <USART_u8ReceiveByte+0x66>
        }

        else
        {
            /* Get and return received data from buffer */
            *Copy_u8Byte = UDR;
    335e:	ec e2       	ldi	r30, 0x2C	; 44
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	ec 81       	ldd	r30, Y+4	; 0x04
    3366:	fd 81       	ldd	r31, Y+5	; 0x05
    3368:	80 83       	st	Z, r24
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <USART_u8ReceiveByte+0x66>
        }
    }

    else
    {
        Local_u8ErrorState = NOK;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	8b 83       	std	Y+3, r24	; 0x03
    }

    /* Return the error state */
    return Local_u8ErrorState;
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <USART_VidReceiveStringSynch>:
 * @brief A function to receive a string using USART in synchronous mode.
 * @param Copy_u8String The string to be received.
 * @return u8 The status of the function.
 */
u8 USART_VidReceiveStringSynch(u8 *Copy_u8String)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	00 d0       	rcall	.+0      	; 0x3388 <USART_VidReceiveStringSynch+0x6>
    3388:	00 d0       	rcall	.+0      	; 0x338a <USART_VidReceiveStringSynch+0x8>
    338a:	00 d0       	rcall	.+0      	; 0x338c <USART_VidReceiveStringSynch+0xa>
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = OK;
    3394:	1c 82       	std	Y+4, r1	; 0x04

    /* Local variable to be used as an iterator */
    u8 Local_u8Iterator = 0;
    3396:	1b 82       	std	Y+3, r1	; 0x03

    /* Local variable to hold the Timeout */
    u16 Local_u16TimeOut = 0;
    3398:	1a 82       	std	Y+2, r1	; 0x02
    339a:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8String != NULL)
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <USART_VidReceiveStringSynch+0x24>
    33a4:	3e c0       	rjmp	.+124    	; 0x3422 <USART_VidReceiveStringSynch+0xa0>
    33a6:	28 c0       	rjmp	.+80     	; 0x33f8 <USART_VidReceiveStringSynch+0x76>
        while (Copy_u8String[Local_u8Iterator] != '\r')
        {
            /* Wait for data to be received */
            while ((GET_BIT(UCSRA, UCSRA_RXC) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
            {
                Local_u16TimeOut++;
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	9a 81       	ldd	r25, Y+2	; 0x02
    33ac:	01 96       	adiw	r24, 0x01	; 1
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8String != NULL)
    {
        while (Copy_u8String[Local_u8Iterator] != '\r')
        {
            /* Wait for data to be received */
            while ((GET_BIT(UCSRA, UCSRA_RXC) == 0) && (Local_u16TimeOut < USART_TIMEOUT))
    33b2:	eb e2       	ldi	r30, 0x2B	; 43
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	88 23       	and	r24, r24
    33ba:	34 f0       	brlt	.+12     	; 0x33c8 <USART_VidReceiveStringSynch+0x46>
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	2c e9       	ldi	r18, 0x9C	; 156
    33c2:	80 34       	cpi	r24, 0x40	; 64
    33c4:	92 07       	cpc	r25, r18
    33c6:	80 f3       	brcs	.-32     	; 0x33a8 <USART_VidReceiveStringSynch+0x26>
            {
                Local_u16TimeOut++;
            }
            if (Local_u16TimeOut == USART_TIMEOUT)
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	2c e9       	ldi	r18, 0x9C	; 156
    33ce:	80 34       	cpi	r24, 0x40	; 64
    33d0:	92 07       	cpc	r25, r18
    33d2:	19 f4       	brne	.+6      	; 0x33da <USART_VidReceiveStringSynch+0x58>
            {
                Local_u8ErrorState = NOK;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	8c 83       	std	Y+4, r24	; 0x04
    33d8:	1a c0       	rjmp	.+52     	; 0x340e <USART_VidReceiveStringSynch+0x8c>
            }

            else
            {
                /* Get and return received data from buffer */
                Copy_u8String[Local_u8Iterator] = UDR;
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	8d 81       	ldd	r24, Y+5	; 0x05
    33e2:	9e 81       	ldd	r25, Y+6	; 0x06
    33e4:	dc 01       	movw	r26, r24
    33e6:	a2 0f       	add	r26, r18
    33e8:	b3 1f       	adc	r27, r19
    33ea:	ec e2       	ldi	r30, 0x2C	; 44
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	8c 93       	st	X, r24
            }

            /* Increment the iterator */
            Local_u8Iterator++;
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	8f 5f       	subi	r24, 0xFF	; 255
    33f6:	8b 83       	std	Y+3, r24	; 0x03
    /* Local variable to hold the Timeout */
    u16 Local_u16TimeOut = 0;

    if (Copy_u8String != NULL)
    {
        while (Copy_u8String[Local_u8Iterator] != '\r')
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3400:	9e 81       	ldd	r25, Y+6	; 0x06
    3402:	fc 01       	movw	r30, r24
    3404:	e2 0f       	add	r30, r18
    3406:	f3 1f       	adc	r31, r19
    3408:	80 81       	ld	r24, Z
    340a:	8d 30       	cpi	r24, 0x0D	; 13
    340c:	91 f6       	brne	.-92     	; 0x33b2 <USART_VidReceiveStringSynch+0x30>
            /* Increment the iterator */
            Local_u8Iterator++;
        }

        /* Add the null character at the end of the string */
        Copy_u8String[Local_u8Iterator] = '\0';
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	28 2f       	mov	r18, r24
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	fc 01       	movw	r30, r24
    341a:	e2 0f       	add	r30, r18
    341c:	f3 1f       	adc	r31, r19
    341e:	10 82       	st	Z, r1
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <USART_VidReceiveStringSynch+0xa4>
    }

    else
    {
        Local_u8ErrorState = NOK;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	8c 83       	std	Y+4, r24	; 0x04
    }

    /* Return the error state */
    return Local_u8ErrorState;
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3428:	26 96       	adiw	r28, 0x06	; 6
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	08 95       	ret

0000343a <USART_VidReceiveStringAsynch>:
 * @param Copy_u8String The string to be received.
 * @param Callback The function to be called when the reception is done.
 * @return u8 The status of the function.
 */
u8 USART_VidReceiveStringAsynch(u8 *Copy_u8String, void (*Callback)(void))
{
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	00 d0       	rcall	.+0      	; 0x3440 <USART_VidReceiveStringAsynch+0x6>
    3440:	00 d0       	rcall	.+0      	; 0x3442 <USART_VidReceiveStringAsynch+0x8>
    3442:	0f 92       	push	r0
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	9b 83       	std	Y+3, r25	; 0x03
    344a:	8a 83       	std	Y+2, r24	; 0x02
    344c:	7d 83       	std	Y+5, r23	; 0x05
    344e:	6c 83       	std	Y+4, r22	; 0x04
    /* Local variable to hold the error state */
    u8 Local_u8ErrorState = OK;
    3450:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8String != NULL && Callback != NULL)
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	9b 81       	ldd	r25, Y+3	; 0x03
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	d1 f0       	breq	.+52     	; 0x348e <USART_VidReceiveStringAsynch+0x54>
    345a:	8c 81       	ldd	r24, Y+4	; 0x04
    345c:	9d 81       	ldd	r25, Y+5	; 0x05
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	b1 f0       	breq	.+44     	; 0x348e <USART_VidReceiveStringAsynch+0x54>
    {
        /* Resetting the index */
        USART_u8Index = 0;
    3462:	10 92 d4 03 	sts	0x03D4, r1

        /* Save the string pointer */
        USART_Pu8ReceivedString = Copy_u8String;
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	9b 81       	ldd	r25, Y+3	; 0x03
    346a:	90 93 d3 03 	sts	0x03D3, r25
    346e:	80 93 d2 03 	sts	0x03D2, r24

        /* Save the callback function */
        PtrASychCallback = Callback;
    3472:	8c 81       	ldd	r24, Y+4	; 0x04
    3474:	9d 81       	ldd	r25, Y+5	; 0x05
    3476:	90 93 cf 03 	sts	0x03CF, r25
    347a:	80 93 ce 03 	sts	0x03CE, r24

        /* Enable the register empty interrupt */
        SET_BIT(UCSRB, UCSRB_UDRIE);
    347e:	aa e2       	ldi	r26, 0x2A	; 42
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	ea e2       	ldi	r30, 0x2A	; 42
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	80 62       	ori	r24, 0x20	; 32
    348a:	8c 93       	st	X, r24
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <USART_VidReceiveStringAsynch+0x58>
    }

    else
    {
        Local_u8ErrorState = NOK;
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	89 83       	std	Y+1, r24	; 0x01
    }

    /* Return the error state */
    return Local_u8ErrorState;
    3492:	89 81       	ldd	r24, Y+1	; 0x01
}
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <__vector_13>:

/*========================== ISRs ==========================*/

/* The ISR of USART, Rx Complete interrupt */
void __vector_13(void)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    /* Save the received data in the string */
    USART_Pu8ReceivedString[USART_u8Index] = UDR;
    34ac:	20 91 d2 03 	lds	r18, 0x03D2
    34b0:	30 91 d3 03 	lds	r19, 0x03D3
    34b4:	80 91 d4 03 	lds	r24, 0x03D4
    34b8:	88 2f       	mov	r24, r24
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	d9 01       	movw	r26, r18
    34be:	a8 0f       	add	r26, r24
    34c0:	b9 1f       	adc	r27, r25
    34c2:	ec e2       	ldi	r30, 0x2C	; 44
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	8c 93       	st	X, r24

    /* Increment the index */
    USART_u8Index++;
    34ca:	80 91 d4 03 	lds	r24, 0x03D4
    34ce:	8f 5f       	subi	r24, 0xFF	; 255
    34d0:	80 93 d4 03 	sts	0x03D4, r24

    /* Check if the received data is the end of the string */
    if (USART_Pu8ReceivedString[USART_u8Index - 1] == '\r')
    34d4:	20 91 d2 03 	lds	r18, 0x03D2
    34d8:	30 91 d3 03 	lds	r19, 0x03D3
    34dc:	80 91 d4 03 	lds	r24, 0x03D4
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f9 01       	movw	r30, r18
    34e8:	e8 0f       	add	r30, r24
    34ea:	f9 1f       	adc	r31, r25
    34ec:	80 81       	ld	r24, Z
    34ee:	8d 30       	cpi	r24, 0x0D	; 13
    34f0:	d1 f4       	brne	.+52     	; 0x3526 <__vector_13+0x82>
    {
        /* Reset the index */
        USART_u8Index = 0;
    34f2:	10 92 d4 03 	sts	0x03D4, r1

        /* Add the null character at the end of the string */
        USART_Pu8ReceivedString[USART_u8Index] = '\0';
    34f6:	20 91 d2 03 	lds	r18, 0x03D2
    34fa:	30 91 d3 03 	lds	r19, 0x03D3
    34fe:	80 91 d4 03 	lds	r24, 0x03D4
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	f9 01       	movw	r30, r18
    3508:	e8 0f       	add	r30, r24
    350a:	f9 1f       	adc	r31, r25
    350c:	10 82       	st	Z, r1

        /* Disable the receive complete interrupt */
        CLR_BIT(UCSRB, UCSRB_RXCIE);
    350e:	aa e2       	ldi	r26, 0x2A	; 42
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	ea e2       	ldi	r30, 0x2A	; 42
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	8f 77       	andi	r24, 0x7F	; 127
    351a:	8c 93       	st	X, r24

        /* Call the callback function */
        PtrASychCallback();
    351c:	e0 91 ce 03 	lds	r30, 0x03CE
    3520:	f0 91 cf 03 	lds	r31, 0x03CF
    3524:	09 95       	icall
    }
}
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <__vector_14>:

/* The ISR of USART Data Register Empty interrupt */
void __vector_14(void)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    /* Put data into buffer, sends the data */
    UDR = USART_Pu8TransmittedString[USART_u8Index];
    3534:	ac e2       	ldi	r26, 0x2C	; 44
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	20 91 d0 03 	lds	r18, 0x03D0
    353c:	30 91 d1 03 	lds	r19, 0x03D1
    3540:	80 91 d4 03 	lds	r24, 0x03D4
    3544:	88 2f       	mov	r24, r24
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	f9 01       	movw	r30, r18
    354a:	e8 0f       	add	r30, r24
    354c:	f9 1f       	adc	r31, r25
    354e:	80 81       	ld	r24, Z
    3550:	8c 93       	st	X, r24

    /* Increment the index */
    USART_u8Index++;
    3552:	80 91 d4 03 	lds	r24, 0x03D4
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	80 93 d4 03 	sts	0x03D4, r24

    /* Check if the end of the string is reached */
    if (USART_Pu8TransmittedString[USART_u8Index] == '\0')
    355c:	20 91 d0 03 	lds	r18, 0x03D0
    3560:	30 91 d1 03 	lds	r19, 0x03D1
    3564:	80 91 d4 03 	lds	r24, 0x03D4
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	f9 01       	movw	r30, r18
    356e:	e8 0f       	add	r30, r24
    3570:	f9 1f       	adc	r31, r25
    3572:	80 81       	ld	r24, Z
    3574:	88 23       	and	r24, r24
    3576:	71 f4       	brne	.+28     	; 0x3594 <__vector_14+0x68>
    {
        /* Reset the index */
        USART_u8Index = 0;
    3578:	10 92 d4 03 	sts	0x03D4, r1

        /* Disable the data register empty interrupt */
        CLR_BIT(UCSRB, UCSRB_UDRIE);
    357c:	aa e2       	ldi	r26, 0x2A	; 42
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	ea e2       	ldi	r30, 0x2A	; 42
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	8f 7d       	andi	r24, 0xDF	; 223
    3588:	8c 93       	st	X, r24

        /* Call the callback function */
        PtrASychCallback();
    358a:	e0 91 ce 03 	lds	r30, 0x03CE
    358e:	f0 91 cf 03 	lds	r31, 0x03CF
    3592:	09 95       	icall
    }
}
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <__vector_15>:

/* The ISR of USART, Tx Complete interrupt */
void __vector_15(void)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    /* Do nothing */
}
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <USART_u8SendNewLine>:


u8 USART_u8SendNewLine() {
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <USART_u8SendNewLine+0x6>
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    // Send carriage return character over USART
    u8 status = USART_u8SendByte('\r');
    35b2:	8d e0       	ldi	r24, 0x0D	; 13
    35b4:	0e 94 cc 18 	call	0x3198	; 0x3198 <USART_u8SendByte>
    35b8:	89 83       	std	Y+1, r24	; 0x01
    if (status != OK) {
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	88 23       	and	r24, r24
    35be:	19 f0       	breq	.+6      	; 0x35c6 <USART_u8SendNewLine+0x1e>
        return status; // Return if sending carriage return fails
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	8a 83       	std	Y+2, r24	; 0x02
    35c4:	04 c0       	rjmp	.+8      	; 0x35ce <USART_u8SendNewLine+0x26>
    }

    // Send newline character over USART
    return USART_u8SendByte('\n');
    35c6:	8a e0       	ldi	r24, 0x0A	; 10
    35c8:	0e 94 cc 18 	call	0x3198	; 0x3198 <USART_u8SendByte>
    35cc:	8a 83       	std	Y+2, r24	; 0x02
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <APP_voidLogin>:

#include "APP.h"



void APP_voidLogin(void) {
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	ce 55       	subi	r28, 0x5E	; 94
    35e8:	d0 40       	sbci	r29, 0x00	; 0
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
	u8 LOCAL_u8Id[4] = {'1', '2', '3', '4'}, LOCAL_u8Password[4] = {'4', '3', '2', '1'};
    35f4:	fe 01       	movw	r30, r28
    35f6:	e2 5b       	subi	r30, 0xB2	; 178
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	81 e3       	ldi	r24, 0x31	; 49
    35fc:	80 83       	st	Z, r24
    35fe:	fe 01       	movw	r30, r28
    3600:	e2 5b       	subi	r30, 0xB2	; 178
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	82 e3       	ldi	r24, 0x32	; 50
    3606:	81 83       	std	Z+1, r24	; 0x01
    3608:	fe 01       	movw	r30, r28
    360a:	e2 5b       	subi	r30, 0xB2	; 178
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	83 e3       	ldi	r24, 0x33	; 51
    3610:	82 83       	std	Z+2, r24	; 0x02
    3612:	fe 01       	movw	r30, r28
    3614:	e2 5b       	subi	r30, 0xB2	; 178
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	84 e3       	ldi	r24, 0x34	; 52
    361a:	83 83       	std	Z+3, r24	; 0x03
    361c:	fe 01       	movw	r30, r28
    361e:	ee 5a       	subi	r30, 0xAE	; 174
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	84 e3       	ldi	r24, 0x34	; 52
    3624:	80 83       	st	Z, r24
    3626:	fe 01       	movw	r30, r28
    3628:	ee 5a       	subi	r30, 0xAE	; 174
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	83 e3       	ldi	r24, 0x33	; 51
    362e:	81 83       	std	Z+1, r24	; 0x01
    3630:	fe 01       	movw	r30, r28
    3632:	ee 5a       	subi	r30, 0xAE	; 174
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	82 e3       	ldi	r24, 0x32	; 50
    3638:	82 83       	std	Z+2, r24	; 0x02
    363a:	fe 01       	movw	r30, r28
    363c:	ee 5a       	subi	r30, 0xAE	; 174
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	81 e3       	ldi	r24, 0x31	; 49
    3642:	83 83       	std	Z+3, r24	; 0x03
	u8 LOCAL_u8CheckId[4] = {0}, LOCAL_u8CheckPassword[4] = {0};
    3644:	fe 01       	movw	r30, r28
    3646:	ea 5a       	subi	r30, 0xAA	; 170
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	10 82       	st	Z, r1
    364c:	11 82       	std	Z+1, r1	; 0x01
    364e:	12 82       	std	Z+2, r1	; 0x02
    3650:	13 82       	std	Z+3, r1	; 0x03
    3652:	fe 01       	movw	r30, r28
    3654:	e6 5a       	subi	r30, 0xA6	; 166
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	10 82       	st	Z, r1
    365a:	11 82       	std	Z+1, r1	; 0x01
    365c:	12 82       	std	Z+2, r1	; 0x02
    365e:	13 82       	std	Z+3, r1	; 0x03
	u8 ID = 1, Password = 1;
    3660:	fe 01       	movw	r30, r28
    3662:	e3 5b       	subi	r30, 0xB3	; 179
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	80 83       	st	Z, r24
    366a:	fe 01       	movw	r30, r28
    366c:	e4 5b       	subi	r30, 0xB4	; 180
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	80 83       	st	Z, r24
	u8 LoginI = 3;
    3674:	fe 01       	movw	r30, r28
    3676:	e5 5b       	subi	r30, 0xB5	; 181
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	80 83       	st	Z, r24
	u8 RxData;
	u8 idCounter = 0, passCounter = 0;
    367e:	fe 01       	movw	r30, r28
    3680:	e6 5b       	subi	r30, 0xB6	; 182
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	10 82       	st	Z, r1
    3686:	fe 01       	movw	r30, r28
    3688:	e7 5b       	subi	r30, 0xB7	; 183
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	10 82       	st	Z, r1

	CLCD_voidGotoXY(3, 0);
    368e:	83 e0       	ldi	r24, 0x03	; 3
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>
	CLCD_voidSendString("Welcome...");
    3696:	80 e6       	ldi	r24, 0x60	; 96
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
    369e:	fe 01       	movw	r30, r28
    36a0:	ed 5b       	subi	r30, 0xBD	; 189
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	aa ef       	ldi	r26, 0xFA	; 250
    36aa:	b4 e4       	ldi	r27, 0x44	; 68
    36ac:	80 83       	st	Z, r24
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	a2 83       	std	Z+2, r26	; 0x02
    36b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b4:	8e 01       	movw	r16, r28
    36b6:	01 5c       	subi	r16, 0xC1	; 193
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	fe 01       	movw	r30, r28
    36bc:	ed 5b       	subi	r30, 0xBD	; 189
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a ef       	ldi	r20, 0xFA	; 250
    36ce:	54 e4       	ldi	r21, 0x44	; 68
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	f8 01       	movw	r30, r16
    36da:	80 83       	st	Z, r24
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	a2 83       	std	Z+2, r26	; 0x02
    36e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e2:	fe 01       	movw	r30, r28
    36e4:	ff 96       	adiw	r30, 0x3f	; 63
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	40 e8       	ldi	r20, 0x80	; 128
    36f4:	5f e3       	ldi	r21, 0x3F	; 63
    36f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fa:	88 23       	and	r24, r24
    36fc:	2c f4       	brge	.+10     	; 0x3708 <APP_voidLogin+0x12e>
		__ticks = 1;
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9e af       	std	Y+62, r25	; 0x3e
    3704:	8d af       	std	Y+61, r24	; 0x3d
    3706:	46 c0       	rjmp	.+140    	; 0x3794 <APP_voidLogin+0x1ba>
	else if (__tmp > 65535)
    3708:	fe 01       	movw	r30, r28
    370a:	ff 96       	adiw	r30, 0x3f	; 63
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	64 f5       	brge	.+88     	; 0x377c <APP_voidLogin+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	fe 01       	movw	r30, r28
    3726:	ed 5b       	subi	r30, 0xBD	; 189
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9e af       	std	Y+62, r25	; 0x3e
    3750:	8d af       	std	Y+61, r24	; 0x3d
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <APP_voidLogin+0x198>
    3754:	88 ec       	ldi	r24, 0xC8	; 200
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9c af       	std	Y+60, r25	; 0x3c
    375a:	8b af       	std	Y+59, r24	; 0x3b
    375c:	8b ad       	ldd	r24, Y+59	; 0x3b
    375e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <APP_voidLogin+0x186>
    3764:	9c af       	std	Y+60, r25	; 0x3c
    3766:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8d ad       	ldd	r24, Y+61	; 0x3d
    376a:	9e ad       	ldd	r25, Y+62	; 0x3e
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	9e af       	std	Y+62, r25	; 0x3e
    3770:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8d ad       	ldd	r24, Y+61	; 0x3d
    3774:	9e ad       	ldd	r25, Y+62	; 0x3e
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <APP_voidLogin+0x17a>
    377a:	9d c2       	rjmp	.+1338   	; 0x3cb6 <APP_voidLogin+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	fe 01       	movw	r30, r28
    377e:	ff 96       	adiw	r30, 0x3f	; 63
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9e af       	std	Y+62, r25	; 0x3e
    3792:	8d af       	std	Y+61, r24	; 0x3d
    3794:	8d ad       	ldd	r24, Y+61	; 0x3d
    3796:	9e ad       	ldd	r25, Y+62	; 0x3e
    3798:	9a af       	std	Y+58, r25	; 0x3a
    379a:	89 af       	std	Y+57, r24	; 0x39
    379c:	89 ad       	ldd	r24, Y+57	; 0x39
    379e:	9a ad       	ldd	r25, Y+58	; 0x3a
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <APP_voidLogin+0x1c6>
    37a4:	9a af       	std	Y+58, r25	; 0x3a
    37a6:	89 af       	std	Y+57, r24	; 0x39
    37a8:	86 c2       	rjmp	.+1292   	; 0x3cb6 <APP_voidLogin+0x6dc>
	_delay_ms(2000);

	while (LoginI) {
		ID = 1;
    37aa:	fe 01       	movw	r30, r28
    37ac:	e3 5b       	subi	r30, 0xB3	; 179
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	80 83       	st	Z, r24
		Password = 1;
    37b4:	fe 01       	movw	r30, r28
    37b6:	e4 5b       	subi	r30, 0xB4	; 180
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	80 83       	st	Z, r24
		idCounter = 0;
    37be:	fe 01       	movw	r30, r28
    37c0:	e6 5b       	subi	r30, 0xB6	; 182
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	10 82       	st	Z, r1
		passCounter = 0;
    37c6:	fe 01       	movw	r30, r28
    37c8:	e7 5b       	subi	r30, 0xB7	; 183
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	10 82       	st	Z, r1

		CLCD_voidSendCommand(1);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
		CLCD_voidSendString("Enter ID : ");
    37d4:	8b e6       	ldi	r24, 0x6B	; 107
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
		CLCD_voidGotoXY(1, 0);
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	60 e0       	ldi	r22, 0x00	; 0
    37e0:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>

		USART_VidSendStringSynch("Enter ID :\n");
    37e4:	87 e7       	ldi	r24, 0x77	; 119
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
		USART_u8SendNewLine();
    37ec:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    37f0:	27 c0       	rjmp	.+78     	; 0x3840 <APP_voidLogin+0x266>
		// Wait for ID input
		while (idCounter < 4) {
			if (USART_u8ReceiveByte(&RxData) == OK) {
    37f2:	ce 01       	movw	r24, r28
    37f4:	82 5a       	subi	r24, 0xA2	; 162
    37f6:	9f 4f       	sbci	r25, 0xFF	; 255
    37f8:	0e 94 85 19 	call	0x330a	; 0x330a <USART_u8ReceiveByte>
    37fc:	88 23       	and	r24, r24
    37fe:	01 f5       	brne	.+64     	; 0x3840 <APP_voidLogin+0x266>
				LOCAL_u8CheckId[idCounter++] = RxData;
    3800:	fe 01       	movw	r30, r28
    3802:	e6 5b       	subi	r30, 0xB6	; 182
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	fe 01       	movw	r30, r28
    380e:	e2 5a       	subi	r30, 0xA2	; 162
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	40 81       	ld	r20, Z
    3814:	ce 01       	movw	r24, r28
    3816:	8a 5a       	subi	r24, 0xAA	; 170
    3818:	9f 4f       	sbci	r25, 0xFF	; 255
    381a:	fc 01       	movw	r30, r24
    381c:	e2 0f       	add	r30, r18
    381e:	f3 1f       	adc	r31, r19
    3820:	40 83       	st	Z, r20
    3822:	de 01       	movw	r26, r28
    3824:	a6 5b       	subi	r26, 0xB6	; 182
    3826:	bf 4f       	sbci	r27, 0xFF	; 255
    3828:	fe 01       	movw	r30, r28
    382a:	e6 5b       	subi	r30, 0xB6	; 182
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	8f 5f       	subi	r24, 0xFF	; 255
    3832:	8c 93       	st	X, r24
				CLCD_voidSendData(RxData); // Echo back received character
    3834:	fe 01       	movw	r30, r28
    3836:	e2 5a       	subi	r30, 0xA2	; 162
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	80 81       	ld	r24, Z
    383c:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>
		CLCD_voidGotoXY(1, 0);

		USART_VidSendStringSynch("Enter ID :\n");
		USART_u8SendNewLine();
		// Wait for ID input
		while (idCounter < 4) {
    3840:	fe 01       	movw	r30, r28
    3842:	e6 5b       	subi	r30, 0xB6	; 182
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 81       	ld	r24, Z
    3848:	84 30       	cpi	r24, 0x04	; 4
    384a:	98 f2       	brcs	.-90     	; 0x37f2 <APP_voidLogin+0x218>
				CLCD_voidSendData(RxData); // Echo back received character
			}
		}

		// Check ID validity
		for (u8 i = 0; i < 4; i++) {
    384c:	fe 01       	movw	r30, r28
    384e:	e8 5b       	subi	r30, 0xB8	; 184
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	10 82       	st	Z, r1
    3854:	29 c0       	rjmp	.+82     	; 0x38a8 <APP_voidLogin+0x2ce>
			if (LOCAL_u8CheckId[i] != LOCAL_u8Id[i]) {
    3856:	fe 01       	movw	r30, r28
    3858:	e8 5b       	subi	r30, 0xB8	; 184
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	80 81       	ld	r24, Z
    385e:	28 2f       	mov	r18, r24
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	ce 01       	movw	r24, r28
    3864:	8a 5a       	subi	r24, 0xAA	; 170
    3866:	9f 4f       	sbci	r25, 0xFF	; 255
    3868:	fc 01       	movw	r30, r24
    386a:	e2 0f       	add	r30, r18
    386c:	f3 1f       	adc	r31, r19
    386e:	40 81       	ld	r20, Z
    3870:	fe 01       	movw	r30, r28
    3872:	e8 5b       	subi	r30, 0xB8	; 184
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	28 2f       	mov	r18, r24
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	ce 01       	movw	r24, r28
    387e:	82 5b       	subi	r24, 0xB2	; 178
    3880:	9f 4f       	sbci	r25, 0xFF	; 255
    3882:	fc 01       	movw	r30, r24
    3884:	e2 0f       	add	r30, r18
    3886:	f3 1f       	adc	r31, r19
    3888:	80 81       	ld	r24, Z
    388a:	48 17       	cp	r20, r24
    388c:	21 f0       	breq	.+8      	; 0x3896 <APP_voidLogin+0x2bc>
				ID = 0;
    388e:	fe 01       	movw	r30, r28
    3890:	e3 5b       	subi	r30, 0xB3	; 179
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	10 82       	st	Z, r1
				CLCD_voidSendData(RxData); // Echo back received character
			}
		}

		// Check ID validity
		for (u8 i = 0; i < 4; i++) {
    3896:	de 01       	movw	r26, r28
    3898:	a8 5b       	subi	r26, 0xB8	; 184
    389a:	bf 4f       	sbci	r27, 0xFF	; 255
    389c:	fe 01       	movw	r30, r28
    389e:	e8 5b       	subi	r30, 0xB8	; 184
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	80 81       	ld	r24, Z
    38a4:	8f 5f       	subi	r24, 0xFF	; 255
    38a6:	8c 93       	st	X, r24
    38a8:	fe 01       	movw	r30, r28
    38aa:	e8 5b       	subi	r30, 0xB8	; 184
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 81       	ld	r24, Z
    38b0:	84 30       	cpi	r24, 0x04	; 4
    38b2:	88 f2       	brcs	.-94     	; 0x3856 <APP_voidLogin+0x27c>
			if (LOCAL_u8CheckId[i] != LOCAL_u8Id[i]) {
				ID = 0;
			}
		}
		USART_u8SendNewLine();
    38b4:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>

		CLCD_voidSendCommand(1);
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
		CLCD_voidSendString("Enter Password:");
    38be:	83 e8       	ldi	r24, 0x83	; 131
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
		CLCD_voidGotoXY(1, 0);
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>

		USART_VidSendStringSynch("Enter Password:\n");
    38ce:	83 e9       	ldi	r24, 0x93	; 147
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
		USART_u8SendNewLine();
    38d6:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    38da:	27 c0       	rjmp	.+78     	; 0x392a <APP_voidLogin+0x350>

		// Wait for Password input
		while (passCounter < 4) {
			if (USART_u8ReceiveByte(&RxData) == OK) {
    38dc:	ce 01       	movw	r24, r28
    38de:	82 5a       	subi	r24, 0xA2	; 162
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	0e 94 85 19 	call	0x330a	; 0x330a <USART_u8ReceiveByte>
    38e6:	88 23       	and	r24, r24
    38e8:	01 f5       	brne	.+64     	; 0x392a <APP_voidLogin+0x350>
				LOCAL_u8CheckPassword[passCounter++] = RxData;
    38ea:	fe 01       	movw	r30, r28
    38ec:	e7 5b       	subi	r30, 0xB7	; 183
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	80 81       	ld	r24, Z
    38f2:	28 2f       	mov	r18, r24
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	fe 01       	movw	r30, r28
    38f8:	e2 5a       	subi	r30, 0xA2	; 162
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	40 81       	ld	r20, Z
    38fe:	ce 01       	movw	r24, r28
    3900:	86 5a       	subi	r24, 0xA6	; 166
    3902:	9f 4f       	sbci	r25, 0xFF	; 255
    3904:	fc 01       	movw	r30, r24
    3906:	e2 0f       	add	r30, r18
    3908:	f3 1f       	adc	r31, r19
    390a:	40 83       	st	Z, r20
    390c:	de 01       	movw	r26, r28
    390e:	a7 5b       	subi	r26, 0xB7	; 183
    3910:	bf 4f       	sbci	r27, 0xFF	; 255
    3912:	fe 01       	movw	r30, r28
    3914:	e7 5b       	subi	r30, 0xB7	; 183
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	80 81       	ld	r24, Z
    391a:	8f 5f       	subi	r24, 0xFF	; 255
    391c:	8c 93       	st	X, r24
				CLCD_voidSendData(RxData); // Echo back received character
    391e:	fe 01       	movw	r30, r28
    3920:	e2 5a       	subi	r30, 0xA2	; 162
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	0e 94 05 0b 	call	0x160a	; 0x160a <CLCD_voidSendData>

		USART_VidSendStringSynch("Enter Password:\n");
		USART_u8SendNewLine();

		// Wait for Password input
		while (passCounter < 4) {
    392a:	fe 01       	movw	r30, r28
    392c:	e7 5b       	subi	r30, 0xB7	; 183
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	80 81       	ld	r24, Z
    3932:	84 30       	cpi	r24, 0x04	; 4
    3934:	98 f2       	brcs	.-90     	; 0x38dc <APP_voidLogin+0x302>
				CLCD_voidSendData(RxData); // Echo back received character
			}
		}

		// Check Password validity
		for (u8 i = 0; i < 4; i++) {
    3936:	fe 01       	movw	r30, r28
    3938:	e9 5b       	subi	r30, 0xB9	; 185
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	10 82       	st	Z, r1
    393e:	29 c0       	rjmp	.+82     	; 0x3992 <APP_voidLogin+0x3b8>
			if (LOCAL_u8CheckPassword[i] != LOCAL_u8Password[i]) {
    3940:	fe 01       	movw	r30, r28
    3942:	e9 5b       	subi	r30, 0xB9	; 185
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	80 81       	ld	r24, Z
    3948:	28 2f       	mov	r18, r24
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	ce 01       	movw	r24, r28
    394e:	86 5a       	subi	r24, 0xA6	; 166
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	fc 01       	movw	r30, r24
    3954:	e2 0f       	add	r30, r18
    3956:	f3 1f       	adc	r31, r19
    3958:	40 81       	ld	r20, Z
    395a:	fe 01       	movw	r30, r28
    395c:	e9 5b       	subi	r30, 0xB9	; 185
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	80 81       	ld	r24, Z
    3962:	28 2f       	mov	r18, r24
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	ce 01       	movw	r24, r28
    3968:	8e 5a       	subi	r24, 0xAE	; 174
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	fc 01       	movw	r30, r24
    396e:	e2 0f       	add	r30, r18
    3970:	f3 1f       	adc	r31, r19
    3972:	80 81       	ld	r24, Z
    3974:	48 17       	cp	r20, r24
    3976:	21 f0       	breq	.+8      	; 0x3980 <APP_voidLogin+0x3a6>
				Password = 0;
    3978:	fe 01       	movw	r30, r28
    397a:	e4 5b       	subi	r30, 0xB4	; 180
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	10 82       	st	Z, r1
				CLCD_voidSendData(RxData); // Echo back received character
			}
		}

		// Check Password validity
		for (u8 i = 0; i < 4; i++) {
    3980:	de 01       	movw	r26, r28
    3982:	a9 5b       	subi	r26, 0xB9	; 185
    3984:	bf 4f       	sbci	r27, 0xFF	; 255
    3986:	fe 01       	movw	r30, r28
    3988:	e9 5b       	subi	r30, 0xB9	; 185
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	8f 5f       	subi	r24, 0xFF	; 255
    3990:	8c 93       	st	X, r24
    3992:	fe 01       	movw	r30, r28
    3994:	e9 5b       	subi	r30, 0xB9	; 185
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	84 30       	cpi	r24, 0x04	; 4
    399c:	88 f2       	brcs	.-94     	; 0x3940 <APP_voidLogin+0x366>
			if (LOCAL_u8CheckPassword[i] != LOCAL_u8Password[i]) {
				Password = 0;
			}
		}
		USART_u8SendNewLine();
    399e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>

		// Handle login result
		if (ID && Password) {
    39a2:	fe 01       	movw	r30, r28
    39a4:	e3 5b       	subi	r30, 0xB3	; 179
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	80 81       	ld	r24, Z
    39aa:	88 23       	and	r24, r24
    39ac:	09 f4       	brne	.+2      	; 0x39b0 <APP_voidLogin+0x3d6>
    39ae:	81 c0       	rjmp	.+258    	; 0x3ab2 <APP_voidLogin+0x4d8>
    39b0:	fe 01       	movw	r30, r28
    39b2:	e4 5b       	subi	r30, 0xB4	; 180
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 81       	ld	r24, Z
    39b8:	88 23       	and	r24, r24
    39ba:	09 f4       	brne	.+2      	; 0x39be <APP_voidLogin+0x3e4>
    39bc:	7a c0       	rjmp	.+244    	; 0x3ab2 <APP_voidLogin+0x4d8>
			CLCD_voidSendCommand(1);
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
			CLCD_voidSendString("Welcome Youssef");
    39c4:	84 ea       	ldi	r24, 0xA4	; 164
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	aa ef       	ldi	r26, 0xFA	; 250
    39d2:	b4 e4       	ldi	r27, 0x44	; 68
    39d4:	8d ab       	std	Y+53, r24	; 0x35
    39d6:	9e ab       	std	Y+54, r25	; 0x36
    39d8:	af ab       	std	Y+55, r26	; 0x37
    39da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39dc:	6d a9       	ldd	r22, Y+53	; 0x35
    39de:	7e a9       	ldd	r23, Y+54	; 0x36
    39e0:	8f a9       	ldd	r24, Y+55	; 0x37
    39e2:	98 ad       	ldd	r25, Y+56	; 0x38
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	4a ef       	ldi	r20, 0xFA	; 250
    39ea:	54 e4       	ldi	r21, 0x44	; 68
    39ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	89 ab       	std	Y+49, r24	; 0x31
    39f6:	9a ab       	std	Y+50, r25	; 0x32
    39f8:	ab ab       	std	Y+51, r26	; 0x33
    39fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39fc:	69 a9       	ldd	r22, Y+49	; 0x31
    39fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3a00:	8b a9       	ldd	r24, Y+51	; 0x33
    3a02:	9c a9       	ldd	r25, Y+52	; 0x34
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	40 e8       	ldi	r20, 0x80	; 128
    3a0a:	5f e3       	ldi	r21, 0x3F	; 63
    3a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a10:	88 23       	and	r24, r24
    3a12:	2c f4       	brge	.+10     	; 0x3a1e <APP_voidLogin+0x444>
		__ticks = 1;
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	98 ab       	std	Y+48, r25	; 0x30
    3a1a:	8f a7       	std	Y+47, r24	; 0x2f
    3a1c:	3f c0       	rjmp	.+126    	; 0x3a9c <APP_voidLogin+0x4c2>
	else if (__tmp > 65535)
    3a1e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a20:	7a a9       	ldd	r23, Y+50	; 0x32
    3a22:	8b a9       	ldd	r24, Y+51	; 0x33
    3a24:	9c a9       	ldd	r25, Y+52	; 0x34
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	3f ef       	ldi	r19, 0xFF	; 255
    3a2a:	4f e7       	ldi	r20, 0x7F	; 127
    3a2c:	57 e4       	ldi	r21, 0x47	; 71
    3a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a32:	18 16       	cp	r1, r24
    3a34:	4c f5       	brge	.+82     	; 0x3a88 <APP_voidLogin+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a36:	6d a9       	ldd	r22, Y+53	; 0x35
    3a38:	7e a9       	ldd	r23, Y+54	; 0x36
    3a3a:	8f a9       	ldd	r24, Y+55	; 0x37
    3a3c:	98 ad       	ldd	r25, Y+56	; 0x38
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e2       	ldi	r20, 0x20	; 32
    3a44:	51 e4       	ldi	r21, 0x41	; 65
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	bc 01       	movw	r22, r24
    3a50:	cd 01       	movw	r24, r26
    3a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	98 ab       	std	Y+48, r25	; 0x30
    3a5c:	8f a7       	std	Y+47, r24	; 0x2f
    3a5e:	0f c0       	rjmp	.+30     	; 0x3a7e <APP_voidLogin+0x4a4>
    3a60:	88 ec       	ldi	r24, 0xC8	; 200
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	9e a7       	std	Y+46, r25	; 0x2e
    3a66:	8d a7       	std	Y+45, r24	; 0x2d
    3a68:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <APP_voidLogin+0x492>
    3a70:	9e a7       	std	Y+46, r25	; 0x2e
    3a72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a74:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a76:	98 a9       	ldd	r25, Y+48	; 0x30
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	98 ab       	std	Y+48, r25	; 0x30
    3a7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a80:	98 a9       	ldd	r25, Y+48	; 0x30
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	69 f7       	brne	.-38     	; 0x3a60 <APP_voidLogin+0x486>
    3a86:	1e c1       	rjmp	.+572    	; 0x3cc4 <APP_voidLogin+0x6ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a88:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a8c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a8e:	9c a9       	ldd	r25, Y+52	; 0x34
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	98 ab       	std	Y+48, r25	; 0x30
    3a9a:	8f a7       	std	Y+47, r24	; 0x2f
    3a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a9e:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa0:	9c a7       	std	Y+44, r25	; 0x2c
    3aa2:	8b a7       	std	Y+43, r24	; 0x2b
    3aa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aa6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <APP_voidLogin+0x4ce>
    3aac:	9c a7       	std	Y+44, r25	; 0x2c
    3aae:	8b a7       	std	Y+43, r24	; 0x2b
    3ab0:	09 c1       	rjmp	.+530    	; 0x3cc4 <APP_voidLogin+0x6ea>
			_delay_ms(2000);
			break;
		} else {
			CLCD_voidSendCommand(1);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
			CLCD_voidSendString("Invalid ID or Password");
    3ab8:	84 eb       	ldi	r24, 0xB4	; 180
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
			LoginI--;
    3ac0:	de 01       	movw	r26, r28
    3ac2:	a5 5b       	subi	r26, 0xB5	; 181
    3ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e5 5b       	subi	r30, 0xB5	; 181
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	80 81       	ld	r24, Z
    3ace:	81 50       	subi	r24, 0x01	; 1
    3ad0:	8c 93       	st	X, r24
			if (LoginI) {
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e5 5b       	subi	r30, 0xB5	; 181
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	80 81       	ld	r24, Z
    3ada:	88 23       	and	r24, r24
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <APP_voidLogin+0x506>
    3ade:	eb c0       	rjmp	.+470    	; 0x3cb6 <APP_voidLogin+0x6dc>
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	aa ef       	ldi	r26, 0xFA	; 250
    3ae6:	b4 e4       	ldi	r27, 0x44	; 68
    3ae8:	8f a3       	std	Y+39, r24	; 0x27
    3aea:	98 a7       	std	Y+40, r25	; 0x28
    3aec:	a9 a7       	std	Y+41, r26	; 0x29
    3aee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af0:	6f a1       	ldd	r22, Y+39	; 0x27
    3af2:	78 a5       	ldd	r23, Y+40	; 0x28
    3af4:	89 a5       	ldd	r24, Y+41	; 0x29
    3af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	4a ef       	ldi	r20, 0xFA	; 250
    3afe:	54 e4       	ldi	r21, 0x44	; 68
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	8b a3       	std	Y+35, r24	; 0x23
    3b0a:	9c a3       	std	Y+36, r25	; 0x24
    3b0c:	ad a3       	std	Y+37, r26	; 0x25
    3b0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b10:	6b a1       	ldd	r22, Y+35	; 0x23
    3b12:	7c a1       	ldd	r23, Y+36	; 0x24
    3b14:	8d a1       	ldd	r24, Y+37	; 0x25
    3b16:	9e a1       	ldd	r25, Y+38	; 0x26
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e8       	ldi	r20, 0x80	; 128
    3b1e:	5f e3       	ldi	r21, 0x3F	; 63
    3b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b24:	88 23       	and	r24, r24
    3b26:	2c f4       	brge	.+10     	; 0x3b32 <APP_voidLogin+0x558>
		__ticks = 1;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	9a a3       	std	Y+34, r25	; 0x22
    3b2e:	89 a3       	std	Y+33, r24	; 0x21
    3b30:	3f c0       	rjmp	.+126    	; 0x3bb0 <APP_voidLogin+0x5d6>
	else if (__tmp > 65535)
    3b32:	6b a1       	ldd	r22, Y+35	; 0x23
    3b34:	7c a1       	ldd	r23, Y+36	; 0x24
    3b36:	8d a1       	ldd	r24, Y+37	; 0x25
    3b38:	9e a1       	ldd	r25, Y+38	; 0x26
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	3f ef       	ldi	r19, 0xFF	; 255
    3b3e:	4f e7       	ldi	r20, 0x7F	; 127
    3b40:	57 e4       	ldi	r21, 0x47	; 71
    3b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b46:	18 16       	cp	r1, r24
    3b48:	4c f5       	brge	.+82     	; 0x3b9c <APP_voidLogin+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    3b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    3b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e2       	ldi	r20, 0x20	; 32
    3b58:	51 e4       	ldi	r21, 0x41	; 65
    3b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	bc 01       	movw	r22, r24
    3b64:	cd 01       	movw	r24, r26
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	9a a3       	std	Y+34, r25	; 0x22
    3b70:	89 a3       	std	Y+33, r24	; 0x21
    3b72:	0f c0       	rjmp	.+30     	; 0x3b92 <APP_voidLogin+0x5b8>
    3b74:	88 ec       	ldi	r24, 0xC8	; 200
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	98 a3       	std	Y+32, r25	; 0x20
    3b7a:	8f 8f       	std	Y+31, r24	; 0x1f
    3b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	f1 f7       	brne	.-4      	; 0x3b80 <APP_voidLogin+0x5a6>
    3b84:	98 a3       	std	Y+32, r25	; 0x20
    3b86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b88:	89 a1       	ldd	r24, Y+33	; 0x21
    3b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	9a a3       	std	Y+34, r25	; 0x22
    3b90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b92:	89 a1       	ldd	r24, Y+33	; 0x21
    3b94:	9a a1       	ldd	r25, Y+34	; 0x22
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	69 f7       	brne	.-38     	; 0x3b74 <APP_voidLogin+0x59a>
    3b9a:	14 c0       	rjmp	.+40     	; 0x3bc4 <APP_voidLogin+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    3ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	9a a3       	std	Y+34, r25	; 0x22
    3bae:	89 a3       	std	Y+33, r24	; 0x21
    3bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    3bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    3bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    3bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bbc:	01 97       	sbiw	r24, 0x01	; 1
    3bbe:	f1 f7       	brne	.-4      	; 0x3bbc <APP_voidLogin+0x5e2>
    3bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    3bc2:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				CLCD_voidSendCommand(1);
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
				CLCD_voidSendString("Try Again..");
    3bca:	8b ec       	ldi	r24, 0xCB	; 203
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	aa ef       	ldi	r26, 0xFA	; 250
    3bd8:	b4 e4       	ldi	r27, 0x44	; 68
    3bda:	89 8f       	std	Y+25, r24	; 0x19
    3bdc:	9a 8f       	std	Y+26, r25	; 0x1a
    3bde:	ab 8f       	std	Y+27, r26	; 0x1b
    3be0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be2:	69 8d       	ldd	r22, Y+25	; 0x19
    3be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	4a ef       	ldi	r20, 0xFA	; 250
    3bf0:	54 e4       	ldi	r21, 0x44	; 68
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	8d 8b       	std	Y+21, r24	; 0x15
    3bfc:	9e 8b       	std	Y+22, r25	; 0x16
    3bfe:	af 8b       	std	Y+23, r26	; 0x17
    3c00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c02:	6d 89       	ldd	r22, Y+21	; 0x15
    3c04:	7e 89       	ldd	r23, Y+22	; 0x16
    3c06:	8f 89       	ldd	r24, Y+23	; 0x17
    3c08:	98 8d       	ldd	r25, Y+24	; 0x18
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e8       	ldi	r20, 0x80	; 128
    3c10:	5f e3       	ldi	r21, 0x3F	; 63
    3c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c16:	88 23       	and	r24, r24
    3c18:	2c f4       	brge	.+10     	; 0x3c24 <APP_voidLogin+0x64a>
		__ticks = 1;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	9c 8b       	std	Y+20, r25	; 0x14
    3c20:	8b 8b       	std	Y+19, r24	; 0x13
    3c22:	3f c0       	rjmp	.+126    	; 0x3ca2 <APP_voidLogin+0x6c8>
	else if (__tmp > 65535)
    3c24:	6d 89       	ldd	r22, Y+21	; 0x15
    3c26:	7e 89       	ldd	r23, Y+22	; 0x16
    3c28:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	3f ef       	ldi	r19, 0xFF	; 255
    3c30:	4f e7       	ldi	r20, 0x7F	; 127
    3c32:	57 e4       	ldi	r21, 0x47	; 71
    3c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c38:	18 16       	cp	r1, r24
    3c3a:	4c f5       	brge	.+82     	; 0x3c8e <APP_voidLogin+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	40 e2       	ldi	r20, 0x20	; 32
    3c4a:	51 e4       	ldi	r21, 0x41	; 65
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	bc 01       	movw	r22, r24
    3c56:	cd 01       	movw	r24, r26
    3c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	9c 8b       	std	Y+20, r25	; 0x14
    3c62:	8b 8b       	std	Y+19, r24	; 0x13
    3c64:	0f c0       	rjmp	.+30     	; 0x3c84 <APP_voidLogin+0x6aa>
    3c66:	88 ec       	ldi	r24, 0xC8	; 200
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	9a 8b       	std	Y+18, r25	; 0x12
    3c6c:	89 8b       	std	Y+17, r24	; 0x11
    3c6e:	89 89       	ldd	r24, Y+17	; 0x11
    3c70:	9a 89       	ldd	r25, Y+18	; 0x12
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <APP_voidLogin+0x698>
    3c76:	9a 8b       	std	Y+18, r25	; 0x12
    3c78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	9c 8b       	std	Y+20, r25	; 0x14
    3c82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c84:	8b 89       	ldd	r24, Y+19	; 0x13
    3c86:	9c 89       	ldd	r25, Y+20	; 0x14
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	69 f7       	brne	.-38     	; 0x3c66 <APP_voidLogin+0x68c>
    3c8c:	14 c0       	rjmp	.+40     	; 0x3cb6 <APP_voidLogin+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c90:	7e 89       	ldd	r23, Y+22	; 0x16
    3c92:	8f 89       	ldd	r24, Y+23	; 0x17
    3c94:	98 8d       	ldd	r25, Y+24	; 0x18
    3c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ca0:	8b 8b       	std	Y+19, r24	; 0x13
    3ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca6:	98 8b       	std	Y+16, r25	; 0x10
    3ca8:	8f 87       	std	Y+15, r24	; 0x0f
    3caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cac:	98 89       	ldd	r25, Y+16	; 0x10
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	f1 f7       	brne	.-4      	; 0x3cae <APP_voidLogin+0x6d4>
    3cb2:	98 8b       	std	Y+16, r25	; 0x10
    3cb4:	8f 87       	std	Y+15, r24	; 0x0f

	CLCD_voidGotoXY(3, 0);
	CLCD_voidSendString("Welcome...");
	_delay_ms(2000);

	while (LoginI) {
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e5 5b       	subi	r30, 0xB5	; 181
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 81       	ld	r24, Z
    3cbe:	88 23       	and	r24, r24
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <APP_voidLogin+0x6ea>
    3cc2:	73 cd       	rjmp	.-1306   	; 0x37aa <APP_voidLogin+0x1d0>
				_delay_ms(2000);
			}
		}
	}

	if (!(ID && Password)) {
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e3 5b       	subi	r30, 0xB3	; 179
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	88 23       	and	r24, r24
    3cce:	39 f0       	breq	.+14     	; 0x3cde <APP_voidLogin+0x704>
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	e4 5b       	subi	r30, 0xB4	; 180
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	80 81       	ld	r24, Z
    3cd8:	88 23       	and	r24, r24
    3cda:	09 f0       	breq	.+2      	; 0x3cde <APP_voidLogin+0x704>
    3cdc:	79 c0       	rjmp	.+242    	; 0x3dd0 <APP_voidLogin+0x7f6>
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	aa ef       	ldi	r26, 0xFA	; 250
    3ce4:	b4 e4       	ldi	r27, 0x44	; 68
    3ce6:	8b 87       	std	Y+11, r24	; 0x0b
    3ce8:	9c 87       	std	Y+12, r25	; 0x0c
    3cea:	ad 87       	std	Y+13, r26	; 0x0d
    3cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	4a ef       	ldi	r20, 0xFA	; 250
    3cfc:	54 e4       	ldi	r21, 0x44	; 68
    3cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	8f 83       	std	Y+7, r24	; 0x07
    3d08:	98 87       	std	Y+8, r25	; 0x08
    3d0a:	a9 87       	std	Y+9, r26	; 0x09
    3d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <APP_voidLogin+0x756>
		__ticks = 1;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9e 83       	std	Y+6, r25	; 0x06
    3d2c:	8d 83       	std	Y+5, r24	; 0x05
    3d2e:	3f c0       	rjmp	.+126    	; 0x3dae <APP_voidLogin+0x7d4>
	else if (__tmp > 65535)
    3d30:	6f 81       	ldd	r22, Y+7	; 0x07
    3d32:	78 85       	ldd	r23, Y+8	; 0x08
    3d34:	89 85       	ldd	r24, Y+9	; 0x09
    3d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	4c f5       	brge	.+82     	; 0x3d9a <APP_voidLogin+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	9e 83       	std	Y+6, r25	; 0x06
    3d6e:	8d 83       	std	Y+5, r24	; 0x05
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90 <APP_voidLogin+0x7b6>
    3d72:	88 ec       	ldi	r24, 0xC8	; 200
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <APP_voidLogin+0x7a4>
    3d82:	9c 83       	std	Y+4, r25	; 0x04
    3d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	8d 81       	ldd	r24, Y+5	; 0x05
    3d88:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	9e 83       	std	Y+6, r25	; 0x06
    3d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	8d 81       	ldd	r24, Y+5	; 0x05
    3d92:	9e 81       	ldd	r25, Y+6	; 0x06
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <APP_voidLogin+0x798>
    3d98:	14 c0       	rjmp	.+40     	; 0x3dc2 <APP_voidLogin+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d9c:	78 85       	ldd	r23, Y+8	; 0x08
    3d9e:	89 85       	ldd	r24, Y+9	; 0x09
    3da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9e 83       	std	Y+6, r25	; 0x06
    3dac:	8d 83       	std	Y+5, r24	; 0x05
    3dae:	8d 81       	ldd	r24, Y+5	; 0x05
    3db0:	9e 81       	ldd	r25, Y+6	; 0x06
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	89 83       	std	Y+1, r24	; 0x01
    3db6:	89 81       	ldd	r24, Y+1	; 0x01
    3db8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <APP_voidLogin+0x7e0>
    3dbe:	9a 83       	std	Y+2, r25	; 0x02
    3dc0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLCD_voidSendCommand(1);
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	0e 94 9e 09 	call	0x133c	; 0x133c <CLCD_voidSendCommand>
		CLCD_voidSendString("Invalid Login ");
    3dc8:	87 ed       	ldi	r24, 0xD7	; 215
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>

	}

}
    3dd0:	c2 5a       	subi	r28, 0xA2	; 162
    3dd2:	df 4f       	sbci	r29, 0xFF	; 255
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	08 95       	ret

00003de8 <ConvertToTemp>:




// Send options using USART_VidSendStringSynch function
u16 ConvertToTemp(u16 adc_value) {
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <ConvertToTemp+0x6>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <ConvertToTemp+0x8>
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
    3df4:	9c 83       	std	Y+4, r25	; 0x04
    3df6:	8b 83       	std	Y+3, r24	; 0x03
	u16 temp_celsius ;
    temp_celsius = ((u32)adc_value * 5000ul) / (1024.0 * 10.0);
    3df8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfc:	cc 01       	movw	r24, r24
    3dfe:	a0 e0       	ldi	r26, 0x00	; 0
    3e00:	b0 e0       	ldi	r27, 0x00	; 0
    3e02:	28 e8       	ldi	r18, 0x88	; 136
    3e04:	33 e1       	ldi	r19, 0x13	; 19
    3e06:	40 e0       	ldi	r20, 0x00	; 0
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	bc 01       	movw	r22, r24
    3e0c:	cd 01       	movw	r24, r26
    3e0e:	0e 94 10 24 	call	0x4820	; 0x4820 <__mulsi3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	bc 01       	movw	r22, r24
    3e18:	cd 01       	movw	r24, r26
    3e1a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e2       	ldi	r20, 0x20	; 32
    3e2c:	56 e4       	ldi	r21, 0x46	; 70
    3e2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	bc 01       	movw	r22, r24
    3e38:	cd 01       	movw	r24, r26
    3e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
    return temp_celsius;
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <APP_voidOpenDoor>:




void APP_voidOpenDoor(void)
{
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62

	/* PWM mode in timer1 with top value = 40000 to control the duty cycle   */
	TIMER1_voidSetCompValue(6000);
    3e60:	80 e7       	ldi	r24, 0x70	; 112
    3e62:	97 e1       	ldi	r25, 0x17	; 23
    3e64:	0e 94 39 17 	call	0x2e72	; 0x2e72 <TIMER1_voidSetCompValue>


}
    3e68:	cf 91       	pop	r28
    3e6a:	df 91       	pop	r29
    3e6c:	08 95       	ret

00003e6e <APP_voidCloseDoor>:

void APP_voidCloseDoor(void)
{
    3e6e:	df 93       	push	r29
    3e70:	cf 93       	push	r28
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
	/* PWM mode in timer1 with top value = 40000 to control the duty cycle   */
	TIMER1_voidSetCompValue(1000);
    3e76:	88 ee       	ldi	r24, 0xE8	; 232
    3e78:	93 e0       	ldi	r25, 0x03	; 3
    3e7a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <TIMER1_voidSetCompValue>

}
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <APP_voidControlFanSpeed>:

void APP_voidControlFanSpeed(void) {
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <APP_voidControlFanSpeed+0x6>
    3e8a:	00 d0       	rcall	.+0      	; 0x3e8c <APP_voidControlFanSpeed+0x8>
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    u16 adc_value;
    u16 temp_celsius;

    // Read temperature from LM35 sensor using ADC
    if (ADC_u8StartConversionSynch(7, &adc_value) == OK) {
    3e90:	9e 01       	movw	r18, r28
    3e92:	2d 5f       	subi	r18, 0xFD	; 253
    3e94:	3f 4f       	sbci	r19, 0xFF	; 255
    3e96:	87 e0       	ldi	r24, 0x07	; 7
    3e98:	b9 01       	movw	r22, r18
    3e9a:	0e 94 bb 07 	call	0xf76	; 0xf76 <ADC_u8StartConversionSynch>
    3e9e:	88 23       	and	r24, r24
    3ea0:	b1 f4       	brne	.+44     	; 0x3ece <APP_voidControlFanSpeed+0x4a>
        // Convert ADC value to temperature in Celsius
        temp_celsius = ConvertToTemp(adc_value);
    3ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea6:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <ConvertToTemp>
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01

        // Check temperature threshold to determine whether to turn on or off the fan
        if (temp_celsius > 30) {
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb2:	8f 31       	cpi	r24, 0x1F	; 31
    3eb4:	91 05       	cpc	r25, r1
    3eb6:	30 f0       	brcs	.+12     	; 0x3ec4 <APP_voidControlFanSpeed+0x40>
            // High temperature, turn on the fan
            DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_HIGH);
    3eb8:	83 e0       	ldi	r24, 0x03	; 3
    3eba:	63 e0       	ldi	r22, 0x03	; 3
    3ebc:	41 e0       	ldi	r20, 0x01	; 1
    3ebe:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    3ec2:	05 c0       	rjmp	.+10     	; 0x3ece <APP_voidControlFanSpeed+0x4a>
        } else {
            // Normal temperature, turn off the fan
            DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_LOW);
    3ec4:	83 e0       	ldi	r24, 0x03	; 3
    3ec6:	63 e0       	ldi	r22, 0x03	; 3
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
        }
    }
}
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
    3ed6:	cf 91       	pop	r28
    3ed8:	df 91       	pop	r29
    3eda:	08 95       	ret

00003edc <APP_voidControlLight>:





void APP_voidControlLight(void) {
    3edc:	af 92       	push	r10
    3ede:	bf 92       	push	r11
    3ee0:	cf 92       	push	r12
    3ee2:	df 92       	push	r13
    3ee4:	ef 92       	push	r14
    3ee6:	ff 92       	push	r15
    3ee8:	0f 93       	push	r16
    3eea:	1f 93       	push	r17
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <APP_voidControlLight+0x16>
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <APP_voidControlLight+0x18>
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    u16 adc_value;
    u8 LOCAL_u8Light;

    // Read analog voltage from LDR using ADC
    if (ADC_u8StartConversionSynch(0, &adc_value) == OK) {
    3ef8:	9e 01       	movw	r18, r28
    3efa:	2d 5f       	subi	r18, 0xFD	; 253
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	b9 01       	movw	r22, r18
    3f02:	0e 94 bb 07 	call	0xf76	; 0xf76 <ADC_u8StartConversionSynch>
    3f06:	88 23       	and	r24, r24
    3f08:	09 f0       	breq	.+2      	; 0x3f0c <APP_voidControlLight+0x30>
    3f0a:	43 c0       	rjmp	.+134    	; 0x3f92 <APP_voidControlLight+0xb6>
        // Map the ADC value to a range suitable for LED brightness
        LOCAL_u8Light = Map(0, 255, 0, 7, adc_value);
    3f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f10:	cc 01       	movw	r24, r24
    3f12:	a0 e0       	ldi	r26, 0x00	; 0
    3f14:	b0 e0       	ldi	r27, 0x00	; 0
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <APP_voidControlLight+0x3c>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <APP_voidControlLight+0x3e>
    3f1a:	ed b7       	in	r30, 0x3d	; 61
    3f1c:	fe b7       	in	r31, 0x3e	; 62
    3f1e:	31 96       	adiw	r30, 0x01	; 1
    3f20:	80 83       	st	Z, r24
    3f22:	91 83       	std	Z+1, r25	; 0x01
    3f24:	a2 83       	std	Z+2, r26	; 0x02
    3f26:	b3 83       	std	Z+3, r27	; 0x03
    3f28:	60 e0       	ldi	r22, 0x00	; 0
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	2f ef       	ldi	r18, 0xFF	; 255
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	ee 24       	eor	r14, r14
    3f3a:	ff 24       	eor	r15, r15
    3f3c:	87 01       	movw	r16, r14
    3f3e:	0f 2e       	mov	r0, r31
    3f40:	f7 e0       	ldi	r31, 0x07	; 7
    3f42:	af 2e       	mov	r10, r31
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	bf 2e       	mov	r11, r31
    3f48:	f0 e0       	ldi	r31, 0x00	; 0
    3f4a:	cf 2e       	mov	r12, r31
    3f4c:	f0 e0       	ldi	r31, 0x00	; 0
    3f4e:	df 2e       	mov	r13, r31
    3f50:	f0 2d       	mov	r31, r0
    3f52:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <Map>
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	8a 83       	std	Y+2, r24	; 0x02

        // Set the LED states based on the mapped value
        for (u8 i = 0; i < 8; i++) {
    3f64:	19 82       	std	Y+1, r1	; 0x01
    3f66:	12 c0       	rjmp	.+36     	; 0x3f8c <APP_voidControlLight+0xb0>

            if (i < LOCAL_u8Light) {
    3f68:	99 81       	ldd	r25, Y+1	; 0x01
    3f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6c:	98 17       	cp	r25, r24
    3f6e:	30 f4       	brcc	.+12     	; 0x3f7c <APP_voidControlLight+0xa0>
                DIO_u8SetPinValue(DIO_u8PORTC, i, DIO_u8PIN_HIGH); // Turn on LED
    3f70:	82 e0       	ldi	r24, 0x02	; 2
    3f72:	69 81       	ldd	r22, Y+1	; 0x01
    3f74:	41 e0       	ldi	r20, 0x01	; 1
    3f76:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    3f7a:	05 c0       	rjmp	.+10     	; 0x3f86 <APP_voidControlLight+0xaa>
            } else {
                DIO_u8SetPinValue(DIO_u8PORTC, i, DIO_u8PIN_LOW); // Turn off LED
    3f7c:	82 e0       	ldi	r24, 0x02	; 2
    3f7e:	69 81       	ldd	r22, Y+1	; 0x01
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
    if (ADC_u8StartConversionSynch(0, &adc_value) == OK) {
        // Map the ADC value to a range suitable for LED brightness
        LOCAL_u8Light = Map(0, 255, 0, 7, adc_value);

        // Set the LED states based on the mapped value
        for (u8 i = 0; i < 8; i++) {
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	8f 5f       	subi	r24, 0xFF	; 255
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	88 30       	cpi	r24, 0x08	; 8
    3f90:	58 f3       	brcs	.-42     	; 0x3f68 <APP_voidControlLight+0x8c>
            } else {
                DIO_u8SetPinValue(DIO_u8PORTC, i, DIO_u8PIN_LOW); // Turn off LED
            }
        }
    }
}
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	0f 90       	pop	r0
    3f9a:	cf 91       	pop	r28
    3f9c:	df 91       	pop	r29
    3f9e:	1f 91       	pop	r17
    3fa0:	0f 91       	pop	r16
    3fa2:	ff 90       	pop	r15
    3fa4:	ef 90       	pop	r14
    3fa6:	df 90       	pop	r13
    3fa8:	cf 90       	pop	r12
    3faa:	bf 90       	pop	r11
    3fac:	af 90       	pop	r10
    3fae:	08 95       	ret

00003fb0 <play_tone>:




// Function to generate a tone of given frequency and duration
void play_tone(u32 frequency, u32 duration) {
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	c4 54       	subi	r28, 0x44	; 68
    3fba:	d0 40       	sbci	r29, 0x00	; 0
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	fd 96       	adiw	r30, 0x3d	; 61
    3fca:	60 83       	st	Z, r22
    3fcc:	71 83       	std	Z+1, r23	; 0x01
    3fce:	82 83       	std	Z+2, r24	; 0x02
    3fd0:	93 83       	std	Z+3, r25	; 0x03
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	ef 5b       	subi	r30, 0xBF	; 191
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	20 83       	st	Z, r18
    3fda:	31 83       	std	Z+1, r19	; 0x01
    3fdc:	42 83       	std	Z+2, r20	; 0x02
    3fde:	53 83       	std	Z+3, r21	; 0x03
	u32 period = 1000000 / frequency; // Calculate period in microseconds
    3fe0:	80 e4       	ldi	r24, 0x40	; 64
    3fe2:	92 e4       	ldi	r25, 0x42	; 66
    3fe4:	af e0       	ldi	r26, 0x0F	; 15
    3fe6:	b0 e0       	ldi	r27, 0x00	; 0
    3fe8:	fe 01       	movw	r30, r28
    3fea:	fd 96       	adiw	r30, 0x3d	; 61
    3fec:	20 81       	ld	r18, Z
    3fee:	31 81       	ldd	r19, Z+1	; 0x01
    3ff0:	42 81       	ldd	r20, Z+2	; 0x02
    3ff2:	53 81       	ldd	r21, Z+3	; 0x03
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	0e 94 2f 24 	call	0x485e	; 0x485e <__udivmodsi4>
    3ffc:	da 01       	movw	r26, r20
    3ffe:	c9 01       	movw	r24, r18
    4000:	89 af       	std	Y+57, r24	; 0x39
    4002:	9a af       	std	Y+58, r25	; 0x3a
    4004:	ab af       	std	Y+59, r26	; 0x3b
    4006:	bc af       	std	Y+60, r27	; 0x3c
	u32 pulse_width = period / 2; // Half period for square wave
    4008:	89 ad       	ldd	r24, Y+57	; 0x39
    400a:	9a ad       	ldd	r25, Y+58	; 0x3a
    400c:	ab ad       	ldd	r26, Y+59	; 0x3b
    400e:	bc ad       	ldd	r27, Y+60	; 0x3c
    4010:	b6 95       	lsr	r27
    4012:	a7 95       	ror	r26
    4014:	97 95       	ror	r25
    4016:	87 95       	ror	r24
    4018:	8d ab       	std	Y+53, r24	; 0x35
    401a:	9e ab       	std	Y+54, r25	; 0x36
    401c:	af ab       	std	Y+55, r26	; 0x37
    401e:	b8 af       	std	Y+56, r27	; 0x38

	for ( u32 i = 0; i < duration * frequency / 1000; i++) {
    4020:	19 aa       	std	Y+49, r1	; 0x31
    4022:	1a aa       	std	Y+50, r1	; 0x32
    4024:	1b aa       	std	Y+51, r1	; 0x33
    4026:	1c aa       	std	Y+52, r1	; 0x34
    4028:	99 c1       	rjmp	.+818    	; 0x435c <play_tone+0x3ac>
		DIO_u8SetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PORT_HIGH) ;
    402a:	83 e0       	ldi	r24, 0x03	; 3
    402c:	62 e0       	ldi	r22, 0x02	; 2
    402e:	4f ef       	ldi	r20, 0xFF	; 255
    4030:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		_delay_us(pulse_width); // Wait for half period
    4034:	6d a9       	ldd	r22, Y+53	; 0x35
    4036:	7e a9       	ldd	r23, Y+54	; 0x36
    4038:	8f a9       	ldd	r24, Y+55	; 0x37
    403a:	98 ad       	ldd	r25, Y+56	; 0x38
    403c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	8d a7       	std	Y+45, r24	; 0x2d
    4046:	9e a7       	std	Y+46, r25	; 0x2e
    4048:	af a7       	std	Y+47, r26	; 0x2f
    404a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    404c:	6d a5       	ldd	r22, Y+45	; 0x2d
    404e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4050:	8f a5       	ldd	r24, Y+47	; 0x2f
    4052:	98 a9       	ldd	r25, Y+48	; 0x30
    4054:	2b ea       	ldi	r18, 0xAB	; 171
    4056:	3a ea       	ldi	r19, 0xAA	; 170
    4058:	4a e2       	ldi	r20, 0x2A	; 42
    405a:	50 e4       	ldi	r21, 0x40	; 64
    405c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	89 a7       	std	Y+41, r24	; 0x29
    4066:	9a a7       	std	Y+42, r25	; 0x2a
    4068:	ab a7       	std	Y+43, r26	; 0x2b
    406a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    406c:	69 a5       	ldd	r22, Y+41	; 0x29
    406e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4070:	8b a5       	ldd	r24, Y+43	; 0x2b
    4072:	9c a5       	ldd	r25, Y+44	; 0x2c
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e8       	ldi	r20, 0x80	; 128
    407a:	5f e3       	ldi	r21, 0x3F	; 63
    407c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4080:	88 23       	and	r24, r24
    4082:	1c f4       	brge	.+6      	; 0x408a <play_tone+0xda>
		__ticks = 1;
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	88 a7       	std	Y+40, r24	; 0x28
    4088:	91 c0       	rjmp	.+290    	; 0x41ac <play_tone+0x1fc>
	else if (__tmp > 255)
    408a:	69 a5       	ldd	r22, Y+41	; 0x29
    408c:	7a a5       	ldd	r23, Y+42	; 0x2a
    408e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4090:	9c a5       	ldd	r25, Y+44	; 0x2c
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	4f e7       	ldi	r20, 0x7F	; 127
    4098:	53 e4       	ldi	r21, 0x43	; 67
    409a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409e:	18 16       	cp	r1, r24
    40a0:	0c f0       	brlt	.+2      	; 0x40a4 <play_tone+0xf4>
    40a2:	7b c0       	rjmp	.+246    	; 0x419a <play_tone+0x1ea>
	{
		_delay_ms(__us / 1000.0);
    40a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    40a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    40a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40aa:	98 a9       	ldd	r25, Y+48	; 0x30
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	4a e7       	ldi	r20, 0x7A	; 122
    40b2:	54 e4       	ldi	r21, 0x44	; 68
    40b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	8c a3       	std	Y+36, r24	; 0x24
    40be:	9d a3       	std	Y+37, r25	; 0x25
    40c0:	ae a3       	std	Y+38, r26	; 0x26
    40c2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c4:	6c a1       	ldd	r22, Y+36	; 0x24
    40c6:	7d a1       	ldd	r23, Y+37	; 0x25
    40c8:	8e a1       	ldd	r24, Y+38	; 0x26
    40ca:	9f a1       	ldd	r25, Y+39	; 0x27
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	4a ef       	ldi	r20, 0xFA	; 250
    40d2:	54 e4       	ldi	r21, 0x44	; 68
    40d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	88 a3       	std	Y+32, r24	; 0x20
    40de:	99 a3       	std	Y+33, r25	; 0x21
    40e0:	aa a3       	std	Y+34, r26	; 0x22
    40e2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    40e4:	68 a1       	ldd	r22, Y+32	; 0x20
    40e6:	79 a1       	ldd	r23, Y+33	; 0x21
    40e8:	8a a1       	ldd	r24, Y+34	; 0x22
    40ea:	9b a1       	ldd	r25, Y+35	; 0x23
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	40 e8       	ldi	r20, 0x80	; 128
    40f2:	5f e3       	ldi	r21, 0x3F	; 63
    40f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40f8:	88 23       	and	r24, r24
    40fa:	2c f4       	brge	.+10     	; 0x4106 <play_tone+0x156>
		__ticks = 1;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	9f 8f       	std	Y+31, r25	; 0x1f
    4102:	8e 8f       	std	Y+30, r24	; 0x1e
    4104:	3f c0       	rjmp	.+126    	; 0x4184 <play_tone+0x1d4>
	else if (__tmp > 65535)
    4106:	68 a1       	ldd	r22, Y+32	; 0x20
    4108:	79 a1       	ldd	r23, Y+33	; 0x21
    410a:	8a a1       	ldd	r24, Y+34	; 0x22
    410c:	9b a1       	ldd	r25, Y+35	; 0x23
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	3f ef       	ldi	r19, 0xFF	; 255
    4112:	4f e7       	ldi	r20, 0x7F	; 127
    4114:	57 e4       	ldi	r21, 0x47	; 71
    4116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411a:	18 16       	cp	r1, r24
    411c:	4c f5       	brge	.+82     	; 0x4170 <play_tone+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    411e:	6c a1       	ldd	r22, Y+36	; 0x24
    4120:	7d a1       	ldd	r23, Y+37	; 0x25
    4122:	8e a1       	ldd	r24, Y+38	; 0x26
    4124:	9f a1       	ldd	r25, Y+39	; 0x27
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	40 e2       	ldi	r20, 0x20	; 32
    412c:	51 e4       	ldi	r21, 0x41	; 65
    412e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	bc 01       	movw	r22, r24
    4138:	cd 01       	movw	r24, r26
    413a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	9f 8f       	std	Y+31, r25	; 0x1f
    4144:	8e 8f       	std	Y+30, r24	; 0x1e
    4146:	0f c0       	rjmp	.+30     	; 0x4166 <play_tone+0x1b6>
    4148:	88 ec       	ldi	r24, 0xC8	; 200
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	9d 8f       	std	Y+29, r25	; 0x1d
    414e:	8c 8f       	std	Y+28, r24	; 0x1c
    4150:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4152:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	f1 f7       	brne	.-4      	; 0x4154 <play_tone+0x1a4>
    4158:	9d 8f       	std	Y+29, r25	; 0x1d
    415a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    415c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    415e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4160:	01 97       	sbiw	r24, 0x01	; 1
    4162:	9f 8f       	std	Y+31, r25	; 0x1f
    4164:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4168:	9f 8d       	ldd	r25, Y+31	; 0x1f
    416a:	00 97       	sbiw	r24, 0x00	; 0
    416c:	69 f7       	brne	.-38     	; 0x4148 <play_tone+0x198>
    416e:	24 c0       	rjmp	.+72     	; 0x41b8 <play_tone+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4170:	68 a1       	ldd	r22, Y+32	; 0x20
    4172:	79 a1       	ldd	r23, Y+33	; 0x21
    4174:	8a a1       	ldd	r24, Y+34	; 0x22
    4176:	9b a1       	ldd	r25, Y+35	; 0x23
    4178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	9f 8f       	std	Y+31, r25	; 0x1f
    4182:	8e 8f       	std	Y+30, r24	; 0x1e
    4184:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4186:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4188:	9b 8f       	std	Y+27, r25	; 0x1b
    418a:	8a 8f       	std	Y+26, r24	; 0x1a
    418c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    418e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	f1 f7       	brne	.-4      	; 0x4190 <play_tone+0x1e0>
    4194:	9b 8f       	std	Y+27, r25	; 0x1b
    4196:	8a 8f       	std	Y+26, r24	; 0x1a
    4198:	0f c0       	rjmp	.+30     	; 0x41b8 <play_tone+0x208>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    419a:	69 a5       	ldd	r22, Y+41	; 0x29
    419c:	7a a5       	ldd	r23, Y+42	; 0x2a
    419e:	8b a5       	ldd	r24, Y+43	; 0x2b
    41a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	88 a7       	std	Y+40, r24	; 0x28
    41ac:	88 a5       	ldd	r24, Y+40	; 0x28
    41ae:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41b0:	89 8d       	ldd	r24, Y+25	; 0x19
    41b2:	8a 95       	dec	r24
    41b4:	f1 f7       	brne	.-4      	; 0x41b2 <play_tone+0x202>
    41b6:	89 8f       	std	Y+25, r24	; 0x19
		DIO_u8SetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PORT_LOW) ;
    41b8:	83 e0       	ldi	r24, 0x03	; 3
    41ba:	62 e0       	ldi	r22, 0x02	; 2
    41bc:	40 e0       	ldi	r20, 0x00	; 0
    41be:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
		_delay_us(pulse_width); // Wait for half period
    41c2:	6d a9       	ldd	r22, Y+53	; 0x35
    41c4:	7e a9       	ldd	r23, Y+54	; 0x36
    41c6:	8f a9       	ldd	r24, Y+55	; 0x37
    41c8:	98 ad       	ldd	r25, Y+56	; 0x38
    41ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	8d 8b       	std	Y+21, r24	; 0x15
    41d4:	9e 8b       	std	Y+22, r25	; 0x16
    41d6:	af 8b       	std	Y+23, r26	; 0x17
    41d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    41da:	6d 89       	ldd	r22, Y+21	; 0x15
    41dc:	7e 89       	ldd	r23, Y+22	; 0x16
    41de:	8f 89       	ldd	r24, Y+23	; 0x17
    41e0:	98 8d       	ldd	r25, Y+24	; 0x18
    41e2:	2b ea       	ldi	r18, 0xAB	; 171
    41e4:	3a ea       	ldi	r19, 0xAA	; 170
    41e6:	4a e2       	ldi	r20, 0x2A	; 42
    41e8:	50 e4       	ldi	r21, 0x40	; 64
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	89 8b       	std	Y+17, r24	; 0x11
    41f4:	9a 8b       	std	Y+18, r25	; 0x12
    41f6:	ab 8b       	std	Y+19, r26	; 0x13
    41f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    41fa:	69 89       	ldd	r22, Y+17	; 0x11
    41fc:	7a 89       	ldd	r23, Y+18	; 0x12
    41fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4200:	9c 89       	ldd	r25, Y+20	; 0x14
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e8       	ldi	r20, 0x80	; 128
    4208:	5f e3       	ldi	r21, 0x3F	; 63
    420a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    420e:	88 23       	and	r24, r24
    4210:	1c f4       	brge	.+6      	; 0x4218 <play_tone+0x268>
		__ticks = 1;
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	88 8b       	std	Y+16, r24	; 0x10
    4216:	91 c0       	rjmp	.+290    	; 0x433a <play_tone+0x38a>
	else if (__tmp > 255)
    4218:	69 89       	ldd	r22, Y+17	; 0x11
    421a:	7a 89       	ldd	r23, Y+18	; 0x12
    421c:	8b 89       	ldd	r24, Y+19	; 0x13
    421e:	9c 89       	ldd	r25, Y+20	; 0x14
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	4f e7       	ldi	r20, 0x7F	; 127
    4226:	53 e4       	ldi	r21, 0x43	; 67
    4228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    422c:	18 16       	cp	r1, r24
    422e:	0c f0       	brlt	.+2      	; 0x4232 <play_tone+0x282>
    4230:	7b c0       	rjmp	.+246    	; 0x4328 <play_tone+0x378>
	{
		_delay_ms(__us / 1000.0);
    4232:	6d 89       	ldd	r22, Y+21	; 0x15
    4234:	7e 89       	ldd	r23, Y+22	; 0x16
    4236:	8f 89       	ldd	r24, Y+23	; 0x17
    4238:	98 8d       	ldd	r25, Y+24	; 0x18
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	4a e7       	ldi	r20, 0x7A	; 122
    4240:	54 e4       	ldi	r21, 0x44	; 68
    4242:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	8c 87       	std	Y+12, r24	; 0x0c
    424c:	9d 87       	std	Y+13, r25	; 0x0d
    424e:	ae 87       	std	Y+14, r26	; 0x0e
    4250:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4252:	6c 85       	ldd	r22, Y+12	; 0x0c
    4254:	7d 85       	ldd	r23, Y+13	; 0x0d
    4256:	8e 85       	ldd	r24, Y+14	; 0x0e
    4258:	9f 85       	ldd	r25, Y+15	; 0x0f
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	4a ef       	ldi	r20, 0xFA	; 250
    4260:	54 e4       	ldi	r21, 0x44	; 68
    4262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4266:	dc 01       	movw	r26, r24
    4268:	cb 01       	movw	r24, r22
    426a:	88 87       	std	Y+8, r24	; 0x08
    426c:	99 87       	std	Y+9, r25	; 0x09
    426e:	aa 87       	std	Y+10, r26	; 0x0a
    4270:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4272:	68 85       	ldd	r22, Y+8	; 0x08
    4274:	79 85       	ldd	r23, Y+9	; 0x09
    4276:	8a 85       	ldd	r24, Y+10	; 0x0a
    4278:	9b 85       	ldd	r25, Y+11	; 0x0b
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e8       	ldi	r20, 0x80	; 128
    4280:	5f e3       	ldi	r21, 0x3F	; 63
    4282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4286:	88 23       	and	r24, r24
    4288:	2c f4       	brge	.+10     	; 0x4294 <play_tone+0x2e4>
		__ticks = 1;
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	9f 83       	std	Y+7, r25	; 0x07
    4290:	8e 83       	std	Y+6, r24	; 0x06
    4292:	3f c0       	rjmp	.+126    	; 0x4312 <play_tone+0x362>
	else if (__tmp > 65535)
    4294:	68 85       	ldd	r22, Y+8	; 0x08
    4296:	79 85       	ldd	r23, Y+9	; 0x09
    4298:	8a 85       	ldd	r24, Y+10	; 0x0a
    429a:	9b 85       	ldd	r25, Y+11	; 0x0b
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	3f ef       	ldi	r19, 0xFF	; 255
    42a0:	4f e7       	ldi	r20, 0x7F	; 127
    42a2:	57 e4       	ldi	r21, 0x47	; 71
    42a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a8:	18 16       	cp	r1, r24
    42aa:	4c f5       	brge	.+82     	; 0x42fe <play_tone+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    42ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    42b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    42b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	40 e2       	ldi	r20, 0x20	; 32
    42ba:	51 e4       	ldi	r21, 0x41	; 65
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	bc 01       	movw	r22, r24
    42c6:	cd 01       	movw	r24, r26
    42c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42cc:	dc 01       	movw	r26, r24
    42ce:	cb 01       	movw	r24, r22
    42d0:	9f 83       	std	Y+7, r25	; 0x07
    42d2:	8e 83       	std	Y+6, r24	; 0x06
    42d4:	0f c0       	rjmp	.+30     	; 0x42f4 <play_tone+0x344>
    42d6:	88 ec       	ldi	r24, 0xC8	; 200
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	9d 83       	std	Y+5, r25	; 0x05
    42dc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42de:	8c 81       	ldd	r24, Y+4	; 0x04
    42e0:	9d 81       	ldd	r25, Y+5	; 0x05
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	f1 f7       	brne	.-4      	; 0x42e2 <play_tone+0x332>
    42e6:	9d 83       	std	Y+5, r25	; 0x05
    42e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ea:	8e 81       	ldd	r24, Y+6	; 0x06
    42ec:	9f 81       	ldd	r25, Y+7	; 0x07
    42ee:	01 97       	sbiw	r24, 0x01	; 1
    42f0:	9f 83       	std	Y+7, r25	; 0x07
    42f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f4:	8e 81       	ldd	r24, Y+6	; 0x06
    42f6:	9f 81       	ldd	r25, Y+7	; 0x07
    42f8:	00 97       	sbiw	r24, 0x00	; 0
    42fa:	69 f7       	brne	.-38     	; 0x42d6 <play_tone+0x326>
    42fc:	24 c0       	rjmp	.+72     	; 0x4346 <play_tone+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42fe:	68 85       	ldd	r22, Y+8	; 0x08
    4300:	79 85       	ldd	r23, Y+9	; 0x09
    4302:	8a 85       	ldd	r24, Y+10	; 0x0a
    4304:	9b 85       	ldd	r25, Y+11	; 0x0b
    4306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	9f 83       	std	Y+7, r25	; 0x07
    4310:	8e 83       	std	Y+6, r24	; 0x06
    4312:	8e 81       	ldd	r24, Y+6	; 0x06
    4314:	9f 81       	ldd	r25, Y+7	; 0x07
    4316:	9b 83       	std	Y+3, r25	; 0x03
    4318:	8a 83       	std	Y+2, r24	; 0x02
    431a:	8a 81       	ldd	r24, Y+2	; 0x02
    431c:	9b 81       	ldd	r25, Y+3	; 0x03
    431e:	01 97       	sbiw	r24, 0x01	; 1
    4320:	f1 f7       	brne	.-4      	; 0x431e <play_tone+0x36e>
    4322:	9b 83       	std	Y+3, r25	; 0x03
    4324:	8a 83       	std	Y+2, r24	; 0x02
    4326:	0f c0       	rjmp	.+30     	; 0x4346 <play_tone+0x396>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4328:	69 89       	ldd	r22, Y+17	; 0x11
    432a:	7a 89       	ldd	r23, Y+18	; 0x12
    432c:	8b 89       	ldd	r24, Y+19	; 0x13
    432e:	9c 89       	ldd	r25, Y+20	; 0x14
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	88 8b       	std	Y+16, r24	; 0x10
    433a:	88 89       	ldd	r24, Y+16	; 0x10
    433c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    433e:	89 81       	ldd	r24, Y+1	; 0x01
    4340:	8a 95       	dec	r24
    4342:	f1 f7       	brne	.-4      	; 0x4340 <play_tone+0x390>
    4344:	89 83       	std	Y+1, r24	; 0x01
// Function to generate a tone of given frequency and duration
void play_tone(u32 frequency, u32 duration) {
	u32 period = 1000000 / frequency; // Calculate period in microseconds
	u32 pulse_width = period / 2; // Half period for square wave

	for ( u32 i = 0; i < duration * frequency / 1000; i++) {
    4346:	89 a9       	ldd	r24, Y+49	; 0x31
    4348:	9a a9       	ldd	r25, Y+50	; 0x32
    434a:	ab a9       	ldd	r26, Y+51	; 0x33
    434c:	bc a9       	ldd	r27, Y+52	; 0x34
    434e:	01 96       	adiw	r24, 0x01	; 1
    4350:	a1 1d       	adc	r26, r1
    4352:	b1 1d       	adc	r27, r1
    4354:	89 ab       	std	Y+49, r24	; 0x31
    4356:	9a ab       	std	Y+50, r25	; 0x32
    4358:	ab ab       	std	Y+51, r26	; 0x33
    435a:	bc ab       	std	Y+52, r27	; 0x34
    435c:	fe 01       	movw	r30, r28
    435e:	ef 5b       	subi	r30, 0xBF	; 191
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	a2 81       	ldd	r26, Z+2	; 0x02
    4368:	b3 81       	ldd	r27, Z+3	; 0x03
    436a:	fe 01       	movw	r30, r28
    436c:	fd 96       	adiw	r30, 0x3d	; 61
    436e:	20 81       	ld	r18, Z
    4370:	31 81       	ldd	r19, Z+1	; 0x01
    4372:	42 81       	ldd	r20, Z+2	; 0x02
    4374:	53 81       	ldd	r21, Z+3	; 0x03
    4376:	bc 01       	movw	r22, r24
    4378:	cd 01       	movw	r24, r26
    437a:	0e 94 10 24 	call	0x4820	; 0x4820 <__mulsi3>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	28 ee       	ldi	r18, 0xE8	; 232
    4384:	33 e0       	ldi	r19, 0x03	; 3
    4386:	40 e0       	ldi	r20, 0x00	; 0
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	bc 01       	movw	r22, r24
    438c:	cd 01       	movw	r24, r26
    438e:	0e 94 2f 24 	call	0x485e	; 0x485e <__udivmodsi4>
    4392:	da 01       	movw	r26, r20
    4394:	c9 01       	movw	r24, r18
    4396:	9c 01       	movw	r18, r24
    4398:	ad 01       	movw	r20, r26
    439a:	89 a9       	ldd	r24, Y+49	; 0x31
    439c:	9a a9       	ldd	r25, Y+50	; 0x32
    439e:	ab a9       	ldd	r26, Y+51	; 0x33
    43a0:	bc a9       	ldd	r27, Y+52	; 0x34
    43a2:	82 17       	cp	r24, r18
    43a4:	93 07       	cpc	r25, r19
    43a6:	a4 07       	cpc	r26, r20
    43a8:	b5 07       	cpc	r27, r21
    43aa:	08 f4       	brcc	.+2      	; 0x43ae <play_tone+0x3fe>
    43ac:	3e ce       	rjmp	.-900    	; 0x402a <play_tone+0x7a>
		DIO_u8SetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PORT_HIGH) ;
		_delay_us(pulse_width); // Wait for half period
		DIO_u8SetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PORT_LOW) ;
		_delay_us(pulse_width); // Wait for half period
	}
}
    43ae:	cc 5b       	subi	r28, 0xBC	; 188
    43b0:	df 4f       	sbci	r29, 0xFF	; 255
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	cf 91       	pop	r28
    43be:	df 91       	pop	r29
    43c0:	08 95       	ret

000043c2 <sendOptions>:




void sendOptions() {
    43c2:	df 93       	push	r29
    43c4:	cf 93       	push	r28
    43c6:	cd b7       	in	r28, 0x3d	; 61
    43c8:	de b7       	in	r29, 0x3e	; 62
	USART_VidSendStringSynch("1- Turn on the light\n");
    43ca:	86 ee       	ldi	r24, 0xE6	; 230
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    43d2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("2- Turn off the light\n");
    43d6:	8c ef       	ldi	r24, 0xFC	; 252
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    43de:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("3- Control light -> using LDR sensor\n");
    43e2:	83 e1       	ldi	r24, 0x13	; 19
    43e4:	91 e0       	ldi	r25, 0x01	; 1
    43e6:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    43ea:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("4- Open the door\n");
    43ee:	89 e3       	ldi	r24, 0x39	; 57
    43f0:	91 e0       	ldi	r25, 0x01	; 1
    43f2:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    43f6:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("5- Close the door\n");
    43fa:	8b e4       	ldi	r24, 0x4B	; 75
    43fc:	91 e0       	ldi	r25, 0x01	; 1
    43fe:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    4402:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("6- Open the fan\n");
    4406:	8e e5       	ldi	r24, 0x5E	; 94
    4408:	91 e0       	ldi	r25, 0x01	; 1
    440a:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    440e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("7- Close the fan\n");
    4412:	8f e6       	ldi	r24, 0x6F	; 111
    4414:	91 e0       	ldi	r25, 0x01	; 1
    4416:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    441a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("8- Control the fan speed -> using potentiometer\n");
    441e:	81 e8       	ldi	r24, 0x81	; 129
    4420:	91 e0       	ldi	r25, 0x01	; 1
    4422:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    4426:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
	USART_VidSendStringSynch("9- Play tone\n");
    442a:	82 eb       	ldi	r24, 0xB2	; 178
    442c:	91 e0       	ldi	r25, 0x01	; 1
    442e:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
	USART_u8SendNewLine();
    4432:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
}
    4436:	cf 91       	pop	r28
    4438:	df 91       	pop	r29
    443a:	08 95       	ret

0000443c <APP_voidDisplayDashboard>:





void APP_voidDisplayDashboard(void) {
    443c:	af 92       	push	r10
    443e:	bf 92       	push	r11
    4440:	cf 92       	push	r12
    4442:	df 92       	push	r13
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	df 93       	push	r29
    444e:	cf 93       	push	r28
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	a7 97       	sbiw	r28, 0x27	; 39
    4456:	0f b6       	in	r0, 0x3f	; 63
    4458:	f8 94       	cli
    445a:	de bf       	out	0x3e, r29	; 62
    445c:	0f be       	out	0x3f, r0	; 63
    445e:	cd bf       	out	0x3d, r28	; 61
    u8 num_leds;
    char temp_str[16];
    char leds_str[16];

    // Read LM35 temperature sensor and LDR sensor values
    if ((ADC_u8StartConversionSynch(7, &ADC_temp) == OK) && (ADC_u8StartConversionSynch(0, &adc_value) == OK)) {
    4460:	9e 01       	movw	r18, r28
    4462:	2a 5f       	subi	r18, 0xFA	; 250
    4464:	3f 4f       	sbci	r19, 0xFF	; 255
    4466:	87 e0       	ldi	r24, 0x07	; 7
    4468:	b9 01       	movw	r22, r18
    446a:	0e 94 bb 07 	call	0xf76	; 0xf76 <ADC_u8StartConversionSynch>
    446e:	88 23       	and	r24, r24
    4470:	09 f0       	breq	.+2      	; 0x4474 <APP_voidDisplayDashboard+0x38>
    4472:	6b c0       	rjmp	.+214    	; 0x454a <APP_voidDisplayDashboard+0x10e>
    4474:	9e 01       	movw	r18, r28
    4476:	2c 5f       	subi	r18, 0xFC	; 252
    4478:	3f 4f       	sbci	r19, 0xFF	; 255
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	b9 01       	movw	r22, r18
    447e:	0e 94 bb 07 	call	0xf76	; 0xf76 <ADC_u8StartConversionSynch>
    4482:	88 23       	and	r24, r24
    4484:	09 f0       	breq	.+2      	; 0x4488 <APP_voidDisplayDashboard+0x4c>
    4486:	61 c0       	rjmp	.+194    	; 0x454a <APP_voidDisplayDashboard+0x10e>
        // Convert LM35 ADC value to temperature in Celsius
        u16 temp = ConvertToTemp(ADC_temp);
    4488:	8e 81       	ldd	r24, Y+6	; 0x06
    448a:	9f 81       	ldd	r25, Y+7	; 0x07
    448c:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <ConvertToTemp>
    4490:	9a 83       	std	Y+2, r25	; 0x02
    4492:	89 83       	std	Y+1, r24	; 0x01

        // Map the LDR ADC value to a range suitable for LED brightness
        num_leds = Map(0, 255, 0, 8, adc_value);
    4494:	8c 81       	ldd	r24, Y+4	; 0x04
    4496:	9d 81       	ldd	r25, Y+5	; 0x05
    4498:	cc 01       	movw	r24, r24
    449a:	a0 e0       	ldi	r26, 0x00	; 0
    449c:	b0 e0       	ldi	r27, 0x00	; 0
    449e:	00 d0       	rcall	.+0      	; 0x44a0 <APP_voidDisplayDashboard+0x64>
    44a0:	00 d0       	rcall	.+0      	; 0x44a2 <APP_voidDisplayDashboard+0x66>
    44a2:	ed b7       	in	r30, 0x3d	; 61
    44a4:	fe b7       	in	r31, 0x3e	; 62
    44a6:	31 96       	adiw	r30, 0x01	; 1
    44a8:	80 83       	st	Z, r24
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	a2 83       	std	Z+2, r26	; 0x02
    44ae:	b3 83       	std	Z+3, r27	; 0x03
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	2f ef       	ldi	r18, 0xFF	; 255
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e0       	ldi	r20, 0x00	; 0
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	ee 24       	eor	r14, r14
    44c2:	ff 24       	eor	r15, r15
    44c4:	87 01       	movw	r16, r14
    44c6:	aa 24       	eor	r10, r10
    44c8:	bb 24       	eor	r11, r11
    44ca:	65 01       	movw	r12, r10
    44cc:	68 94       	set
    44ce:	a3 f8       	bld	r10, 3
    44d0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <Map>
    44d4:	0f 90       	pop	r0
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	8b 83       	std	Y+3, r24	; 0x03

        // Clear display
        CLCD_VidDisplayClear();
    44e2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <CLCD_VidDisplayClear>

        // Display temperature
        CLCD_voidGotoXY(0, 0);
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>
        CLCD_voidSendString("Temperature: ");
    44ee:	80 ec       	ldi	r24, 0xC0	; 192
    44f0:	91 e0       	ldi	r25, 0x01	; 1
    44f2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
        CLCD_voidSendString("   ");
    44f6:	8e ec       	ldi	r24, 0xCE	; 206
    44f8:	91 e0       	ldi	r25, 0x01	; 1
    44fa:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
        CLCD_voidGotoXY(0, 13);
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	6d e0       	ldi	r22, 0x0D	; 13
    4502:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>
        CLCD_voidWriteNumber(temp);
    4506:	89 81       	ldd	r24, Y+1	; 0x01
    4508:	9a 81       	ldd	r25, Y+2	; 0x02
    450a:	cc 01       	movw	r24, r24
    450c:	a0 e0       	ldi	r26, 0x00	; 0
    450e:	b0 e0       	ldi	r27, 0x00	; 0
    4510:	bc 01       	movw	r22, r24
    4512:	cd 01       	movw	r24, r26
    4514:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <CLCD_voidWriteNumber>

        // Move cursor to the second line
        CLCD_voidGotoXY(1, 0);
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	60 e0       	ldi	r22, 0x00	; 0
    451c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>
        CLCD_voidSendString("num_leds: ");
    4520:	82 ed       	ldi	r24, 0xD2	; 210
    4522:	91 e0       	ldi	r25, 0x01	; 1
    4524:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
        CLCD_voidSendString("   ");
    4528:	8e ec       	ldi	r24, 0xCE	; 206
    452a:	91 e0       	ldi	r25, 0x01	; 1
    452c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CLCD_voidSendString>
        CLCD_voidGotoXY(1, 13);
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	6d e0       	ldi	r22, 0x0D	; 13
    4534:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <CLCD_voidGotoXY>
        CLCD_voidWriteNumber(num_leds);
    4538:	8b 81       	ldd	r24, Y+3	; 0x03
    453a:	88 2f       	mov	r24, r24
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	a0 e0       	ldi	r26, 0x00	; 0
    4540:	b0 e0       	ldi	r27, 0x00	; 0
    4542:	bc 01       	movw	r22, r24
    4544:	cd 01       	movw	r24, r26
    4546:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <CLCD_voidWriteNumber>
    }
}
    454a:	a7 96       	adiw	r28, 0x27	; 39
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	de bf       	out	0x3e, r29	; 62
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	cd bf       	out	0x3d, r28	; 61
    4556:	cf 91       	pop	r28
    4558:	df 91       	pop	r29
    455a:	1f 91       	pop	r17
    455c:	0f 91       	pop	r16
    455e:	ff 90       	pop	r15
    4560:	ef 90       	pop	r14
    4562:	df 90       	pop	r13
    4564:	cf 90       	pop	r12
    4566:	bf 90       	pop	r11
    4568:	af 90       	pop	r10
    456a:	08 95       	ret

0000456c <main>:
#include "LDR.h"


#include "APP.h"

void main(void) {
    456c:	df 93       	push	r29
    456e:	cf 93       	push	r28
    4570:	cd b7       	in	r28, 0x3d	; 61
    4572:	de b7       	in	r29, 0x3e	; 62
    4574:	62 97       	sbiw	r28, 0x12	; 18
    4576:	0f b6       	in	r0, 0x3f	; 63
    4578:	f8 94       	cli
    457a:	de bf       	out	0x3e, r29	; 62
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	cd bf       	out	0x3d, r28	; 61
    u8 Number = 0, data;
    4580:	1f 86       	std	Y+15, r1	; 0x0f

    // Initialize peripherals
    PORT_voidInit();
    4582:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <PORT_voidInit>
    USART_VidInit();
    4586:	0e 94 71 18 	call	0x30e2	; 0x30e2 <USART_VidInit>
    ADC_voidInt();
    458a:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_voidInt>
    CLCD_voidInit();
    458e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <CLCD_voidInit>
    TIMER0_voidInit();
    4592:	0e 94 1d 18 	call	0x303a	; 0x303a <TIMER0_voidInit>
    TIMER1_voidInit();
    4596:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <TIMER1_voidInit>

    // Perform login
    APP_voidLogin();
    459a:	0e 94 ed 1a 	call	0x35da	; 0x35da <APP_voidLogin>
	USART_u8SendNewLine();
    459e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>

    USART_VidSendStringSynch("Choose an option:\n");
    45a2:	8d ed       	ldi	r24, 0xDD	; 221
    45a4:	91 e0       	ldi	r25, 0x01	; 1
    45a6:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
    USART_u8SendNewLine();
    45aa:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>

     sendOptions(); // Send the list of options
    45ae:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <sendOptions>
		USART_u8SendNewLine();
    45b2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>

    // Main loop
    while (1) {
        // Send options to the user

    	APP_voidDisplayDashboard() ;
    45b6:	0e 94 1e 22 	call	0x443c	; 0x443c <APP_voidDisplayDashboard>

        // Wait for user input
        while (USART_u8ReceiveByte(&data) != OK); // Wait until valid data is received
    45ba:	ce 01       	movw	r24, r28
    45bc:	40 96       	adiw	r24, 0x10	; 16
    45be:	0e 94 85 19 	call	0x330a	; 0x330a <USART_u8ReceiveByte>
    45c2:	88 23       	and	r24, r24
    45c4:	d1 f7       	brne	.-12     	; 0x45ba <main+0x4e>

        Number = data; // Assign received data to Number
    45c6:	88 89       	ldd	r24, Y+16	; 0x10
    45c8:	8f 87       	std	Y+15, r24	; 0x0f

        // Process the received number
        switch (Number) {
    45ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    45cc:	28 2f       	mov	r18, r24
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	3a 8b       	std	Y+18, r19	; 0x12
    45d2:	29 8b       	std	Y+17, r18	; 0x11
    45d4:	89 89       	ldd	r24, Y+17	; 0x11
    45d6:	9a 89       	ldd	r25, Y+18	; 0x12
    45d8:	84 33       	cpi	r24, 0x34	; 52
    45da:	91 05       	cpc	r25, r1
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <main+0x74>
    45de:	63 c0       	rjmp	.+198    	; 0x46a6 <main+0x13a>
    45e0:	29 89       	ldd	r18, Y+17	; 0x11
    45e2:	3a 89       	ldd	r19, Y+18	; 0x12
    45e4:	25 33       	cpi	r18, 0x35	; 53
    45e6:	31 05       	cpc	r19, r1
    45e8:	dc f4       	brge	.+54     	; 0x4620 <main+0xb4>
    45ea:	89 89       	ldd	r24, Y+17	; 0x11
    45ec:	9a 89       	ldd	r25, Y+18	; 0x12
    45ee:	81 33       	cpi	r24, 0x31	; 49
    45f0:	91 05       	cpc	r25, r1
    45f2:	d1 f1       	breq	.+116    	; 0x4668 <main+0xfc>
    45f4:	29 89       	ldd	r18, Y+17	; 0x11
    45f6:	3a 89       	ldd	r19, Y+18	; 0x12
    45f8:	22 33       	cpi	r18, 0x32	; 50
    45fa:	31 05       	cpc	r19, r1
    45fc:	34 f4       	brge	.+12     	; 0x460a <main+0x9e>
    45fe:	89 89       	ldd	r24, Y+17	; 0x11
    4600:	9a 89       	ldd	r25, Y+18	; 0x12
    4602:	80 33       	cpi	r24, 0x30	; 48
    4604:	91 05       	cpc	r25, r1
    4606:	b9 f2       	breq	.-82     	; 0x45b6 <main+0x4a>
    4608:	04 c1       	rjmp	.+520    	; 0x4812 <main+0x2a6>
    460a:	29 89       	ldd	r18, Y+17	; 0x11
    460c:	3a 89       	ldd	r19, Y+18	; 0x12
    460e:	22 33       	cpi	r18, 0x32	; 50
    4610:	31 05       	cpc	r19, r1
    4612:	a9 f1       	breq	.+106    	; 0x467e <main+0x112>
    4614:	89 89       	ldd	r24, Y+17	; 0x11
    4616:	9a 89       	ldd	r25, Y+18	; 0x12
    4618:	83 33       	cpi	r24, 0x33	; 51
    461a:	91 05       	cpc	r25, r1
    461c:	d9 f1       	breq	.+118    	; 0x4694 <main+0x128>
    461e:	f9 c0       	rjmp	.+498    	; 0x4812 <main+0x2a6>
    4620:	29 89       	ldd	r18, Y+17	; 0x11
    4622:	3a 89       	ldd	r19, Y+18	; 0x12
    4624:	27 33       	cpi	r18, 0x37	; 55
    4626:	31 05       	cpc	r19, r1
    4628:	09 f4       	brne	.+2      	; 0x462c <main+0xc0>
    462a:	5b c0       	rjmp	.+182    	; 0x46e2 <main+0x176>
    462c:	89 89       	ldd	r24, Y+17	; 0x11
    462e:	9a 89       	ldd	r25, Y+18	; 0x12
    4630:	88 33       	cpi	r24, 0x38	; 56
    4632:	91 05       	cpc	r25, r1
    4634:	64 f4       	brge	.+24     	; 0x464e <main+0xe2>
    4636:	29 89       	ldd	r18, Y+17	; 0x11
    4638:	3a 89       	ldd	r19, Y+18	; 0x12
    463a:	25 33       	cpi	r18, 0x35	; 53
    463c:	31 05       	cpc	r19, r1
    463e:	e1 f1       	breq	.+120    	; 0x46b8 <main+0x14c>
    4640:	89 89       	ldd	r24, Y+17	; 0x11
    4642:	9a 89       	ldd	r25, Y+18	; 0x12
    4644:	86 33       	cpi	r24, 0x36	; 54
    4646:	91 05       	cpc	r25, r1
    4648:	09 f4       	brne	.+2      	; 0x464c <main+0xe0>
    464a:	3f c0       	rjmp	.+126    	; 0x46ca <main+0x15e>
    464c:	e2 c0       	rjmp	.+452    	; 0x4812 <main+0x2a6>
    464e:	29 89       	ldd	r18, Y+17	; 0x11
    4650:	3a 89       	ldd	r19, Y+18	; 0x12
    4652:	28 33       	cpi	r18, 0x38	; 56
    4654:	31 05       	cpc	r19, r1
    4656:	09 f4       	brne	.+2      	; 0x465a <main+0xee>
    4658:	50 c0       	rjmp	.+160    	; 0x46fa <main+0x18e>
    465a:	89 89       	ldd	r24, Y+17	; 0x11
    465c:	9a 89       	ldd	r25, Y+18	; 0x12
    465e:	89 33       	cpi	r24, 0x39	; 57
    4660:	91 05       	cpc	r25, r1
    4662:	09 f4       	brne	.+2      	; 0x4666 <main+0xfa>
    4664:	53 c0       	rjmp	.+166    	; 0x470c <main+0x1a0>
    4666:	d5 c0       	rjmp	.+426    	; 0x4812 <main+0x2a6>
            case '1':
                // LED array port
                DIO_u8SetPortValue(DIO_u8PORTC, DIO_u8PORT_HIGH);
    4668:	82 e0       	ldi	r24, 0x02	; 2
    466a:	6f ef       	ldi	r22, 0xFF	; 255
    466c:	0e 94 c0 11 	call	0x2380	; 0x2380 <DIO_u8SetPortValue>
                USART_VidSendStringSynch("LED ON \n");  // send status of LED (LED ON)
    4670:	80 ef       	ldi	r24, 0xF0	; 240
    4672:	91 e0       	ldi	r25, 0x01	; 1
    4674:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    4678:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    467c:	9c cf       	rjmp	.-200    	; 0x45b6 <main+0x4a>

                break;
            case '2':
                // LED array port
                DIO_u8SetPortValue(DIO_u8PORTC, DIO_u8PORT_LOW);
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	60 e0       	ldi	r22, 0x00	; 0
    4682:	0e 94 c0 11 	call	0x2380	; 0x2380 <DIO_u8SetPortValue>
                USART_VidSendStringSynch("LED OFF \n");
    4686:	89 ef       	ldi	r24, 0xF9	; 249
    4688:	91 e0       	ldi	r25, 0x01	; 1
    468a:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    468e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    4692:	91 cf       	rjmp	.-222    	; 0x45b6 <main+0x4a>

                break;
            case '3':
                APP_voidControlLight();
    4694:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <APP_voidControlLight>
                USART_VidSendStringSynch("LEDS UNDER CONTROL \n");
    4698:	83 e0       	ldi	r24, 0x03	; 3
    469a:	92 e0       	ldi	r25, 0x02	; 2
    469c:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    46a0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    46a4:	88 cf       	rjmp	.-240    	; 0x45b6 <main+0x4a>

                break;
            case '4':
                APP_voidOpenDoor();
    46a6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <APP_voidOpenDoor>
                USART_VidSendStringSynch("DOOR OPEN  \n");
    46aa:	88 e1       	ldi	r24, 0x18	; 24
    46ac:	92 e0       	ldi	r25, 0x02	; 2
    46ae:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    46b2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    46b6:	7f cf       	rjmp	.-258    	; 0x45b6 <main+0x4a>

                break;
            case '5':
                APP_voidCloseDoor();
    46b8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <APP_voidCloseDoor>
                USART_VidSendStringSynch("DOOR CLOSE \n");
    46bc:	85 e2       	ldi	r24, 0x25	; 37
    46be:	92 e0       	ldi	r25, 0x02	; 2
    46c0:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    46c4:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    46c8:	76 cf       	rjmp	.-276    	; 0x45b6 <main+0x4a>

                break;
            case '6':
                // DC motor control pin
                DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_HIGH);
    46ca:	83 e0       	ldi	r24, 0x03	; 3
    46cc:	63 e0       	ldi	r22, 0x03	; 3
    46ce:	41 e0       	ldi	r20, 0x01	; 1
    46d0:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
                USART_VidSendStringSynch("FAN ON \n");
    46d4:	82 e3       	ldi	r24, 0x32	; 50
    46d6:	92 e0       	ldi	r25, 0x02	; 2
    46d8:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    46dc:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    46e0:	6a cf       	rjmp	.-300    	; 0x45b6 <main+0x4a>

                break;
            case '7':
                // DC motor control pin
                DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_LOW);
    46e2:	83 e0       	ldi	r24, 0x03	; 3
    46e4:	63 e0       	ldi	r22, 0x03	; 3
    46e6:	40 e0       	ldi	r20, 0x00	; 0
    46e8:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetPinValue>
                USART_VidSendStringSynch("FAN OFF \n");
    46ec:	8b e3       	ldi	r24, 0x3B	; 59
    46ee:	92 e0       	ldi	r25, 0x02	; 2
    46f0:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    46f4:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    46f8:	5e cf       	rjmp	.-324    	; 0x45b6 <main+0x4a>

                break;
            case '8':
                APP_voidControlFanSpeed();
    46fa:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <APP_voidControlFanSpeed>
                USART_VidSendStringSynch("FAN control With TEMP \n");
    46fe:	85 e4       	ldi	r24, 0x45	; 69
    4700:	92 e0       	ldi	r25, 0x02	; 2
    4702:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    4706:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    470a:	55 cf       	rjmp	.-342    	; 0x45b6 <main+0x4a>

                break;
            case '9':
                play_tone(262, 500);
    470c:	66 e0       	ldi	r22, 0x06	; 6
    470e:	71 e0       	ldi	r23, 0x01	; 1
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	24 ef       	ldi	r18, 0xF4	; 244
    4716:	31 e0       	ldi	r19, 0x01	; 1
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <play_tone>
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	a8 ec       	ldi	r26, 0xC8	; 200
    4726:	b2 e4       	ldi	r27, 0x42	; 66
    4728:	8b 87       	std	Y+11, r24	; 0x0b
    472a:	9c 87       	std	Y+12, r25	; 0x0c
    472c:	ad 87       	std	Y+13, r26	; 0x0d
    472e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4730:	6b 85       	ldd	r22, Y+11	; 0x0b
    4732:	7c 85       	ldd	r23, Y+12	; 0x0c
    4734:	8d 85       	ldd	r24, Y+13	; 0x0d
    4736:	9e 85       	ldd	r25, Y+14	; 0x0e
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	4a ef       	ldi	r20, 0xFA	; 250
    473e:	54 e4       	ldi	r21, 0x44	; 68
    4740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	8f 83       	std	Y+7, r24	; 0x07
    474a:	98 87       	std	Y+8, r25	; 0x08
    474c:	a9 87       	std	Y+9, r26	; 0x09
    474e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4750:	6f 81       	ldd	r22, Y+7	; 0x07
    4752:	78 85       	ldd	r23, Y+8	; 0x08
    4754:	89 85       	ldd	r24, Y+9	; 0x09
    4756:	9a 85       	ldd	r25, Y+10	; 0x0a
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	40 e8       	ldi	r20, 0x80	; 128
    475e:	5f e3       	ldi	r21, 0x3F	; 63
    4760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4764:	88 23       	and	r24, r24
    4766:	2c f4       	brge	.+10     	; 0x4772 <main+0x206>
		__ticks = 1;
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	9e 83       	std	Y+6, r25	; 0x06
    476e:	8d 83       	std	Y+5, r24	; 0x05
    4770:	3f c0       	rjmp	.+126    	; 0x47f0 <main+0x284>
	else if (__tmp > 65535)
    4772:	6f 81       	ldd	r22, Y+7	; 0x07
    4774:	78 85       	ldd	r23, Y+8	; 0x08
    4776:	89 85       	ldd	r24, Y+9	; 0x09
    4778:	9a 85       	ldd	r25, Y+10	; 0x0a
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	3f ef       	ldi	r19, 0xFF	; 255
    477e:	4f e7       	ldi	r20, 0x7F	; 127
    4780:	57 e4       	ldi	r21, 0x47	; 71
    4782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4786:	18 16       	cp	r1, r24
    4788:	4c f5       	brge	.+82     	; 0x47dc <main+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478a:	6b 85       	ldd	r22, Y+11	; 0x0b
    478c:	7c 85       	ldd	r23, Y+12	; 0x0c
    478e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4790:	9e 85       	ldd	r25, Y+14	; 0x0e
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	40 e2       	ldi	r20, 0x20	; 32
    4798:	51 e4       	ldi	r21, 0x41	; 65
    479a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	bc 01       	movw	r22, r24
    47a4:	cd 01       	movw	r24, r26
    47a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	9e 83       	std	Y+6, r25	; 0x06
    47b0:	8d 83       	std	Y+5, r24	; 0x05
    47b2:	0f c0       	rjmp	.+30     	; 0x47d2 <main+0x266>
    47b4:	88 ec       	ldi	r24, 0xC8	; 200
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	9c 83       	std	Y+4, r25	; 0x04
    47ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47bc:	8b 81       	ldd	r24, Y+3	; 0x03
    47be:	9c 81       	ldd	r25, Y+4	; 0x04
    47c0:	01 97       	sbiw	r24, 0x01	; 1
    47c2:	f1 f7       	brne	.-4      	; 0x47c0 <main+0x254>
    47c4:	9c 83       	std	Y+4, r25	; 0x04
    47c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ca:	9e 81       	ldd	r25, Y+6	; 0x06
    47cc:	01 97       	sbiw	r24, 0x01	; 1
    47ce:	9e 83       	std	Y+6, r25	; 0x06
    47d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47d2:	8d 81       	ldd	r24, Y+5	; 0x05
    47d4:	9e 81       	ldd	r25, Y+6	; 0x06
    47d6:	00 97       	sbiw	r24, 0x00	; 0
    47d8:	69 f7       	brne	.-38     	; 0x47b4 <main+0x248>
    47da:	14 c0       	rjmp	.+40     	; 0x4804 <main+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47dc:	6f 81       	ldd	r22, Y+7	; 0x07
    47de:	78 85       	ldd	r23, Y+8	; 0x08
    47e0:	89 85       	ldd	r24, Y+9	; 0x09
    47e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	9e 83       	std	Y+6, r25	; 0x06
    47ee:	8d 83       	std	Y+5, r24	; 0x05
    47f0:	8d 81       	ldd	r24, Y+5	; 0x05
    47f2:	9e 81       	ldd	r25, Y+6	; 0x06
    47f4:	9a 83       	std	Y+2, r25	; 0x02
    47f6:	89 83       	std	Y+1, r24	; 0x01
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	9a 81       	ldd	r25, Y+2	; 0x02
    47fc:	01 97       	sbiw	r24, 0x01	; 1
    47fe:	f1 f7       	brne	.-4      	; 0x47fc <main+0x290>
    4800:	9a 83       	std	Y+2, r25	; 0x02
    4802:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(100); // Delay between tones
                USART_VidSendStringSynch("MUSIC ON \n");
    4804:	8d e5       	ldi	r24, 0x5D	; 93
    4806:	92 e0       	ldi	r25, 0x02	; 2
    4808:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    480c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    4810:	d2 ce       	rjmp	.-604    	; 0x45b6 <main+0x4a>
                break;
            case '0':
                // Do nothing, as the options are already sent
                break;
            default:
                USART_VidSendStringSynch("Invalid option, please try again\n");
    4812:	88 e6       	ldi	r24, 0x68	; 104
    4814:	92 e0       	ldi	r25, 0x02	; 2
    4816:	0e 94 02 19 	call	0x3204	; 0x3204 <USART_VidSendStringSynch>
        	    USART_u8SendNewLine();
    481a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <USART_u8SendNewLine>
    481e:	cb ce       	rjmp	.-618    	; 0x45b6 <main+0x4a>

00004820 <__mulsi3>:
    4820:	62 9f       	mul	r22, r18
    4822:	d0 01       	movw	r26, r0
    4824:	73 9f       	mul	r23, r19
    4826:	f0 01       	movw	r30, r0
    4828:	82 9f       	mul	r24, r18
    482a:	e0 0d       	add	r30, r0
    482c:	f1 1d       	adc	r31, r1
    482e:	64 9f       	mul	r22, r20
    4830:	e0 0d       	add	r30, r0
    4832:	f1 1d       	adc	r31, r1
    4834:	92 9f       	mul	r25, r18
    4836:	f0 0d       	add	r31, r0
    4838:	83 9f       	mul	r24, r19
    483a:	f0 0d       	add	r31, r0
    483c:	74 9f       	mul	r23, r20
    483e:	f0 0d       	add	r31, r0
    4840:	65 9f       	mul	r22, r21
    4842:	f0 0d       	add	r31, r0
    4844:	99 27       	eor	r25, r25
    4846:	72 9f       	mul	r23, r18
    4848:	b0 0d       	add	r27, r0
    484a:	e1 1d       	adc	r30, r1
    484c:	f9 1f       	adc	r31, r25
    484e:	63 9f       	mul	r22, r19
    4850:	b0 0d       	add	r27, r0
    4852:	e1 1d       	adc	r30, r1
    4854:	f9 1f       	adc	r31, r25
    4856:	bd 01       	movw	r22, r26
    4858:	cf 01       	movw	r24, r30
    485a:	11 24       	eor	r1, r1
    485c:	08 95       	ret

0000485e <__udivmodsi4>:
    485e:	a1 e2       	ldi	r26, 0x21	; 33
    4860:	1a 2e       	mov	r1, r26
    4862:	aa 1b       	sub	r26, r26
    4864:	bb 1b       	sub	r27, r27
    4866:	fd 01       	movw	r30, r26
    4868:	0d c0       	rjmp	.+26     	; 0x4884 <__udivmodsi4_ep>

0000486a <__udivmodsi4_loop>:
    486a:	aa 1f       	adc	r26, r26
    486c:	bb 1f       	adc	r27, r27
    486e:	ee 1f       	adc	r30, r30
    4870:	ff 1f       	adc	r31, r31
    4872:	a2 17       	cp	r26, r18
    4874:	b3 07       	cpc	r27, r19
    4876:	e4 07       	cpc	r30, r20
    4878:	f5 07       	cpc	r31, r21
    487a:	20 f0       	brcs	.+8      	; 0x4884 <__udivmodsi4_ep>
    487c:	a2 1b       	sub	r26, r18
    487e:	b3 0b       	sbc	r27, r19
    4880:	e4 0b       	sbc	r30, r20
    4882:	f5 0b       	sbc	r31, r21

00004884 <__udivmodsi4_ep>:
    4884:	66 1f       	adc	r22, r22
    4886:	77 1f       	adc	r23, r23
    4888:	88 1f       	adc	r24, r24
    488a:	99 1f       	adc	r25, r25
    488c:	1a 94       	dec	r1
    488e:	69 f7       	brne	.-38     	; 0x486a <__udivmodsi4_loop>
    4890:	60 95       	com	r22
    4892:	70 95       	com	r23
    4894:	80 95       	com	r24
    4896:	90 95       	com	r25
    4898:	9b 01       	movw	r18, r22
    489a:	ac 01       	movw	r20, r24
    489c:	bd 01       	movw	r22, r26
    489e:	cf 01       	movw	r24, r30
    48a0:	08 95       	ret

000048a2 <__divmodsi4>:
    48a2:	97 fb       	bst	r25, 7
    48a4:	09 2e       	mov	r0, r25
    48a6:	05 26       	eor	r0, r21
    48a8:	0e d0       	rcall	.+28     	; 0x48c6 <__divmodsi4_neg1>
    48aa:	57 fd       	sbrc	r21, 7
    48ac:	04 d0       	rcall	.+8      	; 0x48b6 <__divmodsi4_neg2>
    48ae:	d7 df       	rcall	.-82     	; 0x485e <__udivmodsi4>
    48b0:	0a d0       	rcall	.+20     	; 0x48c6 <__divmodsi4_neg1>
    48b2:	00 1c       	adc	r0, r0
    48b4:	38 f4       	brcc	.+14     	; 0x48c4 <__divmodsi4_exit>

000048b6 <__divmodsi4_neg2>:
    48b6:	50 95       	com	r21
    48b8:	40 95       	com	r20
    48ba:	30 95       	com	r19
    48bc:	21 95       	neg	r18
    48be:	3f 4f       	sbci	r19, 0xFF	; 255
    48c0:	4f 4f       	sbci	r20, 0xFF	; 255
    48c2:	5f 4f       	sbci	r21, 0xFF	; 255

000048c4 <__divmodsi4_exit>:
    48c4:	08 95       	ret

000048c6 <__divmodsi4_neg1>:
    48c6:	f6 f7       	brtc	.-4      	; 0x48c4 <__divmodsi4_exit>
    48c8:	90 95       	com	r25
    48ca:	80 95       	com	r24
    48cc:	70 95       	com	r23
    48ce:	61 95       	neg	r22
    48d0:	7f 4f       	sbci	r23, 0xFF	; 255
    48d2:	8f 4f       	sbci	r24, 0xFF	; 255
    48d4:	9f 4f       	sbci	r25, 0xFF	; 255
    48d6:	08 95       	ret

000048d8 <__prologue_saves__>:
    48d8:	2f 92       	push	r2
    48da:	3f 92       	push	r3
    48dc:	4f 92       	push	r4
    48de:	5f 92       	push	r5
    48e0:	6f 92       	push	r6
    48e2:	7f 92       	push	r7
    48e4:	8f 92       	push	r8
    48e6:	9f 92       	push	r9
    48e8:	af 92       	push	r10
    48ea:	bf 92       	push	r11
    48ec:	cf 92       	push	r12
    48ee:	df 92       	push	r13
    48f0:	ef 92       	push	r14
    48f2:	ff 92       	push	r15
    48f4:	0f 93       	push	r16
    48f6:	1f 93       	push	r17
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	ca 1b       	sub	r28, r26
    4902:	db 0b       	sbc	r29, r27
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	09 94       	ijmp

00004910 <__epilogue_restores__>:
    4910:	2a 88       	ldd	r2, Y+18	; 0x12
    4912:	39 88       	ldd	r3, Y+17	; 0x11
    4914:	48 88       	ldd	r4, Y+16	; 0x10
    4916:	5f 84       	ldd	r5, Y+15	; 0x0f
    4918:	6e 84       	ldd	r6, Y+14	; 0x0e
    491a:	7d 84       	ldd	r7, Y+13	; 0x0d
    491c:	8c 84       	ldd	r8, Y+12	; 0x0c
    491e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4920:	aa 84       	ldd	r10, Y+10	; 0x0a
    4922:	b9 84       	ldd	r11, Y+9	; 0x09
    4924:	c8 84       	ldd	r12, Y+8	; 0x08
    4926:	df 80       	ldd	r13, Y+7	; 0x07
    4928:	ee 80       	ldd	r14, Y+6	; 0x06
    492a:	fd 80       	ldd	r15, Y+5	; 0x05
    492c:	0c 81       	ldd	r16, Y+4	; 0x04
    492e:	1b 81       	ldd	r17, Y+3	; 0x03
    4930:	aa 81       	ldd	r26, Y+2	; 0x02
    4932:	b9 81       	ldd	r27, Y+1	; 0x01
    4934:	ce 0f       	add	r28, r30
    4936:	d1 1d       	adc	r29, r1
    4938:	0f b6       	in	r0, 0x3f	; 63
    493a:	f8 94       	cli
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	0f be       	out	0x3f, r0	; 63
    4940:	cd bf       	out	0x3d, r28	; 61
    4942:	ed 01       	movw	r28, r26
    4944:	08 95       	ret

00004946 <_exit>:
    4946:	f8 94       	cli

00004948 <__stop_program>:
    4948:	ff cf       	rjmp	.-2      	; 0x4948 <__stop_program>
